// Created by Microsoft (R) C/C++ Compiler Version 12.00.9782.0 (1b63e5e7).
//
// k:\_a\a\release\vidgrab_VC6.tlh
//
// C++ source equivalent of Win32 type library k:\ocx\vidgrab_VC6.ocx
// compiler-generated file created 11/23/10 at 09:15:48 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace Vidgrab_VC6 {

//
// Forward references and typedefs
//

struct __declspec(uuid("3e281ec3-4b06-4f8f-a14f-9c9fac7a85a0"))
/* dual interface */ IVideoGrabberVC6;
struct __declspec(uuid("5ee7e058-1a02-402a-a953-47afde5f1e91"))
/* dispinterface */ IVideoGrabberVC6Events;
struct /* coclass */ VideoGrabberVC6;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IVideoGrabberVC6, __uuidof(IVideoGrabberVC6));
_COM_SMARTPTR_TYPEDEF(IVideoGrabberVC6Events, __uuidof(IDispatch));

//
// Type library items
//

struct __declspec(uuid("3e281ec3-4b06-4f8f-a14f-9c9fac7a85a0"))
IVideoGrabberVC6 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum TxAlignment Alignment;
    __declspec(property(get=GetFullRepaint,put=PutFullRepaint))
    VARIANT_BOOL FullRepaint;
    __declspec(property(get=GetParentColor,put=PutParentColor))
    VARIANT_BOOL ParentColor;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAdjustOverlayAspectRatio,put=PutAdjustOverlayAspectRatio))
    VARIANT_BOOL AdjustOverlayAspectRatio;
    __declspec(property(get=GetAdjustPixelAspectRatio,put=PutAdjustPixelAspectRatio))
    VARIANT_BOOL AdjustPixelAspectRatio;
    __declspec(property(get=GetAero,put=PutAero))
    enum TxAero Aero;
    __declspec(property(get=GetAnalogVideoStandard,put=PutAnalogVideoStandard))
    long AnalogVideoStandard;
    __declspec(property(get=GetApplicationPriority,put=PutApplicationPriority))
    enum TxApplicationPriority ApplicationPriority;
    __declspec(property(get=GetASFAudioBitRate,put=PutASFAudioBitRate))
    long ASFAudioBitRate;
    __declspec(property(get=GetASFAudioChannels,put=PutASFAudioChannels))
    long ASFAudioChannels;
    __declspec(property(get=GetASFDeinterlaceMode,put=PutASFDeinterlaceMode))
    enum TxASFDeinterlaceMode ASFDeinterlaceMode;
    __declspec(property(get=GetASFFixedFrameRate,put=PutASFFixedFrameRate))
    VARIANT_BOOL ASFFixedFrameRate;
    __declspec(property(get=GetASFMediaServerPublishingPoint,put=PutASFMediaServerPublishingPoint))
    _bstr_t ASFMediaServerPublishingPoint;
    __declspec(property(get=GetASFMediaServerTemplatePublishingPoint,put=PutASFMediaServerTemplatePublishingPoint))
    _bstr_t ASFMediaServerTemplatePublishingPoint;
    __declspec(property(get=GetASFMediaServerRemovePublishingPointAfterDisconnect,put=PutASFMediaServerRemovePublishingPointAfterDisconnect))
    VARIANT_BOOL ASFMediaServerRemovePublishingPointAfterDisconnect;
    __declspec(property(get=GetASFNetworkPort,put=PutASFNetworkPort))
    long ASFNetworkPort;
    __declspec(property(get=GetASFNetworkMaxUsers,put=PutASFNetworkMaxUsers))
    long ASFNetworkMaxUsers;
    __declspec(property(get=GetASFProfile,put=PutASFProfile))
    long ASFProfile;
    __declspec(property(get=GetASFProfileFromCustomFile,put=PutASFProfileFromCustomFile))
    _bstr_t ASFProfileFromCustomFile;
    __declspec(property(get=GetASFProfileVersion,put=PutASFProfileVersion))
    enum TxASFProfileVersion ASFProfileVersion;
    __declspec(property(get=GetASFVideoBitRate,put=PutASFVideoBitRate))
    long ASFVideoBitRate;
    __declspec(property(get=GetASFVideoFrameRate,put=PutASFVideoFrameRate))
    double ASFVideoFrameRate;
    __declspec(property(get=GetASFVideoHeight,put=PutASFVideoHeight))
    long ASFVideoHeight;
    __declspec(property(get=GetASFVideoMaxKeyFrameSpacing,put=PutASFVideoMaxKeyFrameSpacing))
    long ASFVideoMaxKeyFrameSpacing;
    __declspec(property(get=GetASFVideoQuality,put=PutASFVideoQuality))
    long ASFVideoQuality;
    __declspec(property(get=GetASFVideoWidth,put=PutASFVideoWidth))
    long ASFVideoWidth;
    __declspec(property(get=GetAspectRatioToUse,put=PutAspectRatioToUse))
    double AspectRatioToUse;
    __declspec(property(get=GetAssociateAudioAndVideoDevices,put=PutAssociateAudioAndVideoDevices))
    VARIANT_BOOL AssociateAudioAndVideoDevices;
    __declspec(property(get=GetAVIDurationUpdated,put=PutAVIDurationUpdated))
    VARIANT_BOOL AVIDurationUpdated;
    __declspec(property(get=GetAudioChannelRenderMode,put=PutAudioChannelRenderMode))
    enum TxAudioChannelRenderMode AudioChannelRenderMode;
    __declspec(property(get=GetAudioCompressor,put=PutAudioCompressor))
    long AudioCompressor;
    __declspec(property(get=GetAudioDevice,put=PutAudioDevice))
    long AudioDevice;
    __declspec(property(get=GetAudioDeviceRendering,put=PutAudioDeviceRendering))
    VARIANT_BOOL AudioDeviceRendering;
    __declspec(property(get=GetAudioFormat,put=PutAudioFormat))
    enum TxAudioFormat AudioFormat;
    __declspec(property(get=GetAudioInput,put=PutAudioInput))
    long AudioInput;
    __declspec(property(get=GetAudioPeakEvent,put=PutAudioPeakEvent))
    VARIANT_BOOL AudioPeakEvent;
    __declspec(property(get=GetAudioRecording,put=PutAudioRecording))
    VARIANT_BOOL AudioRecording;
    __declspec(property(get=GetAudioRenderer,put=PutAudioRenderer))
    long AudioRenderer;
    __declspec(property(get=GetAudioStreamNumber,put=PutAudioStreamNumber))
    long AudioStreamNumber;
    __declspec(property(get=GetAudioSyncAdjustmentEnabled,put=PutAudioSyncAdjustmentEnabled))
    VARIANT_BOOL AudioSyncAdjustmentEnabled;
    __declspec(property(get=GetAudioSyncAdjustment,put=PutAudioSyncAdjustment))
    long AudioSyncAdjustment;
    __declspec(property(get=GetAudioSource,put=PutAudioSource))
    enum TxAudioSource AudioSource;
    __declspec(property(get=GetAutoConnectRelatedPins,put=PutAutoConnectRelatedPins))
    VARIANT_BOOL AutoConnectRelatedPins;
    __declspec(property(get=GetAutoFileName,put=PutAutoFileName))
    enum TxAutoFileName AutoFileName;
    __declspec(property(get=GetAutoFileNameMinDigits,put=PutAutoFileNameMinDigits))
    long AutoFileNameMinDigits;
    __declspec(property(get=GetAutoFilePrefix,put=PutAutoFilePrefix))
    _bstr_t AutoFilePrefix;
    __declspec(property(get=GetAutoRefreshPreview,put=PutAutoRefreshPreview))
    VARIANT_BOOL AutoRefreshPreview;
    __declspec(property(get=GetAutoStartPlayer,put=PutAutoStartPlayer))
    VARIANT_BOOL AutoStartPlayer;
    __declspec(property(get=GetAVIFormatOpenDML,put=PutAVIFormatOpenDML))
    VARIANT_BOOL AVIFormatOpenDML;
    __declspec(property(get=GetAVIFormatOpenDMLCompatibilityIndex,put=PutAVIFormatOpenDMLCompatibilityIndex))
    VARIANT_BOOL AVIFormatOpenDMLCompatibilityIndex;
    __declspec(property(get=GetBackgroundColor,put=PutBackgroundColor))
    OLE_COLOR BackgroundColor;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    enum TxBorderStyle BorderStyle;
    __declspec(property(get=GetBurstCount,put=PutBurstCount))
    long BurstCount;
    __declspec(property(get=GetBurstInterval,put=PutBurstInterval))
    long BurstInterval;
    __declspec(property(get=GetBurstMode,put=PutBurstMode))
    VARIANT_BOOL BurstMode;
    __declspec(property(get=GetBurstType,put=PutBurstType))
    enum TxFrameCaptureDest BurstType;
    __declspec(property(get=GetCameraControlSettings,put=PutCameraControlSettings))
    VARIANT_BOOL CameraControlSettings;
    __declspec(property(get=GetCaptureFileExt,put=PutCaptureFileExt))
    _bstr_t CaptureFileExt;
    __declspec(property(get=GetColorKey,put=PutColorKey))
    OLE_COLOR ColorKey;
    __declspec(property(get=GetColorKeyEnabled,put=PutColorKeyEnabled))
    VARIANT_BOOL ColorKeyEnabled;
    __declspec(property(get=GetCompressionMode,put=PutCompressionMode))
    enum TxCompressionMode CompressionMode;
    __declspec(property(get=GetCompressionType,put=PutCompressionType))
    enum TxCompressionType CompressionType;
    __declspec(property(get=GetDisplay_Active,put=PutDisplay_Active))
    VARIANT_BOOL Display_Active;
    __declspec(property(get=GetDisplay_AlphaBlendEnabled,put=PutDisplay_AlphaBlendEnabled))
    VARIANT_BOOL Display_AlphaBlendEnabled;
    __declspec(property(get=GetDisplay_AlphaBlendValue,put=PutDisplay_AlphaBlendValue))
    long Display_AlphaBlendValue;
    __declspec(property(get=GetDisplay_AutoSize,put=PutDisplay_AutoSize))
    VARIANT_BOOL Display_AutoSize;
    __declspec(property(get=GetDisplay_AspectRatio,put=PutDisplay_AspectRatio))
    enum TxAspectRatio Display_AspectRatio;
    __declspec(property(get=GetDisplay_Embedded,put=PutDisplay_Embedded))
    VARIANT_BOOL Display_Embedded;
    __declspec(property(get=GetDisplay_FullScreen,put=PutDisplay_FullScreen))
    VARIANT_BOOL Display_FullScreen;
    __declspec(property(get=GetDisplay_Height,put=PutDisplay_Height))
    long Display_Height;
    __declspec(property(get=GetDisplay_Left,put=PutDisplay_Left))
    long Display_Left;
    __declspec(property(get=GetDisplay_Monitor,put=PutDisplay_Monitor))
    long Display_Monitor;
    __declspec(property(get=GetDisplay_MouseMovesWindow,put=PutDisplay_MouseMovesWindow))
    VARIANT_BOOL Display_MouseMovesWindow;
    __declspec(property(get=GetDisplay_PanScanRatio,put=PutDisplay_PanScanRatio))
    long Display_PanScanRatio;
    __declspec(property(get=GetDisplay_StayOnTop,put=PutDisplay_StayOnTop))
    VARIANT_BOOL Display_StayOnTop;
    __declspec(property(get=GetDisplay_Top,put=PutDisplay_Top))
    long Display_Top;
    __declspec(property(get=GetDisplay_TransparentColorEnabled,put=PutDisplay_TransparentColorEnabled))
    VARIANT_BOOL Display_TransparentColorEnabled;
    __declspec(property(get=GetDisplay_TransparentColorValue,put=PutDisplay_TransparentColorValue))
    long Display_TransparentColorValue;
    __declspec(property(get=GetDisplay_VideoPortEnabled,put=PutDisplay_VideoPortEnabled))
    VARIANT_BOOL Display_VideoPortEnabled;
    __declspec(property(get=GetDisplay_Visible,put=PutDisplay_Visible))
    VARIANT_BOOL Display_Visible;
    __declspec(property(get=GetDisplay_Width,put=PutDisplay_Width))
    long Display_Width;
    __declspec(property(get=GetDoubleBuffered,put=PutDoubleBuffered))
    VARIANT_BOOL DoubleBuffered;
    __declspec(property(get=GetDroppedFramesPollingInterval,put=PutDroppedFramesPollingInterval))
    long DroppedFramesPollingInterval;
    __declspec(property(get=GetDualDisplay_Active,put=PutDualDisplay_Active))
    VARIANT_BOOL DualDisplay_Active;
    __declspec(property(get=GetDualDisplay_AlphaBlendEnabled,put=PutDualDisplay_AlphaBlendEnabled))
    VARIANT_BOOL DualDisplay_AlphaBlendEnabled;
    __declspec(property(get=GetDualDisplay_AlphaBlendValue,put=PutDualDisplay_AlphaBlendValue))
    long DualDisplay_AlphaBlendValue;
    __declspec(property(get=GetDualDisplay_TransparentColorEnabled,put=PutDualDisplay_TransparentColorEnabled))
    VARIANT_BOOL DualDisplay_TransparentColorEnabled;
    __declspec(property(get=GetDualDisplay_TransparentColorValue,put=PutDualDisplay_TransparentColorValue))
    long DualDisplay_TransparentColorValue;
    __declspec(property(get=GetDualDisplay_AutoSize,put=PutDualDisplay_AutoSize))
    VARIANT_BOOL DualDisplay_AutoSize;
    __declspec(property(get=GetDualDisplay_AspectRatio,put=PutDualDisplay_AspectRatio))
    enum TxAspectRatio DualDisplay_AspectRatio;
    __declspec(property(get=GetDualDisplay_Embedded,put=PutDualDisplay_Embedded))
    VARIANT_BOOL DualDisplay_Embedded;
    __declspec(property(get=GetDualDisplay_FullScreen,put=PutDualDisplay_FullScreen))
    VARIANT_BOOL DualDisplay_FullScreen;
    __declspec(property(get=GetDualDisplay_Height,put=PutDualDisplay_Height))
    long DualDisplay_Height;
    __declspec(property(get=GetDualDisplay_Left,put=PutDualDisplay_Left))
    long DualDisplay_Left;
    __declspec(property(get=GetDualDisplay_Monitor,put=PutDualDisplay_Monitor))
    long DualDisplay_Monitor;
    __declspec(property(get=GetDualDisplay_MouseMovesWindow,put=PutDualDisplay_MouseMovesWindow))
    VARIANT_BOOL DualDisplay_MouseMovesWindow;
    __declspec(property(get=GetDualDisplay_PanScanRatio,put=PutDualDisplay_PanScanRatio))
    long DualDisplay_PanScanRatio;
    __declspec(property(get=GetDualDisplay_StayOnTop,put=PutDualDisplay_StayOnTop))
    VARIANT_BOOL DualDisplay_StayOnTop;
    __declspec(property(get=GetDualDisplay_Top,put=PutDualDisplay_Top))
    long DualDisplay_Top;
    __declspec(property(get=GetDualDisplay_VideoPortEnabled,put=PutDualDisplay_VideoPortEnabled))
    VARIANT_BOOL DualDisplay_VideoPortEnabled;
    __declspec(property(get=GetDualDisplay_Visible,put=PutDualDisplay_Visible))
    VARIANT_BOOL DualDisplay_Visible;
    __declspec(property(get=GetDualDisplay_Width,put=PutDualDisplay_Width))
    long DualDisplay_Width;
    __declspec(property(get=GetDVDateTimeEnabled,put=PutDVDateTimeEnabled))
    VARIANT_BOOL DVDateTimeEnabled;
    __declspec(property(get=GetDVDTitle,put=PutDVDTitle))
    long DVDTitle;
    __declspec(property(get=GetDVDiscontinuityMinimumInterval,put=PutDVDiscontinuityMinimumInterval))
    long DVDiscontinuityMinimumInterval;
    __declspec(property(get=GetDVEncoder_VideoFormat,put=PutDVEncoder_VideoFormat))
    enum TxDVVideoFormat DVEncoder_VideoFormat;
    __declspec(property(get=GetDVEncoder_VideoResolution,put=PutDVEncoder_VideoResolution))
    enum TxDVSize DVEncoder_VideoResolution;
    __declspec(property(get=GetDVEncoder_VideoStandard,put=PutDVEncoder_VideoStandard))
    enum TxDVVideoStandard DVEncoder_VideoStandard;
    __declspec(property(get=GetDVRgb219,put=PutDVRgb219))
    VARIANT_BOOL DVRgb219;
    __declspec(property(get=GetDVReduceFrameRate,put=PutDVReduceFrameRate))
    VARIANT_BOOL DVReduceFrameRate;
    __declspec(property(get=GetDVRecordingInNativeFormatSeparatesStreams,put=PutDVRecordingInNativeFormatSeparatesStreams))
    VARIANT_BOOL DVRecordingInNativeFormatSeparatesStreams;
    __declspec(property(get=GetDVTimeCodeEnabled,put=PutDVTimeCodeEnabled))
    VARIANT_BOOL DVTimeCodeEnabled;
    __declspec(property(get=GetEventNotificationSynchrone,put=PutEventNotificationSynchrone))
    VARIANT_BOOL EventNotificationSynchrone;
    __declspec(property(get=GetCropping_Enabled,put=PutCropping_Enabled))
    VARIANT_BOOL Cropping_Enabled;
    __declspec(property(get=GetCropping_Height,put=PutCropping_Height))
    long Cropping_Height;
    __declspec(property(get=GetCropping_Outbounds,put=PutCropping_Outbounds))
    VARIANT_BOOL Cropping_Outbounds;
    __declspec(property(get=GetCropping_Width,put=PutCropping_Width))
    long Cropping_Width;
    __declspec(property(get=GetCropping_X,put=PutCropping_X))
    long Cropping_X;
    __declspec(property(get=GetCropping_Y,put=PutCropping_Y))
    long Cropping_Y;
    __declspec(property(get=GetCropping_Zoom,put=PutCropping_Zoom))
    double Cropping_Zoom;
    __declspec(property(get=GetFixFlickerOrBlackCapture,put=PutFixFlickerOrBlackCapture))
    VARIANT_BOOL FixFlickerOrBlackCapture;
    __declspec(property(get=GetFrameCaptureWithoutOverlay,put=PutFrameCaptureWithoutOverlay))
    VARIANT_BOOL FrameCaptureWithoutOverlay;
    __declspec(property(get=GetFrameCaptureHeight,put=PutFrameCaptureHeight))
    long FrameCaptureHeight;
    __declspec(property(get=GetFrameCaptureWidth,put=PutFrameCaptureWidth))
    long FrameCaptureWidth;
    __declspec(property(get=GetFrameCaptureZoomSize,put=PutFrameCaptureZoomSize))
    long FrameCaptureZoomSize;
    __declspec(property(get=GetFrameGrabber,put=PutFrameGrabber))
    enum TxFrameGrabber FrameGrabber;
    __declspec(property(get=GetFrameGrabberRGBFormat,put=PutFrameGrabberRGBFormat))
    enum TxFrameGrabberRGBFormat FrameGrabberRGBFormat;
    __declspec(property(get=GetFrameNumberStartsFromZero,put=PutFrameNumberStartsFromZero))
    VARIANT_BOOL FrameNumberStartsFromZero;
    __declspec(property(get=GetFrameRate,put=PutFrameRate))
    double FrameRate;
    __declspec(property(get=GetImageOverlay_AlphaBlend,put=PutImageOverlay_AlphaBlend))
    VARIANT_BOOL ImageOverlay_AlphaBlend;
    __declspec(property(get=GetImageOverlay_AlphaBlendValue,put=PutImageOverlay_AlphaBlendValue))
    long ImageOverlay_AlphaBlendValue;
    __declspec(property(get=GetImageOverlay_ChromaKey,put=PutImageOverlay_ChromaKey))
    VARIANT_BOOL ImageOverlay_ChromaKey;
    __declspec(property(get=GetImageOverlay_ChromaKeyLeewayPercent,put=PutImageOverlay_ChromaKeyLeewayPercent))
    long ImageOverlay_ChromaKeyLeewayPercent;
    __declspec(property(get=GetImageOverlay_ChromaKeyRGBColor,put=PutImageOverlay_ChromaKeyRGBColor))
    long ImageOverlay_ChromaKeyRGBColor;
    __declspec(property(get=GetImageOverlay_Height,put=PutImageOverlay_Height))
    long ImageOverlay_Height;
    __declspec(property(get=GetImageOverlay_LeftLocation,put=PutImageOverlay_LeftLocation))
    long ImageOverlay_LeftLocation;
    __declspec(property(get=GetImageOverlay_RotationAngle,put=PutImageOverlay_RotationAngle))
    double ImageOverlay_RotationAngle;
    __declspec(property(get=GetImageOverlay_StretchToVideoSize,put=PutImageOverlay_StretchToVideoSize))
    VARIANT_BOOL ImageOverlay_StretchToVideoSize;
    __declspec(property(get=GetImageOverlay_TopLocation,put=PutImageOverlay_TopLocation))
    long ImageOverlay_TopLocation;
    __declspec(property(get=GetImageOverlay_Transparent,put=PutImageOverlay_Transparent))
    VARIANT_BOOL ImageOverlay_Transparent;
    __declspec(property(get=GetImageOverlay_TransparentColorValue,put=PutImageOverlay_TransparentColorValue))
    long ImageOverlay_TransparentColorValue;
    __declspec(property(get=GetImageOverlay_UseTransparentColor,put=PutImageOverlay_UseTransparentColor))
    VARIANT_BOOL ImageOverlay_UseTransparentColor;
    __declspec(property(get=GetImageOverlay_Width,put=PutImageOverlay_Width))
    long ImageOverlay_Width;
    __declspec(property(get=GetImageOverlayEnabled,put=PutImageOverlayEnabled))
    VARIANT_BOOL ImageOverlayEnabled;
    __declspec(property(get=GetIPCameraURL,put=PutIPCameraURL))
    _bstr_t IPCameraURL;
    __declspec(property(get=GetJPEGPerformance,put=PutJPEGPerformance))
    enum TxJPEGPerformance JPEGPerformance;
    __declspec(property(get=GetJPEGProgressiveDisplay,put=PutJPEGProgressiveDisplay))
    VARIANT_BOOL JPEGProgressiveDisplay;
    __declspec(property(get=GetJPEGQuality,put=PutJPEGQuality))
    long JPEGQuality;
    __declspec(property(get=GetLicenseString,put=PutLicenseString))
    _bstr_t LicenseString;
    __declspec(property(get=GetLogoDisplayed,put=PutLogoDisplayed))
    VARIANT_BOOL LogoDisplayed;
    __declspec(property(get=GetLogoLayout,put=PutLogoLayout))
    enum TxLogoLayout LogoLayout;
    __declspec(property(get=GetMixAudioSamples_CurrentSourceLevel,put=PutMixAudioSamples_CurrentSourceLevel))
    long MixAudioSamples_CurrentSourceLevel;
    __declspec(property(get=GetMixAudioSamples_ExternalSourceLevel,put=PutMixAudioSamples_ExternalSourceLevel))
    long MixAudioSamples_ExternalSourceLevel;
    __declspec(property(get=GetMixer_MosaicColumns,put=PutMixer_MosaicColumns))
    long Mixer_MosaicColumns;
    __declspec(property(get=GetMixer_MosaicLines,put=PutMixer_MosaicLines))
    long Mixer_MosaicLines;
    __declspec(property(get=GetMotionDetector_CompareBlue,put=PutMotionDetector_CompareBlue))
    VARIANT_BOOL MotionDetector_CompareBlue;
    __declspec(property(get=GetMotionDetector_CompareGreen,put=PutMotionDetector_CompareGreen))
    VARIANT_BOOL MotionDetector_CompareGreen;
    __declspec(property(get=GetMotionDetector_GreyScale,put=PutMotionDetector_GreyScale))
    VARIANT_BOOL MotionDetector_GreyScale;
    __declspec(property(get=GetMotionDetector_CompareRed,put=PutMotionDetector_CompareRed))
    VARIANT_BOOL MotionDetector_CompareRed;
    __declspec(property(get=GetMotionDetector_Enabled,put=PutMotionDetector_Enabled))
    VARIANT_BOOL MotionDetector_Enabled;
    __declspec(property(get=GetMotionDetector_Grid,put=PutMotionDetector_Grid))
    _bstr_t MotionDetector_Grid;
    __declspec(property(get=GetMotionDetector_MaxDetectionsPerSecond,put=PutMotionDetector_MaxDetectionsPerSecond))
    double MotionDetector_MaxDetectionsPerSecond;
    __declspec(property(get=GetMotionDetector_ReduceCPULoad,put=PutMotionDetector_ReduceCPULoad))
    long MotionDetector_ReduceCPULoad;
    __declspec(property(get=GetMotionDetector_ReduceVideoNoise,put=PutMotionDetector_ReduceVideoNoise))
    VARIANT_BOOL MotionDetector_ReduceVideoNoise;
    __declspec(property(get=GetMotionDetector_Triggered,put=PutMotionDetector_Triggered))
    VARIANT_BOOL MotionDetector_Triggered;
    __declspec(property(get=GetMouseWheelEventEnabled,put=PutMouseWheelEventEnabled))
    VARIANT_BOOL MouseWheelEventEnabled;
    __declspec(property(get=GetMultiplexedInputEmulation,put=PutMultiplexedInputEmulation))
    VARIANT_BOOL MultiplexedInputEmulation;
    __declspec(property(get=GetMultiplexedRole,put=PutMultiplexedRole))
    enum TxMultiplexedRole MultiplexedRole;
    __declspec(property(get=GetMultiplexedSwitchDelay,put=PutMultiplexedSwitchDelay))
    long MultiplexedSwitchDelay;
    __declspec(property(get=GetMultiplexedStabilizationDelay,put=PutMultiplexedStabilizationDelay))
    long MultiplexedStabilizationDelay;
    __declspec(property(get=GetMultiplexer,put=PutMultiplexer))
    long Multiplexer;
    __declspec(property(get=GetMuteAudioRendering,put=PutMuteAudioRendering))
    VARIANT_BOOL MuteAudioRendering;
    __declspec(property(get=GetNetworkStreaming,put=PutNetworkStreaming))
    enum TxNetworkStreaming NetworkStreaming;
    __declspec(property(get=GetNetworkStreamingType,put=PutNetworkStreamingType))
    enum TxNetworkStreamingType NetworkStreamingType;
    __declspec(property(get=GetNotificationMethod,put=PutNotificationMethod))
    enum TxNotificationMethod NotificationMethod;
    __declspec(property(get=GetNotificationSleepTime,put=PutNotificationSleepTime))
    long NotificationSleepTime;
    __declspec(property(get=GetNotificationPriority,put=PutNotificationPriority))
    enum TxThreadPriority NotificationPriority;
    __declspec(property(get=GetOverlayAfterTransform,put=PutOverlayAfterTransform))
    VARIANT_BOOL OverlayAfterTransform;
    __declspec(property(get=GetOverlayEventCallbackAllowed,put=PutOverlayEventCallbackAllowed))
    VARIANT_BOOL OverlayEventCallbackAllowed;
    __declspec(property(get=GetPlayerAudioRendering,put=PutPlayerAudioRendering))
    VARIANT_BOOL PlayerAudioRendering;
    __declspec(property(get=GetPlayerDVSize,put=PutPlayerDVSize))
    enum TxDVSize PlayerDVSize;
    __declspec(property(get=GetPlayerFastSeekSpeedRatio,put=PutPlayerFastSeekSpeedRatio))
    long PlayerFastSeekSpeedRatio;
    __declspec(property(get=GetPlayerFileName,put=PutPlayerFileName))
    _bstr_t PlayerFileName;
    __declspec(property(get=GetPlayerForcedCodec,put=PutPlayerForcedCodec))
    _bstr_t PlayerForcedCodec;
    __declspec(property(get=GetPlayerRefreshPausedDisplay,put=PutPlayerRefreshPausedDisplay))
    VARIANT_BOOL PlayerRefreshPausedDisplay;
    __declspec(property(get=GetPlayerRefreshPausedDisplayFrameRate,put=PutPlayerRefreshPausedDisplayFrameRate))
    double PlayerRefreshPausedDisplayFrameRate;
    __declspec(property(get=GetPlayerSpeedRatio,put=PutPlayerSpeedRatio))
    double PlayerSpeedRatio;
    __declspec(property(get=GetPlayerTrackBarSynchrone,put=PutPlayerTrackBarSynchrone))
    VARIANT_BOOL PlayerTrackBarSynchrone;
    __declspec(property(get=GetPreallocCapFileCopiedAfterRecording,put=PutPreallocCapFileCopiedAfterRecording))
    VARIANT_BOOL PreallocCapFileCopiedAfterRecording;
    __declspec(property(get=GetPreallocCapFileEnabled,put=PutPreallocCapFileEnabled))
    VARIANT_BOOL PreallocCapFileEnabled;
    __declspec(property(get=GetPreallocCapFileName,put=PutPreallocCapFileName))
    _bstr_t PreallocCapFileName;
    __declspec(property(get=GetPreallocCapFileSizeInMB,put=PutPreallocCapFileSizeInMB))
    long PreallocCapFileSizeInMB;
    __declspec(property(get=GetPreviewZoomSize,put=PutPreviewZoomSize))
    long PreviewZoomSize;
    __declspec(property(get=GetRecordingAudioBitRate,put=PutRecordingAudioBitRate))
    long RecordingAudioBitRate;
    __declspec(property(get=GetRecordingVideoBitRate,put=PutRecordingVideoBitRate))
    long RecordingVideoBitRate;
    __declspec(property(get=GetRecordingFileName,put=PutRecordingFileName))
    _bstr_t RecordingFileName;
    __declspec(property(get=GetRecordingInNativeFormat,put=PutRecordingInNativeFormat))
    VARIANT_BOOL RecordingInNativeFormat;
    __declspec(property(get=GetRecordingMethod,put=PutRecordingMethod))
    enum TxRecordingMethod RecordingMethod;
    __declspec(property(get=GetRecordingPauseCreatesNewFile,put=PutRecordingPauseCreatesNewFile))
    VARIANT_BOOL RecordingPauseCreatesNewFile;
    __declspec(property(get=GetRecordingOnMotion_Enabled,put=PutRecordingOnMotion_Enabled))
    VARIANT_BOOL RecordingOnMotion_Enabled;
    __declspec(property(get=GetRecordingOnMotion_MotionThreshold,put=PutRecordingOnMotion_MotionThreshold))
    double RecordingOnMotion_MotionThreshold;
    __declspec(property(get=GetRecordingTimer,put=PutRecordingTimer))
    enum TxRecordingTimer RecordingTimer;
    __declspec(property(get=GetRecordingTimerInterval,put=PutRecordingTimerInterval))
    long RecordingTimerInterval;
    __declspec(property(get=GetRecordingOnMotion_NoMotionPauseDelayMs,put=PutRecordingOnMotion_NoMotionPauseDelayMs))
    long RecordingOnMotion_NoMotionPauseDelayMs;
    __declspec(property(get=GetReencoding_NewVideoClip,put=PutReencoding_NewVideoClip))
    _bstr_t Reencoding_NewVideoClip;
    __declspec(property(get=GetReencoding_SourceVideoClip,put=PutReencoding_SourceVideoClip))
    _bstr_t Reencoding_SourceVideoClip;
    __declspec(property(get=GetReencoding_StartTime,put=PutReencoding_StartTime))
    double Reencoding_StartTime;
    __declspec(property(get=GetReencoding_StartFrame,put=PutReencoding_StartFrame))
    double Reencoding_StartFrame;
    __declspec(property(get=GetReencoding_StopTime,put=PutReencoding_StopTime))
    double Reencoding_StopTime;
    __declspec(property(get=GetReencoding_StopFrame,put=PutReencoding_StopFrame))
    double Reencoding_StopFrame;
    __declspec(property(get=GetReencoding_IncludeAudioStream,put=PutReencoding_IncludeAudioStream))
    VARIANT_BOOL Reencoding_IncludeAudioStream;
    __declspec(property(get=GetReencoding_IncludeVideoStream,put=PutReencoding_IncludeVideoStream))
    VARIANT_BOOL Reencoding_IncludeVideoStream;
    __declspec(property(get=GetReencoding_Method,put=PutReencoding_Method))
    enum TxRecordingMethod Reencoding_Method;
    __declspec(property(get=GetReencoding_UseAudioCompressor,put=PutReencoding_UseAudioCompressor))
    VARIANT_BOOL Reencoding_UseAudioCompressor;
    __declspec(property(get=GetReencoding_UseFrameGrabber,put=PutReencoding_UseFrameGrabber))
    VARIANT_BOOL Reencoding_UseFrameGrabber;
    __declspec(property(get=GetReencoding_UseVideoCompressor,put=PutReencoding_UseVideoCompressor))
    VARIANT_BOOL Reencoding_UseVideoCompressor;
    __declspec(property(get=GetReencoding_WMVOutput,put=PutReencoding_WMVOutput))
    VARIANT_BOOL Reencoding_WMVOutput;
    __declspec(property(get=GetRawSampleCaptureLocation,put=PutRawSampleCaptureLocation))
    enum TxRawSampleCaptureLocation RawSampleCaptureLocation;
    __declspec(property(get=GetRawVideoSampleCapture,put=PutRawVideoSampleCapture))
    VARIANT_BOOL RawVideoSampleCapture;
    __declspec(property(get=GetRawAudioSampleCapture,put=PutRawAudioSampleCapture))
    VARIANT_BOOL RawAudioSampleCapture;
    __declspec(property(get=GetRawCaptureAsyncEvent,put=PutRawCaptureAsyncEvent))
    VARIANT_BOOL RawCaptureAsyncEvent;
    __declspec(property(get=GetRecordingSize,put=PutRecordingSize))
    enum TxRecordingSize RecordingSize;
    __declspec(property(get=GetScreenRecordingMonitor,put=PutScreenRecordingMonitor))
    long ScreenRecordingMonitor;
    __declspec(property(get=GetScreenRecordingNonVisibleWindows,put=PutScreenRecordingNonVisibleWindows))
    VARIANT_BOOL ScreenRecordingNonVisibleWindows;
    __declspec(property(get=GetScreenRecordingThroughClipboard,put=PutScreenRecordingThroughClipboard))
    VARIANT_BOOL ScreenRecordingThroughClipboard;
    __declspec(property(get=GetScreenRecordingWithCursor,put=PutScreenRecordingWithCursor))
    VARIANT_BOOL ScreenRecordingWithCursor;
    __declspec(property(get=GetShapeOverlayEnabled,put=PutShapeOverlayEnabled))
    VARIANT_BOOL ShapeOverlayEnabled;
    __declspec(property(get=GetSpeakerControl,put=PutSpeakerControl))
    VARIANT_BOOL SpeakerControl;
    __declspec(property(get=GetStoragePath,put=PutStoragePath))
    _bstr_t StoragePath;
    __declspec(property(get=GetStoreDeviceSettingsInRegistry,put=PutStoreDeviceSettingsInRegistry))
    VARIANT_BOOL StoreDeviceSettingsInRegistry;
    __declspec(property(get=GetSynchronizationRole,put=PutSynchronizationRole))
    enum TxSynchronizationRole SynchronizationRole;
    __declspec(property(get=GetSynchronized,put=PutSynchronized))
    VARIANT_BOOL Synchronized;
    __declspec(property(get=GetSyncCommands,put=PutSyncCommands))
    VARIANT_BOOL SyncCommands;
    __declspec(property(get=GetSyncPreview,put=PutSyncPreview))
    enum TxSyncPreview SyncPreview;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetTextOverlay_Enabled,put=PutTextOverlay_Enabled))
    VARIANT_BOOL TextOverlay_Enabled;
    __declspec(property(get=GetTextOverlay_Left,put=PutTextOverlay_Left))
    long TextOverlay_Left;
    __declspec(property(get=GetTextOverlay_Top,put=PutTextOverlay_Top))
    long TextOverlay_Top;
    __declspec(property(get=GetTextOverlay_Right,put=PutTextOverlay_Right))
    long TextOverlay_Right;
    __declspec(property(get=GetTextOverlay_ScrollingSpeed,put=PutTextOverlay_ScrollingSpeed))
    long TextOverlay_ScrollingSpeed;
    __declspec(property(get=GetTextOverlay_Shadow,put=PutTextOverlay_Shadow))
    VARIANT_BOOL TextOverlay_Shadow;
    __declspec(property(get=GetTextOverlay_ShadowColor,put=PutTextOverlay_ShadowColor))
    OLE_COLOR TextOverlay_ShadowColor;
    __declspec(property(get=GetTextOverlay_ShadowDirection,put=PutTextOverlay_ShadowDirection))
    enum TxCardinalDirection TextOverlay_ShadowDirection;
    __declspec(property(get=GetTextOverlay_BkColor,put=PutTextOverlay_BkColor))
    OLE_COLOR TextOverlay_BkColor;
    __declspec(property(get=GetTextOverlay_Align,put=PutTextOverlay_Align))
    enum TxTextOverlayAlign TextOverlay_Align;
    __declspec(property(get=GetTextOverlay_FontColor,put=PutTextOverlay_FontColor))
    OLE_COLOR TextOverlay_FontColor;
    __declspec(property(get=GetTextOverlay_String,put=PutTextOverlay_String))
    _bstr_t TextOverlay_String;
    __declspec(property(get=GetTextOverlay_Transparent,put=PutTextOverlay_Transparent))
    VARIANT_BOOL TextOverlay_Transparent;
    __declspec(property(get=GetThirdPartyDeinterlacer,put=PutThirdPartyDeinterlacer))
    _bstr_t ThirdPartyDeinterlacer;
    __declspec(property(get=GetTranslateMouseCoordinates,put=PutTranslateMouseCoordinates))
    VARIANT_BOOL TranslateMouseCoordinates;
    __declspec(property(get=GetTVUseFrequencyOverrides,put=PutTVUseFrequencyOverrides))
    VARIANT_BOOL TVUseFrequencyOverrides;
    __declspec(property(get=GetTunerFrequency,put=PutTunerFrequency))
    long TunerFrequency;
    __declspec(property(get=GetUseClock,put=PutUseClock))
    VARIANT_BOOL UseClock;
    __declspec(property(get=GetVersion,put=PutVersion))
    _bstr_t Version;
    __declspec(property(get=GetVideoDevice,put=PutVideoDevice))
    long VideoDevice;
    __declspec(property(get=GetVideoCompression_DataRate,put=PutVideoCompression_DataRate))
    long VideoCompression_DataRate;
    __declspec(property(get=GetVideoCompression_KeyFrameRate,put=PutVideoCompression_KeyFrameRate))
    long VideoCompression_KeyFrameRate;
    __declspec(property(get=GetVideoCompression_PFramesPerKeyFrame,put=PutVideoCompression_PFramesPerKeyFrame))
    long VideoCompression_PFramesPerKeyFrame;
    __declspec(property(get=GetVideoCompression_Quality,put=PutVideoCompression_Quality))
    double VideoCompression_Quality;
    __declspec(property(get=GetVideoCompression_WindowSize,put=PutVideoCompression_WindowSize))
    long VideoCompression_WindowSize;
    __declspec(property(get=GetVideoCompressor,put=PutVideoCompressor))
    long VideoCompressor;
    __declspec(property(get=GetVideoControlSettings,put=PutVideoControlSettings))
    VARIANT_BOOL VideoControlSettings;
    __declspec(property(get=GetVideoFormat,put=PutVideoFormat))
    long VideoFormat;
    __declspec(property(get=GetVideoFromImages_BitmapsSortedBy,put=PutVideoFromImages_BitmapsSortedBy))
    enum TxFileSort VideoFromImages_BitmapsSortedBy;
    __declspec(property(get=GetVideoFromImages_RepeatIndefinitely,put=PutVideoFromImages_RepeatIndefinitely))
    VARIANT_BOOL VideoFromImages_RepeatIndefinitely;
    __declspec(property(get=GetVideoFromImages_SourceDirectory,put=PutVideoFromImages_SourceDirectory))
    _bstr_t VideoFromImages_SourceDirectory;
    __declspec(property(get=GetVideoFromImages_TemporaryFile,put=PutVideoFromImages_TemporaryFile))
    _bstr_t VideoFromImages_TemporaryFile;
    __declspec(property(get=GetVideoInput,put=PutVideoInput))
    long VideoInput;
    __declspec(property(get=GetVideoProcessing_Brightness,put=PutVideoProcessing_Brightness))
    long VideoProcessing_Brightness;
    __declspec(property(get=GetVideoProcessing_Contrast,put=PutVideoProcessing_Contrast))
    long VideoProcessing_Contrast;
    __declspec(property(get=GetVideoProcessing_Deinterlacing,put=PutVideoProcessing_Deinterlacing))
    enum TxVideoDeinterlacing VideoProcessing_Deinterlacing;
    __declspec(property(get=GetVideoProcessing_FlipHorizontal,put=PutVideoProcessing_FlipHorizontal))
    VARIANT_BOOL VideoProcessing_FlipHorizontal;
    __declspec(property(get=GetVideoProcessing_FlipVertical,put=PutVideoProcessing_FlipVertical))
    VARIANT_BOOL VideoProcessing_FlipVertical;
    __declspec(property(get=GetVideoProcessing_GrayScale,put=PutVideoProcessing_GrayScale))
    VARIANT_BOOL VideoProcessing_GrayScale;
    __declspec(property(get=GetVideoProcessing_Hue,put=PutVideoProcessing_Hue))
    long VideoProcessing_Hue;
    __declspec(property(get=GetVideoProcessing_InvertColors,put=PutVideoProcessing_InvertColors))
    VARIANT_BOOL VideoProcessing_InvertColors;
    __declspec(property(get=GetVideoProcessing_Pixellization,put=PutVideoProcessing_Pixellization))
    long VideoProcessing_Pixellization;
    __declspec(property(get=GetVideoProcessing_Saturation,put=PutVideoProcessing_Saturation))
    long VideoProcessing_Saturation;
    __declspec(property(get=GetVideoProcessing_Rotation,put=PutVideoProcessing_Rotation))
    enum TxVideoRotation VideoProcessing_Rotation;
    __declspec(property(get=GetVideoProcessing_RotationCustomAngle,put=PutVideoProcessing_RotationCustomAngle))
    double VideoProcessing_RotationCustomAngle;
    __declspec(property(get=GetVideoQualitySettings,put=PutVideoQualitySettings))
    VARIANT_BOOL VideoQualitySettings;
    __declspec(property(get=GetVideoRenderer,put=PutVideoRenderer))
    enum TxVideoRenderer VideoRenderer;
    __declspec(property(get=GetVideoRendererExternal,put=PutVideoRendererExternal))
    enum TxVideoRendererExternal VideoRendererExternal;
    __declspec(property(get=GetVideoRendererExternalIndex,put=PutVideoRendererExternalIndex))
    long VideoRendererExternalIndex;
    __declspec(property(get=GetVideoSize,put=PutVideoSize))
    long VideoSize;
    __declspec(property(get=GetVideoSource,put=PutVideoSource))
    enum TxVideoSource VideoSource;
    __declspec(property(get=GetVideoSource_FileOrURL,put=PutVideoSource_FileOrURL))
    _bstr_t VideoSource_FileOrURL;
    __declspec(property(get=GetVideoSource_FileOrURL_StartTime,put=PutVideoSource_FileOrURL_StartTime))
    double VideoSource_FileOrURL_StartTime;
    __declspec(property(get=GetVideoSource_FileOrURL_StopTime,put=PutVideoSource_FileOrURL_StopTime))
    double VideoSource_FileOrURL_StopTime;
    __declspec(property(get=GetVideoSubtype,put=PutVideoSubtype))
    long VideoSubtype;
    __declspec(property(get=GetVideoVisibleWhenStopped,put=PutVideoVisibleWhenStopped))
    VARIANT_BOOL VideoVisibleWhenStopped;
    __declspec(property(get=GetVirtualVideoStreamControl,put=PutVirtualVideoStreamControl))
    long VirtualVideoStreamControl;
    __declspec(property(get=GetVirtualAudioStreamControl,put=PutVirtualAudioStreamControl))
    long VirtualAudioStreamControl;
    __declspec(property(get=GetVuMeter,put=PutVuMeter))
    enum TxVuMeter VuMeter;
    __declspec(property(get=GetWebcamStillCaptureButton,put=PutWebcamStillCaptureButton))
    enum TxWebcamStillCaptureButton WebcamStillCaptureButton;
    __declspec(property(get=GetZoomCoeff,put=PutZoomCoeff))
    long ZoomCoeff;
    __declspec(property(get=GetZoomXCenter,put=PutZoomXCenter))
    long ZoomXCenter;
    __declspec(property(get=GetZoomYCenter,put=PutZoomYCenter))
    long ZoomYCenter;
    __declspec(property(get=GetParentBackground,put=PutParentBackground))
    VARIANT_BOOL ParentBackground;
    __declspec(property(get=GetAlignDisabled))
    VARIANT_BOOL AlignDisabled;
    __declspec(property(get=GetVisibleDockClientCount))
    long VisibleDockClientCount;

    //
    // Wrapper methods for error-handling
    //

    enum TxCursors GetBusyCursor ( );
    HRESULT SetBusyCursor (
        enum TxCursors Value );
    enum TxCursors GetVideoCursor ( );
    HRESULT SetVideoCursor (
        enum TxCursors Value );
    enum TxCursors GetNormalCursor ( );
    HRESULT SetNormalCursor (
        enum TxCursors Value );
    _bstr_t GetAnalogVideoStandards ( );
    long GetAnalogVideoStandardsCount ( );
    long GetBufferCount ( );
    _bstr_t GetASFProfiles ( );
    long GetASFProfilesCount ( );
    long GetAudioBalance ( );
    _bstr_t GetAudioCompressorName ( );
    long GetAudioInputBalance ( );
    long GetAudioInputLevel ( );
    VARIANT_BOOL GetAudioInputMono ( );
    _bstr_t GetAudioInputs ( );
    long GetAudioInputsCount ( );
    _bstr_t GetAudioDeviceName ( );
    _bstr_t GetAudioFormats ( );
    _bstr_t GetAudioRendererName ( );
    long GetAudioVolume ( );
    VARIANT_BOOL GetBusy ( );
    long GetCropping_YMax ( );
    long GetCropping_XMax ( );
    double GetCurrentFrameRate ( );
    enum TxCurrentState GetCurrentState ( );
    double GetDeliveredFrames ( );
    _bstr_t GetDirectShowFilters ( );
    long GetDirectShowFiltersCount ( );
    long GetDisplay_VideoHeight ( );
    long GetDisplay_VideoWidth ( );
    long GetDroppedFrameCount ( );
    long GetDisplay_VideoWindowHandle ( );
    long GetDualDisplay_VideoWindowHandle ( );
    _bstr_t GetAudioCompressors ( );
    long GetAudioCompressorsCount ( );
    _bstr_t GetAudioDevices ( );
    long GetAudioDevicesCount ( );
    _bstr_t GetAudioRenderers ( );
    long GetAudioRenderersCount ( );
    long GetDualDisplay_VideoHeight ( );
    long GetDualDisplay_VideoWidth ( );
    enum TxFrameGrabberRGBFormat GetFrameGrabberCurrentRGBFormat ( );
    VARIANT_BOOL GetHoldRecording ( );
    long GetImageOverlaySelector ( );
    double GetImageRatio ( );
    VARIANT_BOOL GetInFrameProgressEvent ( );
    VARIANT_BOOL GetIsAnalogVideoDecoderAvailable ( );
    VARIANT_BOOL GetIsAudioCrossbarAvailable ( );
    enum TxTriState GetIsAudioInputBalanceAvailable ( );
    VARIANT_BOOL GetIsCameraControlAvailable ( );
    VARIANT_BOOL GetIsDigitalVideoIn ( );
    VARIANT_BOOL GetIsDVCommandAvailable ( );
    VARIANT_BOOL GetIsHorizontalSyncLocked ( );
    VARIANT_BOOL GetIsMpegStream ( );
    enum TxTriState GetIsPlayerAudioStreamAvailable ( );
    enum TxTriState GetIsPlayerVideoStreamAvailable ( );
    VARIANT_BOOL GetIsRecordingPaused ( );
    VARIANT_BOOL GetTimeCodeReaderAvailable ( );
    VARIANT_BOOL GetIsTVAudioAvailable ( );
    VARIANT_BOOL GetIsTVAutoTuneRunning ( );
    VARIANT_BOOL GetIsTVTunerAvailable ( );
    VARIANT_BOOL GetIsVideoControlAvailable ( );
    VARIANT_BOOL GetIsVideoCrossbarAvailable ( );
    VARIANT_BOOL GetIsVideoQualityAvailable ( );
    VARIANT_BOOL GetIsVideoPortAvailable ( );
    VARIANT_BOOL GetIsVideoInterlaced ( );
    VARIANT_BOOL GetIsWDMVideoDriver ( );
    _bstr_t GetLast_BurstFrameCapture_FileName ( );
    _bstr_t GetLast_CaptureFrameTo_FileName ( );
    _bstr_t GetLast_Recording_FileName ( );
    _bstr_t GetLast_Clip_Played ( );
    double GetMotionDetector_GlobalMotionRatio ( );
    long GetMotionDetector_GridXCount ( );
    long GetMotionDetector_GridYCount ( );
    VARIANT_BOOL GetMotionDetector_IsGridValid ( );
    enum TxMpegStreamType GetMpegStreamType ( );
    _bstr_t GetMultiplexerName ( );
    _bstr_t GetMultiplexers ( );
    long GetMultiplexersCount ( );
    long GetPlaylistIndex ( );
    double GetPlayerDuration ( );
    double GetPlayerFrameCount ( );
    double GetPlayerFramePosition ( );
    double GetPlayerTimePosition ( );
    double GetPlayerFrameRate ( );
    enum TxPlayerState GetPlayerState ( );
    long GetRecordingBacktimedFramesCount ( );
    VARIANT_BOOL GetRecordingCanPause ( );
    double GetRecordingDuration ( );
    _bstr_t GetRecordingFourCC ( );
    long GetRecordingHeight ( );
    long GetRecordingWidth ( );
    double GetReencodingStartFrame ( );
    double GetReencodingStartTime ( );
    double GetReencodingStopFrame ( );
    double GetReencodingStopTime ( );
    long GetSendToDV_DeviceIndex ( );
    long GetSpeakerBalance ( );
    long GetSpeakerVolume ( );
    _bstr_t GetStreamingURL ( );
    _bstr_t GetSystemTempPath ( );
    long GetTextOverlaySelector ( );
    long GetTVChannel ( );
    long GetTVCountryCode ( );
    enum TxTunerInputType GetTVTunerInputType ( );
    enum TxTunerMode GetTunerMode ( );
    long GetUniqueID ( );
    VARIANT_BOOL GetVCRHorizontalLocking ( );
    _bstr_t GetVideoCompressorName ( );
    _bstr_t GetVideoCompressors ( );
    long GetVideoCompressorsCount ( );
    _bstr_t GetVideoDevices ( );
    _bstr_t GetVideoDevicesId ( );
    long GetVideoDevicesCount ( );
    _bstr_t GetVideoFormats ( );
    long GetVideoFormatsCount ( );
    _bstr_t GetVideoInputs ( );
    long GetVideoInputsCount ( );
    _bstr_t GetVideoDeviceName ( );
    _bstr_t GetVideoSizes ( );
    long GetVideoSizesCount ( );
    long GetVideoHeight ( );
    long GetVideoHeight_PreferredAspectRatio ( );
    long GetVideoWidth ( );
    long GetVideoWidth_PreferredAspectRatio ( );
    _bstr_t GetVideoSources ( );
    long GetVideoSourcesCount ( );
    _bstr_t GetVideoSubtypes ( );
    long GetVideoSubtypesCount ( );
    HRESULT SetAudioBalance (
        long Value );
    HRESULT SetAudioInputBalance (
        long Value );
    HRESULT SetAudioInputLevel (
        long Value );
    HRESULT SetAudioInputMono (
        VARIANT_BOOL Value );
    HRESULT SetAudioVolume (
        long Value );
    HRESULT SetBufferCount (
        long Value );
    HRESULT SetHoldRecording (
        VARIANT_BOOL Value );
    HRESULT SetImageOverlaySelector (
        long Value );
    HRESULT SetMpegStreamType (
        enum TxMpegStreamType Value );
    HRESULT SetPlaylistIndex (
        long Value );
    HRESULT SetPlayerDuration (
        double Value );
    HRESULT SetPlayerFramePosition (
        double Value );
    HRESULT SetPlayerTimePosition (
        double Value );
    HRESULT SetRecordingBacktimedFramesCount (
        long Value );
    HRESULT SetRecordingCanPause (
        VARIANT_BOOL Value );
    HRESULT SetReencodingStartFrame (
        double Value );
    HRESULT SetReencodingStartTime (
        double Value );
    HRESULT SetReencodingStopFrame (
        double Value );
    HRESULT SetReencodingStopTime (
        double Value );
    HRESULT SetSendToDV_DeviceIndex (
        long Value );
    HRESULT SetSpeakerBalance (
        long Value );
    HRESULT SetSpeakerVolume (
        long Value );
    HRESULT SetTextOverlaySelector (
        long Value );
    HRESULT SetTVChannel (
        long Value );
    HRESULT SetTVCountryCode (
        long Value );
    HRESULT SetTVTunerInputType (
        enum TxTunerInputType Value );
    HRESULT SetTunerMode (
        enum TxTunerMode Value );
    HRESULT SetVCRHorizontalLocking (
        VARIANT_BOOL Value );
    long GetTextOverlay_Font ( );
    HRESULT SetTextOverlay_Font (
        long Value );
    HRESULT About ( );
    long AnalogVideoStandardIndex (
        _bstr_t param1 );
    _bstr_t ASFStreaming_GetAuthorizationList ( );
    _bstr_t ASFStreaming_GetConnectedClients ( );
    long ASFStreaming_GetConnectedClientsCount ( );
    VARIANT_BOOL ASFStreaming_ResetAuthorizations ( );
    VARIANT_BOOL ASFStreaming_SetAuthorization (
        VARIANT_BOOL Allowed,
        _bstr_t IP,
        _bstr_t Mask );
    VARIANT_BOOL AssociateMultiplexedSlave (
        long InputNumber,
        long SlaveUniqueID );
    long AudioCompressorIndex (
        _bstr_t param1 );
    long AudioDeviceIndex (
        _bstr_t param1 );
    long AudioRendererIndex (
        _bstr_t param1 );
    long AudioInputIndex (
        _bstr_t param1 );
    _bstr_t AVIInfo2 (
        _bstr_t AVIFile,
        enum TxAVIInfoType AVIInfoType );
    _bstr_t AVIHeaderInfo (
        _bstr_t AVIFile,
        enum TxHeaderAttribute HeaderAttribute );
    long CameraControlValue (
        enum TxCameraControl Setting );
    VARIANT_BOOL CameraControlAuto (
        enum TxCameraControl Setting );
    long CameraControlDefault (
        enum TxCameraControl Setting );
    long CameraControlMin (
        enum TxCameraControl Setting );
    long CameraControlMax (
        enum TxCameraControl Setting );
    long CameraControlStep (
        enum TxCameraControl Setting );
    VARIANT_BOOL Cancel ( );
    VARIANT_BOOL CanProcessMessages ( );
    VARIANT_BOOL CaptureFrameTo (
        enum TxFrameCaptureDest Dest,
        _bstr_t FileName );
    VARIANT_BOOL CaptureFrameSyncTo (
        enum TxFrameCaptureDest Dest,
        _bstr_t FileName );
    HRESULT ClearHeaderAttributes ( );
    HRESULT ClosePlayer ( );
    long GetLastFrameAsHBITMAP (
        long BufferIndex,
        VARIANT_BOOL WithOverlays,
        long SrcLeftLocation,
        long SrcTopLocation,
        long SrcWidth,
        long SrcHeight,
        long DestWidth,
        long DestHeight,
        long BitmapColorBitCount );
    VARIANT_BOOL CreatePreallocCapFile ( );
    double DVDInfo (
        _bstr_t DVDRootDirectory,
        enum TxDVDInfoType DVDInfoType,
        long TitleNumber );
    HRESULT Display_SetLocation (
        long WindowLeft,
        long WindowTop,
        long WindowWidth,
        long WindowHeight );
    HRESULT DestroyComponent ( );
    HRESULT DualDisplay_SetLocation (
        long WindowLeft,
        long WindowTop,
        long WindowWidth,
        long WindowHeight );
    VARIANT_BOOL DrawBitmapOverFrame (
        long BitmapHandle,
        VARIANT_BOOL Stretched,
        long LeftLocation,
        long TopLocation,
        long bmWidth,
        long bmHeight,
        VARIANT_BOOL Transparent,
        VARIANT_BOOL UseTransparentColor,
        unsigned long TransparentColorValue,
        VARIANT_BOOL AlphaBlend,
        long AlphaBlendValue,
        VARIANT_BOOL ChromaKey,
        long ChromaKeyRGBColor,
        long ChromaKeyLeewayPercent );
    VARIANT_BOOL EnumerateWindows ( );
    VARIANT_BOOL EnableMultiplexedInput (
        long InputNumber,
        VARIANT_BOOL Enable );
    HRESULT FastForwardPlayer ( );
    long FindIndexInListByName (
        _bstr_t List,
        _bstr_t SearchedString,
        VARIANT_BOOL IsSubString,
        VARIANT_BOOL IgnoreCase );
    _bstr_t GetAudioCodec ( );
    long GetFrameInfo (
        long FrameId,
        enum TxFrameInfoId FrameInfoId );
    _bstr_t GetFrameInfoString (
        enum TxFrameInfoStringId FrameInfoStringId );
    _bstr_t GetItemNameFromList (
        _bstr_t List,
        long ItemIndex );
    long GetMiscDeviceControl (
        enum TxMiscDeviceControl MiscDeviceControl,
        long Index );
    _bstr_t GetLogString (
        enum TxLogType param1 );
    long GetNearestVideoWidth (
        long PreferredVideoWidth,
        long PreferredVideoHeight );
    long GetNearestVideoHeight (
        long PreferredVideoWidth,
        long PreferredVideoHeight );
    long GetPlayerOpenProgressPercent ( );
    _bstr_t GetPlaylist ( );
    VARIANT_BOOL GetTranslatedCoordinates (
        long DisplayIndex,
        long NativeX,
        long NativeY,
        long * TranslatedX,
        long * TranslatedY );
    long GetTVChannelInfo (
        enum TxTVChannelInfo param1 );
    _bstr_t GetVideoCodec ( );
    long GetVideoWidthFromIndex (
        long Index );
    long GetVideoHeightFromIndex (
        long Index );
    HRESULT GetNearestVideoSize (
        long PreferredVideoWidth,
        long PreferredVideoHeight,
        long * NearestVideoWidth,
        long * NearestVideoHeight );
    VARIANT_BOOL GetVMR9ImageAdjustmentBounds (
        VARIANT_BOOL MainDisplay,
        enum TxVMR9ImageAdjustment VMR9ControlSetting,
        long * MinValue,
        long * MaxValue,
        long * StepSize,
        long * DefaultValue,
        long * CurrentValue );
    VARIANT_BOOL GetVideoSizeFromIndex (
        long Index,
        long * _VideoWidth,
        long * _VideoHeight );
    VARIANT_BOOL AVIDuration (
        _bstr_t AVIFile,
        double * Duration,
        double * FrameCount );
    VARIANT_BOOL AVIInfo (
        _bstr_t AVIFile,
        double * Duration,
        double * FrameCount,
        long * _VideoWidth,
        long * _VideoHeight,
        double * VideoFrameRateFps,
        long * AvgBitRate,
        long * AudioChannels,
        long * AudioSamplesPerSec,
        long * AudioBitsPerSample,
        BSTR * VideoCodec,
        BSTR * AudioCodec );
    VARIANT_BOOL GetVideoCompressionSettings (
        long * DataRate,
        long * KeyFrameRate,
        long * PFramesPerKeyFrame,
        long * WindowSize,
        double * Quality,
        VARIANT_BOOL * CanQuality,
        VARIANT_BOOL * CanCrunch,
        VARIANT_BOOL * CanKeyFrame,
        VARIANT_BOOL * CanBFrame,
        VARIANT_BOOL * CanWindow );
    long GetRGBPixelAt (
        long x,
        long y );
    double GetPixelsDistance (
        long x1,
        long y1,
        long x2,
        long y2 );
    long GetVUMeterSetting (
        long ChannelIndex,
        enum TxVUMeterSetting VUMeterSetting );
    enum TxGraphState GraphState ( );
    VARIANT_BOOL IsAudioDeviceConnected (
        long DeviceIndex );
    VARIANT_BOOL IsAudioDeviceASoundCard (
        long DeviceIndex );
    VARIANT_BOOL IsAudioRendererConnected (
        long RendererIndex );
    VARIANT_BOOL IsCameraControlSettingAvailable (
        enum TxCameraControl Setting );
    VARIANT_BOOL IsDialogAvailable (
        enum TxDialog Dialog );
    VARIANT_BOOL IsDirectX8OrHigherInstalled ( );
    VARIANT_BOOL IsPlaylistActive ( );
    VARIANT_BOOL IsVideoQualitySettingAvailable (
        enum TxVideoQuality Setting );
    VARIANT_BOOL IsVideoControlModeAvailable (
        enum TxVideoControl Mode );
    VARIANT_BOOL IsVMR9ImageAdjustmentAvailable (
        VARIANT_BOOL MainDisplay );
    VARIANT_BOOL IsVideoDeviceConnected (
        long DeviceIndex );
    VARIANT_BOOL IsVideoSignalDetected (
        VARIANT_BOOL DetectConnexantBlueScreen,
        VARIANT_BOOL DetectCustomRGB,
        long CustomR,
        long CustomG,
        long CustomB,
        VARIANT_BOOL UseAsMaxValues );
    VARIANT_BOOL IsDVDevice (
        long Index );
    VARIANT_BOOL LoadCompressorSettingsFromDataString (
        VARIANT_BOOL IsVideoCompressor,
        long CompressorIndex,
        _bstr_t DataString );
    VARIANT_BOOL LoadCompressorSettingsFromTextFile (
        VARIANT_BOOL IsVideoCompressor,
        long CompressorIndex,
        _bstr_t FileName );
    HRESULT SetLocation (
        long lLeft,
        long lTop,
        long lWidth,
        long lHeight );
    VARIANT_BOOL MixAudioSamples (
        long pSampleBuffer,
        long SampleBufferSize,
        long SampleDataLength,
        enum TxFormatType SampleFormatType,
        long pFormat,
        double SampleStartTime,
        double SampleStopTime );
    long MonitorsCount ( );
    double MotionDetector_CellMotionRatio (
        long x,
        long y );
    long MotionDetector_CellColorIntensity (
        enum TxRGBSelector RGBSelector,
        long x,
        long y );
    _bstr_t MotionDetector_Get2DTextGrid ( );
    _bstr_t MotionDetector_Get2DTextMotion ( );
    long MotionDetector_GlobalColorIntensity (
        enum TxRGBSelector RGBSelector );
    VARIANT_BOOL MotionDetector_GetCellLocation (
        long x,
        long y,
        long * XLocation,
        long * YLocation );
    VARIANT_BOOL MotionDetector_GetCellSensitivity (
        long x,
        long y,
        long * param3 );
    VARIANT_BOOL MotionDetector_GetCellSize (
        long * XSize,
        long * YSize );
    VARIANT_BOOL MotionDetector_SetCellSensitivity (
        long x,
        long y,
        long param3 );
    HRESULT MotionDetector_SetGridSize (
        long x,
        long y );
    HRESULT MotionDetector_GloballyIncOrDecSensitivity (
        long Value );
    HRESULT MotionDetector_ResetGlobalSensitivity (
        long Value );
    HRESULT MotionDetector_Reset ( );
    HRESULT MotionDetector_ShowGridDialog ( );
    HRESULT MotionDetector_TriggerNow ( );
    VARIANT_BOOL MotionDetector_UseThisReferenceSample (
        long Bitmap_,
        _bstr_t BMPFile,
        _bstr_t JPEGFile );
    long MultiplexerIndex (
        _bstr_t param1 );
    HRESULT NotifyPlayerTrackbarAction (
        enum TxTrackbarAction TrackbarAction );
    VARIANT_BOOL OpenPlayer ( );
    VARIANT_BOOL OpenDVD ( );
    VARIANT_BOOL OpenPlayerAtFramePositions (
        double StartFrame,
        double StopFrame,
        VARIANT_BOOL KeepBounds,
        VARIANT_BOOL CloseAndReopenIfAlreadyOpened );
    VARIANT_BOOL OpenPlayerAtTimePositions (
        double StartTime,
        double StopTime,
        VARIANT_BOOL KeepBounds,
        VARIANT_BOOL CloseAndReopenIfAlreadyOpened );
    VARIANT_BOOL PauseRecording ( );
    HRESULT PausePlayer ( );
    VARIANT_BOOL PlayerFrameStep (
        long FrameCount );
    VARIANT_BOOL Playlist (
        enum TxPlaylist PlaylistAction,
        _bstr_t VideoClip );
    long RecordingKBytesWrittenToDisk ( );
    VARIANT_BOOL ReencodeVideoClip (
        _bstr_t SourceVideoClip,
        _bstr_t NewVideoClip,
        VARIANT_BOOL IncludeVideoStream,
        VARIANT_BOOL IncludeAudioStream,
        VARIANT_BOOL UseFrameGrabber,
        VARIANT_BOOL UseCurrentVideoCompressor,
        VARIANT_BOOL UseCurrentAudioCompressor );
    HRESULT RefreshDevicesAndCompressorsLists ( );
    HRESULT RefreshPlayerOverlays ( );
    VARIANT_BOOL ResetVideoDeviceSettings ( );
    VARIANT_BOOL ResumeRecording ( );
    HRESULT RewindPlayer ( );
    HRESULT RunPlayer ( );
    HRESULT RunPlayerBackwards ( );
    VARIANT_BOOL StartSynchronized ( );
    long VideoCompressorIndex (
        _bstr_t param1 );
    long VideoDeviceIndex (
        _bstr_t param1 );
    long VideoFormatIndex (
        _bstr_t param1 );
    long VideoInputIndex (
        _bstr_t param1 );
    long VideoSizeIndex (
        _bstr_t param1 );
    long VideoSubtypeIndex (
        _bstr_t param1 );
    VARIANT_BOOL SendDVCommand (
        enum TxDVCommand DVCommand );
    VARIANT_BOOL SendIPCameraCommand (
        _bstr_t IPCameraCommand );
    HRESULT SetAuthentication (
        enum TxAuthenticationType AuthenticationType,
        _bstr_t UserName,
        _bstr_t Password );
    long Mixer_AddToMixer (
        long SourceUniqueID,
        long SourceVideoInput,
        long MosaicLine,
        long MosaicColumn,
        long AlternatedGroup,
        long AlternatedTimeIntervalInMs,
        VARIANT_BOOL ReplacePreviouslyAdded,
        VARIANT_BOOL CanEraseBackground );
    long Mixer_SetupPIPFromSource (
        long SourceUniqueID,
        long Source_Left,
        long Source_Top,
        long Source_Width,
        long Source_Height,
        VARIANT_BOOL ActivatePIP,
        long PIP_Left,
        long PIP_Top,
        long PIP_Width,
        long PIP_Height,
        VARIANT_BOOL MoveToTop );
    VARIANT_BOOL Mixer_Activation (
        long Id,
        VARIANT_BOOL Activate );
    VARIANT_BOOL Mixer_RemoveFromMixer (
        long Id );
    long MPEGProgramSetting (
        enum TxMPEGProgramSetting MPEGProgramSetting,
        long param2 );
    _bstr_t SaveCompressorSettingsToDataString (
        VARIANT_BOOL IsVideoCompressor,
        long CompressorIndex );
    VARIANT_BOOL SaveCompressorSettingsToTextFile (
        VARIANT_BOOL IsVideoCompressor,
        long CompressorIndex,
        _bstr_t FileName );
    HRESULT SetAVIMuxConfig (
        enum TxAVIMuxConfig AVIMuxSetting,
        long Value );
    VARIANT_BOOL SetCameraControl (
        enum TxCameraControl Setting,
        VARIANT_BOOL SetAuto,
        VARIANT_BOOL SetDefault,
        long SetValue );
    HRESULT SetFrameCaptureBounds (
        long LeftPosition,
        long TopPosition,
        long RightPosition,
        long BottomPosition );
    HRESULT SetMultiplexerFilterByName (
        _bstr_t Value );
    HRESULT SetTextOverlayCustomVar (
        long TextOverlaySelector,
        long VarIndex,
        _bstr_t VarText );
    VARIANT_BOOL SetVideoCompressionDefaults ( );
    VARIANT_BOOL SetVideoCompressionSettings (
        long DataRate,
        long KeyFrameRate,
        long PFramesPerKeyFrame,
        long WindowSize,
        double Quality );
    VARIANT_BOOL SetVideoControlMode (
        VARIANT_BOOL FlipHorizontal,
        VARIANT_BOOL FlipVertical,
        VARIANT_BOOL ExternalTriggerEnable,
        VARIANT_BOOL Trigger );
    VARIANT_BOOL SetVideoQuality (
        enum TxVideoQuality Setting,
        VARIANT_BOOL SetAuto,
        VARIANT_BOOL SetDefault,
        long SetValue );
    VARIANT_BOOL SetVMR9ImageAdjustmentValue (
        VARIANT_BOOL MainDisplay,
        enum TxVMR9ImageAdjustment VMR9ControlSetting,
        long param3,
        VARIANT_BOOL FixRange );
    VARIANT_BOOL ShowDialog (
        enum TxDialog Dialog );
    VARIANT_BOOL PausePreview ( );
    VARIANT_BOOL ResetPreview ( );
    VARIANT_BOOL ResumePreview ( );
    VARIANT_BOOL RecordToNewFileNow (
        _bstr_t NewRecordingFileName,
        VARIANT_BOOL ResetStreamTime );
    HRESULT RetrieveInitialXYAfterRotation (
        long x,
        long y,
        long * OriginalX,
        long * OriginalY );
    VARIANT_BOOL SendImageToVideoFromBitmaps (
        _bstr_t ImageFilePath,
        long BitmapHandle,
        VARIANT_BOOL CanFreeBitmapHandle,
        VARIANT_BOOL EndOfData );
    HRESULT SetHeaderAttribute (
        enum TxHeaderAttribute HeaderAttribute,
        _bstr_t Value );
    HRESULT SetImageOverlayAttributes (
        long LeftLocation,
        long TopLocation,
        long StretchedWidth,
        long StretchedHeight,
        VARIANT_BOOL Transparent,
        VARIANT_BOOL UseTransparentColor,
        long TransparentColorValue,
        VARIANT_BOOL AlphaBlend,
        long AlphaBlendValue );
    VARIANT_BOOL SetImageOverlayFromImageFile (
        _bstr_t FileName );
    VARIANT_BOOL SetImageOverlayFromBMPFile (
        _bstr_t FileName );
    VARIANT_BOOL SetImageOverlayFromJPEGFile (
        _bstr_t FileName );
    VARIANT_BOOL SetImageOverlayFromHBitmap (
        long Bitmap );
    VARIANT_BOOL SetIPCameraSetting (
        enum TxIPCameraSetting Setting,
        long param2 );
    VARIANT_BOOL SetLogoFromBMPFile (
        _bstr_t FileName );
    VARIANT_BOOL SetLogoFromJPEGFile (
        _bstr_t FileName );
    VARIANT_BOOL SetLogoFromHBitmap (
        long Bitmap );
    VARIANT_BOOL ScreenRecordingUsingCoordinates (
        VARIANT_BOOL FunctionEnabled,
        long scLeft,
        long scTop,
        long scWidth,
        long scHeight );
    VARIANT_BOOL SendCameraCommand (
        long Pan,
        long Tilt,
        VARIANT_BOOL Relative );
    VARIANT_BOOL PutMiscDeviceControl (
        enum TxMiscDeviceControl MiscDeviceControl,
        long Index,
        long param3 );
    VARIANT_BOOL SetWindowRecordingByHandle (
        long Window_Handle );
    VARIANT_BOOL SetWindowRecordingByName (
        _bstr_t WindowName,
        VARIANT_BOOL ExactMatch );
    HRESULT SetVUMeterSetting (
        long ChannelIndex,
        enum TxVUMeterSetting VUMeterSetting,
        long Value );
    VARIANT_BOOL SetWindowTransparency (
        long WndHandle,
        VARIANT_BOOL UseColorKey,
        VARIANT_BOOL UseAlpha,
        long AlphaValue );
    VARIANT_BOOL StartAudioRecording ( );
    VARIANT_BOOL StartAudioRendering ( );
    VARIANT_BOOL StartPreview ( );
    VARIANT_BOOL StartRecording ( );
    VARIANT_BOOL StartReencoding ( );
    VARIANT_BOOL Stop ( );
    HRESULT StopPreview ( );
    HRESULT StopPlayer ( );
    HRESULT StopRecording ( );
    VARIANT_BOOL StopReencoding ( );
    VARIANT_BOOL TextOverlay_CreateCustomFont (
        long fHeight,
        long fWidth,
        long fEscapement,
        long fOrientation,
        long fWeight,
        VARIANT_BOOL fItalic,
        VARIANT_BOOL fUnderline,
        VARIANT_BOOL fStrikeOut,
        long fCharSet,
        long fOutputPrecision,
        long fClipPrecision,
        long fQuality,
        long fPitchAndFamily,
        _bstr_t FontFacename );
    VARIANT_BOOL ThirdPartyFilter_AddToList (
        enum TxThirdPartyFilterList Location,
        _bstr_t GUIDString,
        _bstr_t OptionalDLLFilePath,
        _bstr_t FilterName,
        VARIANT_BOOL Enable,
        VARIANT_BOOL CanSaveFilterState );
    VARIANT_BOOL ThirdPartyFilter_ClearList ( );
    VARIANT_BOOL ThirdPartyFilter_Enable (
        enum TxThirdPartyFilterList Location,
        _bstr_t GUIDString,
        VARIANT_BOOL Enable );
    VARIANT_BOOL ThirdPartyFilter_RemoveFromList (
        enum TxThirdPartyFilterList Location,
        _bstr_t GUIDString );
    VARIANT_BOOL ThirdPartyFilter_ShowDialog (
        enum TxThirdPartyFilterList Location,
        _bstr_t GUIDString );
    VARIANT_BOOL TVGetMinMaxChannels (
        long * MinChannel,
        long * MaxChannel );
    VARIANT_BOOL TVClearFrequencyOverrides ( );
    long TVSetChannelFrequencyOverride (
        long TVChannel,
        long FrequencyInHz );
    VARIANT_BOOL TVStartAutoScan ( );
    VARIANT_BOOL TVStartAutoScanChannels (
        long MinChannel,
        long MaxChannel,
        long Interval_ms );
    VARIANT_BOOL TVStopAutoScan ( );
    HRESULT UseNearestVideoSize (
        long PreferredWidth,
        long PreferredHeight,
        VARIANT_BOOL Stretch );
    VARIANT_BOOL VDECGetHorizontalLocked (
        long * plLocked );
    VARIANT_BOOL VDECGetNumberOfLines (
        long * plNumberOfLines );
    VARIANT_BOOL VDECGetOutputEnable (
        long * plOutputEnable );
    VARIANT_BOOL VDECGetVCRHorizontalLocking (
        long * plVCRHorizontalLocking );
    VARIANT_BOOL VDECPutTVFormat (
        long lAnalogVideoStandard );
    VARIANT_BOOL VDECPutOutputEnable (
        long lOutputEnable );
    VARIANT_BOOL VDECPutVCRHorizontalLocking (
        long lVCRHorizontalLocking );
    VARIANT_BOOL VideoFromImages_CreateSetOfBitmaps ( );
    long VideoQualityValue (
        enum TxVideoQuality Setting );
    VARIANT_BOOL VideoQualityAuto (
        enum TxVideoQuality Setting );
    long VideoQualityDefault (
        enum TxVideoQuality Setting );
    long VideoQualityMin (
        enum TxVideoQuality Setting );
    long VideoQualityMax (
        enum TxVideoQuality Setting );
    long VideoQualityStep (
        enum TxVideoQuality Setting );
    VARIANT_BOOL WriteScriptCommand (
        _bstr_t ScriptType,
        _bstr_t ScriptArgument );
    VARIANT_BOOL MonitorBounds (
        long MonitorNumber,
        long * LeftBound,
        long * TopBound,
        long * RightBound,
        long * BottomBound );
    enum TxAlignment GetAlignment ( );
    void PutAlignment (
        enum TxAlignment Value );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Value );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR Value );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetFullRepaint ( );
    void PutFullRepaint (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetParentColor ( );
    void PutParentColor (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAdjustOverlayAspectRatio ( );
    void PutAdjustOverlayAspectRatio (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAdjustPixelAspectRatio ( );
    void PutAdjustPixelAspectRatio (
        VARIANT_BOOL Value );
    enum TxAero GetAero ( );
    void PutAero (
        enum TxAero Value );
    long GetAnalogVideoStandard ( );
    void PutAnalogVideoStandard (
        long Value );
    enum TxApplicationPriority GetApplicationPriority ( );
    void PutApplicationPriority (
        enum TxApplicationPriority Value );
    long GetASFAudioBitRate ( );
    void PutASFAudioBitRate (
        long Value );
    long GetASFAudioChannels ( );
    void PutASFAudioChannels (
        long Value );
    enum TxASFDeinterlaceMode GetASFDeinterlaceMode ( );
    void PutASFDeinterlaceMode (
        enum TxASFDeinterlaceMode Value );
    VARIANT_BOOL GetASFFixedFrameRate ( );
    void PutASFFixedFrameRate (
        VARIANT_BOOL Value );
    _bstr_t GetASFMediaServerPublishingPoint ( );
    void PutASFMediaServerPublishingPoint (
        _bstr_t Value );
    _bstr_t GetASFMediaServerTemplatePublishingPoint ( );
    void PutASFMediaServerTemplatePublishingPoint (
        _bstr_t Value );
    VARIANT_BOOL GetASFMediaServerRemovePublishingPointAfterDisconnect ( );
    void PutASFMediaServerRemovePublishingPointAfterDisconnect (
        VARIANT_BOOL Value );
    long GetASFNetworkPort ( );
    void PutASFNetworkPort (
        long Value );
    long GetASFNetworkMaxUsers ( );
    void PutASFNetworkMaxUsers (
        long Value );
    long GetASFProfile ( );
    void PutASFProfile (
        long Value );
    _bstr_t GetASFProfileFromCustomFile ( );
    void PutASFProfileFromCustomFile (
        _bstr_t Value );
    enum TxASFProfileVersion GetASFProfileVersion ( );
    void PutASFProfileVersion (
        enum TxASFProfileVersion Value );
    long GetASFVideoBitRate ( );
    void PutASFVideoBitRate (
        long Value );
    double GetASFVideoFrameRate ( );
    void PutASFVideoFrameRate (
        double Value );
    long GetASFVideoHeight ( );
    void PutASFVideoHeight (
        long Value );
    long GetASFVideoMaxKeyFrameSpacing ( );
    void PutASFVideoMaxKeyFrameSpacing (
        long Value );
    long GetASFVideoQuality ( );
    void PutASFVideoQuality (
        long Value );
    long GetASFVideoWidth ( );
    void PutASFVideoWidth (
        long Value );
    double GetAspectRatioToUse ( );
    void PutAspectRatioToUse (
        double Value );
    VARIANT_BOOL GetAssociateAudioAndVideoDevices ( );
    void PutAssociateAudioAndVideoDevices (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAVIDurationUpdated ( );
    void PutAVIDurationUpdated (
        VARIANT_BOOL Value );
    enum TxAudioChannelRenderMode GetAudioChannelRenderMode ( );
    void PutAudioChannelRenderMode (
        enum TxAudioChannelRenderMode Value );
    long GetAudioCompressor ( );
    void PutAudioCompressor (
        long Value );
    long GetAudioDevice ( );
    void PutAudioDevice (
        long Value );
    VARIANT_BOOL GetAudioDeviceRendering ( );
    void PutAudioDeviceRendering (
        VARIANT_BOOL Value );
    enum TxAudioFormat GetAudioFormat ( );
    void PutAudioFormat (
        enum TxAudioFormat Value );
    long GetAudioInput ( );
    void PutAudioInput (
        long Value );
    VARIANT_BOOL GetAudioPeakEvent ( );
    void PutAudioPeakEvent (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAudioRecording ( );
    void PutAudioRecording (
        VARIANT_BOOL Value );
    long GetAudioRenderer ( );
    void PutAudioRenderer (
        long Value );
    long GetAudioStreamNumber ( );
    void PutAudioStreamNumber (
        long Value );
    VARIANT_BOOL GetAudioSyncAdjustmentEnabled ( );
    void PutAudioSyncAdjustmentEnabled (
        VARIANT_BOOL Value );
    long GetAudioSyncAdjustment ( );
    void PutAudioSyncAdjustment (
        long Value );
    enum TxAudioSource GetAudioSource ( );
    void PutAudioSource (
        enum TxAudioSource Value );
    VARIANT_BOOL GetAutoConnectRelatedPins ( );
    void PutAutoConnectRelatedPins (
        VARIANT_BOOL Value );
    enum TxAutoFileName GetAutoFileName ( );
    void PutAutoFileName (
        enum TxAutoFileName Value );
    long GetAutoFileNameMinDigits ( );
    void PutAutoFileNameMinDigits (
        long Value );
    _bstr_t GetAutoFilePrefix ( );
    void PutAutoFilePrefix (
        _bstr_t Value );
    VARIANT_BOOL GetAutoRefreshPreview ( );
    void PutAutoRefreshPreview (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAutoStartPlayer ( );
    void PutAutoStartPlayer (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAVIFormatOpenDML ( );
    void PutAVIFormatOpenDML (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAVIFormatOpenDMLCompatibilityIndex ( );
    void PutAVIFormatOpenDMLCompatibilityIndex (
        VARIANT_BOOL Value );
    OLE_COLOR GetBackgroundColor ( );
    void PutBackgroundColor (
        OLE_COLOR Value );
    enum TxBorderStyle GetBorderStyle ( );
    void PutBorderStyle (
        enum TxBorderStyle Value );
    long GetBurstCount ( );
    void PutBurstCount (
        long Value );
    long GetBurstInterval ( );
    void PutBurstInterval (
        long Value );
    VARIANT_BOOL GetBurstMode ( );
    void PutBurstMode (
        VARIANT_BOOL Value );
    enum TxFrameCaptureDest GetBurstType ( );
    void PutBurstType (
        enum TxFrameCaptureDest Value );
    VARIANT_BOOL GetCameraControlSettings ( );
    void PutCameraControlSettings (
        VARIANT_BOOL Value );
    _bstr_t GetCaptureFileExt ( );
    void PutCaptureFileExt (
        _bstr_t Value );
    OLE_COLOR GetColorKey ( );
    void PutColorKey (
        OLE_COLOR Value );
    VARIANT_BOOL GetColorKeyEnabled ( );
    void PutColorKeyEnabled (
        VARIANT_BOOL Value );
    enum TxCompressionMode GetCompressionMode ( );
    void PutCompressionMode (
        enum TxCompressionMode Value );
    enum TxCompressionType GetCompressionType ( );
    void PutCompressionType (
        enum TxCompressionType Value );
    VARIANT_BOOL GetDisplay_Active ( );
    void PutDisplay_Active (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDisplay_AlphaBlendEnabled ( );
    void PutDisplay_AlphaBlendEnabled (
        VARIANT_BOOL Value );
    long GetDisplay_AlphaBlendValue ( );
    void PutDisplay_AlphaBlendValue (
        long Value );
    VARIANT_BOOL GetDisplay_AutoSize ( );
    void PutDisplay_AutoSize (
        VARIANT_BOOL Value );
    enum TxAspectRatio GetDisplay_AspectRatio ( );
    void PutDisplay_AspectRatio (
        enum TxAspectRatio Value );
    VARIANT_BOOL GetDisplay_Embedded ( );
    void PutDisplay_Embedded (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDisplay_FullScreen ( );
    void PutDisplay_FullScreen (
        VARIANT_BOOL Value );
    long GetDisplay_Height ( );
    void PutDisplay_Height (
        long Value );
    long GetDisplay_Left ( );
    void PutDisplay_Left (
        long Value );
    long GetDisplay_Monitor ( );
    void PutDisplay_Monitor (
        long Value );
    VARIANT_BOOL GetDisplay_MouseMovesWindow ( );
    void PutDisplay_MouseMovesWindow (
        VARIANT_BOOL Value );
    long GetDisplay_PanScanRatio ( );
    void PutDisplay_PanScanRatio (
        long Value );
    VARIANT_BOOL GetDisplay_StayOnTop ( );
    void PutDisplay_StayOnTop (
        VARIANT_BOOL Value );
    long GetDisplay_Top ( );
    void PutDisplay_Top (
        long Value );
    VARIANT_BOOL GetDisplay_TransparentColorEnabled ( );
    void PutDisplay_TransparentColorEnabled (
        VARIANT_BOOL Value );
    long GetDisplay_TransparentColorValue ( );
    void PutDisplay_TransparentColorValue (
        long Value );
    VARIANT_BOOL GetDisplay_VideoPortEnabled ( );
    void PutDisplay_VideoPortEnabled (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDisplay_Visible ( );
    void PutDisplay_Visible (
        VARIANT_BOOL Value );
    long GetDisplay_Width ( );
    void PutDisplay_Width (
        long Value );
    VARIANT_BOOL GetDoubleBuffered ( );
    void PutDoubleBuffered (
        VARIANT_BOOL Value );
    long GetDroppedFramesPollingInterval ( );
    void PutDroppedFramesPollingInterval (
        long Value );
    VARIANT_BOOL GetDualDisplay_Active ( );
    void PutDualDisplay_Active (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDualDisplay_AlphaBlendEnabled ( );
    void PutDualDisplay_AlphaBlendEnabled (
        VARIANT_BOOL Value );
    long GetDualDisplay_AlphaBlendValue ( );
    void PutDualDisplay_AlphaBlendValue (
        long Value );
    VARIANT_BOOL GetDualDisplay_TransparentColorEnabled ( );
    void PutDualDisplay_TransparentColorEnabled (
        VARIANT_BOOL Value );
    long GetDualDisplay_TransparentColorValue ( );
    void PutDualDisplay_TransparentColorValue (
        long Value );
    VARIANT_BOOL GetDualDisplay_AutoSize ( );
    void PutDualDisplay_AutoSize (
        VARIANT_BOOL Value );
    enum TxAspectRatio GetDualDisplay_AspectRatio ( );
    void PutDualDisplay_AspectRatio (
        enum TxAspectRatio Value );
    VARIANT_BOOL GetDualDisplay_Embedded ( );
    void PutDualDisplay_Embedded (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDualDisplay_FullScreen ( );
    void PutDualDisplay_FullScreen (
        VARIANT_BOOL Value );
    long GetDualDisplay_Height ( );
    void PutDualDisplay_Height (
        long Value );
    long GetDualDisplay_Left ( );
    void PutDualDisplay_Left (
        long Value );
    long GetDualDisplay_Monitor ( );
    void PutDualDisplay_Monitor (
        long Value );
    VARIANT_BOOL GetDualDisplay_MouseMovesWindow ( );
    void PutDualDisplay_MouseMovesWindow (
        VARIANT_BOOL Value );
    long GetDualDisplay_PanScanRatio ( );
    void PutDualDisplay_PanScanRatio (
        long Value );
    VARIANT_BOOL GetDualDisplay_StayOnTop ( );
    void PutDualDisplay_StayOnTop (
        VARIANT_BOOL Value );
    long GetDualDisplay_Top ( );
    void PutDualDisplay_Top (
        long Value );
    VARIANT_BOOL GetDualDisplay_VideoPortEnabled ( );
    void PutDualDisplay_VideoPortEnabled (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDualDisplay_Visible ( );
    void PutDualDisplay_Visible (
        VARIANT_BOOL Value );
    long GetDualDisplay_Width ( );
    void PutDualDisplay_Width (
        long Value );
    VARIANT_BOOL GetDVDateTimeEnabled ( );
    void PutDVDateTimeEnabled (
        VARIANT_BOOL Value );
    long GetDVDTitle ( );
    void PutDVDTitle (
        long Value );
    long GetDVDiscontinuityMinimumInterval ( );
    void PutDVDiscontinuityMinimumInterval (
        long Value );
    enum TxDVVideoFormat GetDVEncoder_VideoFormat ( );
    void PutDVEncoder_VideoFormat (
        enum TxDVVideoFormat Value );
    enum TxDVSize GetDVEncoder_VideoResolution ( );
    void PutDVEncoder_VideoResolution (
        enum TxDVSize Value );
    enum TxDVVideoStandard GetDVEncoder_VideoStandard ( );
    void PutDVEncoder_VideoStandard (
        enum TxDVVideoStandard Value );
    VARIANT_BOOL GetDVRgb219 ( );
    void PutDVRgb219 (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDVReduceFrameRate ( );
    void PutDVReduceFrameRate (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDVRecordingInNativeFormatSeparatesStreams ( );
    void PutDVRecordingInNativeFormatSeparatesStreams (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDVTimeCodeEnabled ( );
    void PutDVTimeCodeEnabled (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetEventNotificationSynchrone ( );
    void PutEventNotificationSynchrone (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetCropping_Enabled ( );
    void PutCropping_Enabled (
        VARIANT_BOOL Value );
    long GetCropping_Height ( );
    void PutCropping_Height (
        long Value );
    VARIANT_BOOL GetCropping_Outbounds ( );
    void PutCropping_Outbounds (
        VARIANT_BOOL Value );
    long GetCropping_Width ( );
    void PutCropping_Width (
        long Value );
    long GetCropping_X ( );
    void PutCropping_X (
        long Value );
    long GetCropping_Y ( );
    void PutCropping_Y (
        long Value );
    double GetCropping_Zoom ( );
    void PutCropping_Zoom (
        double Value );
    VARIANT_BOOL GetFixFlickerOrBlackCapture ( );
    void PutFixFlickerOrBlackCapture (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetFrameCaptureWithoutOverlay ( );
    void PutFrameCaptureWithoutOverlay (
        VARIANT_BOOL Value );
    long GetFrameCaptureHeight ( );
    void PutFrameCaptureHeight (
        long Value );
    long GetFrameCaptureWidth ( );
    void PutFrameCaptureWidth (
        long Value );
    long GetFrameCaptureZoomSize ( );
    void PutFrameCaptureZoomSize (
        long Value );
    enum TxFrameGrabber GetFrameGrabber ( );
    void PutFrameGrabber (
        enum TxFrameGrabber Value );
    enum TxFrameGrabberRGBFormat GetFrameGrabberRGBFormat ( );
    void PutFrameGrabberRGBFormat (
        enum TxFrameGrabberRGBFormat Value );
    VARIANT_BOOL GetFrameNumberStartsFromZero ( );
    void PutFrameNumberStartsFromZero (
        VARIANT_BOOL Value );
    double GetFrameRate ( );
    void PutFrameRate (
        double Value );
    VARIANT_BOOL GetImageOverlay_AlphaBlend ( );
    void PutImageOverlay_AlphaBlend (
        VARIANT_BOOL Value );
    long GetImageOverlay_AlphaBlendValue ( );
    void PutImageOverlay_AlphaBlendValue (
        long Value );
    VARIANT_BOOL GetImageOverlay_ChromaKey ( );
    void PutImageOverlay_ChromaKey (
        VARIANT_BOOL Value );
    long GetImageOverlay_ChromaKeyLeewayPercent ( );
    void PutImageOverlay_ChromaKeyLeewayPercent (
        long Value );
    long GetImageOverlay_ChromaKeyRGBColor ( );
    void PutImageOverlay_ChromaKeyRGBColor (
        long Value );
    long GetImageOverlay_Height ( );
    void PutImageOverlay_Height (
        long Value );
    long GetImageOverlay_LeftLocation ( );
    void PutImageOverlay_LeftLocation (
        long Value );
    double GetImageOverlay_RotationAngle ( );
    void PutImageOverlay_RotationAngle (
        double Value );
    VARIANT_BOOL GetImageOverlay_StretchToVideoSize ( );
    void PutImageOverlay_StretchToVideoSize (
        VARIANT_BOOL Value );
    long GetImageOverlay_TopLocation ( );
    void PutImageOverlay_TopLocation (
        long Value );
    VARIANT_BOOL GetImageOverlay_Transparent ( );
    void PutImageOverlay_Transparent (
        VARIANT_BOOL Value );
    long GetImageOverlay_TransparentColorValue ( );
    void PutImageOverlay_TransparentColorValue (
        long Value );
    VARIANT_BOOL GetImageOverlay_UseTransparentColor ( );
    void PutImageOverlay_UseTransparentColor (
        VARIANT_BOOL Value );
    long GetImageOverlay_Width ( );
    void PutImageOverlay_Width (
        long Value );
    VARIANT_BOOL GetImageOverlayEnabled ( );
    void PutImageOverlayEnabled (
        VARIANT_BOOL Value );
    _bstr_t GetIPCameraURL ( );
    void PutIPCameraURL (
        _bstr_t Value );
    enum TxJPEGPerformance GetJPEGPerformance ( );
    void PutJPEGPerformance (
        enum TxJPEGPerformance Value );
    VARIANT_BOOL GetJPEGProgressiveDisplay ( );
    void PutJPEGProgressiveDisplay (
        VARIANT_BOOL Value );
    long GetJPEGQuality ( );
    void PutJPEGQuality (
        long Value );
    _bstr_t GetLicenseString ( );
    void PutLicenseString (
        _bstr_t Value );
    VARIANT_BOOL GetLogoDisplayed ( );
    void PutLogoDisplayed (
        VARIANT_BOOL Value );
    enum TxLogoLayout GetLogoLayout ( );
    void PutLogoLayout (
        enum TxLogoLayout Value );
    long GetMixAudioSamples_CurrentSourceLevel ( );
    void PutMixAudioSamples_CurrentSourceLevel (
        long Value );
    long GetMixAudioSamples_ExternalSourceLevel ( );
    void PutMixAudioSamples_ExternalSourceLevel (
        long Value );
    long GetMixer_MosaicColumns ( );
    void PutMixer_MosaicColumns (
        long Value );
    long GetMixer_MosaicLines ( );
    void PutMixer_MosaicLines (
        long Value );
    VARIANT_BOOL GetMotionDetector_CompareBlue ( );
    void PutMotionDetector_CompareBlue (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMotionDetector_CompareGreen ( );
    void PutMotionDetector_CompareGreen (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMotionDetector_GreyScale ( );
    void PutMotionDetector_GreyScale (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMotionDetector_CompareRed ( );
    void PutMotionDetector_CompareRed (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMotionDetector_Enabled ( );
    void PutMotionDetector_Enabled (
        VARIANT_BOOL Value );
    _bstr_t GetMotionDetector_Grid ( );
    void PutMotionDetector_Grid (
        _bstr_t Value );
    double GetMotionDetector_MaxDetectionsPerSecond ( );
    void PutMotionDetector_MaxDetectionsPerSecond (
        double Value );
    long GetMotionDetector_ReduceCPULoad ( );
    void PutMotionDetector_ReduceCPULoad (
        long Value );
    VARIANT_BOOL GetMotionDetector_ReduceVideoNoise ( );
    void PutMotionDetector_ReduceVideoNoise (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMotionDetector_Triggered ( );
    void PutMotionDetector_Triggered (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMouseWheelEventEnabled ( );
    void PutMouseWheelEventEnabled (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMultiplexedInputEmulation ( );
    void PutMultiplexedInputEmulation (
        VARIANT_BOOL Value );
    enum TxMultiplexedRole GetMultiplexedRole ( );
    void PutMultiplexedRole (
        enum TxMultiplexedRole Value );
    long GetMultiplexedSwitchDelay ( );
    void PutMultiplexedSwitchDelay (
        long Value );
    long GetMultiplexedStabilizationDelay ( );
    void PutMultiplexedStabilizationDelay (
        long Value );
    long GetMultiplexer ( );
    void PutMultiplexer (
        long Value );
    VARIANT_BOOL GetMuteAudioRendering ( );
    void PutMuteAudioRendering (
        VARIANT_BOOL Value );
    enum TxNetworkStreaming GetNetworkStreaming ( );
    void PutNetworkStreaming (
        enum TxNetworkStreaming Value );
    enum TxNetworkStreamingType GetNetworkStreamingType ( );
    void PutNetworkStreamingType (
        enum TxNetworkStreamingType Value );
    enum TxNotificationMethod GetNotificationMethod ( );
    void PutNotificationMethod (
        enum TxNotificationMethod Value );
    long GetNotificationSleepTime ( );
    void PutNotificationSleepTime (
        long Value );
    enum TxThreadPriority GetNotificationPriority ( );
    void PutNotificationPriority (
        enum TxThreadPriority Value );
    VARIANT_BOOL GetOverlayAfterTransform ( );
    void PutOverlayAfterTransform (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetOverlayEventCallbackAllowed ( );
    void PutOverlayEventCallbackAllowed (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPlayerAudioRendering ( );
    void PutPlayerAudioRendering (
        VARIANT_BOOL Value );
    enum TxDVSize GetPlayerDVSize ( );
    void PutPlayerDVSize (
        enum TxDVSize Value );
    long GetPlayerFastSeekSpeedRatio ( );
    void PutPlayerFastSeekSpeedRatio (
        long Value );
    _bstr_t GetPlayerFileName ( );
    void PutPlayerFileName (
        _bstr_t Value );
    _bstr_t GetPlayerForcedCodec ( );
    void PutPlayerForcedCodec (
        _bstr_t Value );
    VARIANT_BOOL GetPlayerRefreshPausedDisplay ( );
    void PutPlayerRefreshPausedDisplay (
        VARIANT_BOOL Value );
    double GetPlayerRefreshPausedDisplayFrameRate ( );
    void PutPlayerRefreshPausedDisplayFrameRate (
        double Value );
    double GetPlayerSpeedRatio ( );
    void PutPlayerSpeedRatio (
        double Value );
    VARIANT_BOOL GetPlayerTrackBarSynchrone ( );
    void PutPlayerTrackBarSynchrone (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPreallocCapFileCopiedAfterRecording ( );
    void PutPreallocCapFileCopiedAfterRecording (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPreallocCapFileEnabled ( );
    void PutPreallocCapFileEnabled (
        VARIANT_BOOL Value );
    _bstr_t GetPreallocCapFileName ( );
    void PutPreallocCapFileName (
        _bstr_t Value );
    long GetPreallocCapFileSizeInMB ( );
    void PutPreallocCapFileSizeInMB (
        long Value );
    long GetPreviewZoomSize ( );
    void PutPreviewZoomSize (
        long Value );
    long GetRecordingAudioBitRate ( );
    void PutRecordingAudioBitRate (
        long Value );
    long GetRecordingVideoBitRate ( );
    void PutRecordingVideoBitRate (
        long Value );
    _bstr_t GetRecordingFileName ( );
    void PutRecordingFileName (
        _bstr_t Value );
    VARIANT_BOOL GetRecordingInNativeFormat ( );
    void PutRecordingInNativeFormat (
        VARIANT_BOOL Value );
    enum TxRecordingMethod GetRecordingMethod ( );
    void PutRecordingMethod (
        enum TxRecordingMethod Value );
    VARIANT_BOOL GetRecordingPauseCreatesNewFile ( );
    void PutRecordingPauseCreatesNewFile (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetRecordingOnMotion_Enabled ( );
    void PutRecordingOnMotion_Enabled (
        VARIANT_BOOL Value );
    double GetRecordingOnMotion_MotionThreshold ( );
    void PutRecordingOnMotion_MotionThreshold (
        double Value );
    enum TxRecordingTimer GetRecordingTimer ( );
    void PutRecordingTimer (
        enum TxRecordingTimer Value );
    long GetRecordingTimerInterval ( );
    void PutRecordingTimerInterval (
        long Value );
    long GetRecordingOnMotion_NoMotionPauseDelayMs ( );
    void PutRecordingOnMotion_NoMotionPauseDelayMs (
        long Value );
    _bstr_t GetReencoding_NewVideoClip ( );
    void PutReencoding_NewVideoClip (
        _bstr_t Value );
    _bstr_t GetReencoding_SourceVideoClip ( );
    void PutReencoding_SourceVideoClip (
        _bstr_t Value );
    double GetReencoding_StartTime ( );
    void PutReencoding_StartTime (
        double Value );
    double GetReencoding_StartFrame ( );
    void PutReencoding_StartFrame (
        double Value );
    double GetReencoding_StopTime ( );
    void PutReencoding_StopTime (
        double Value );
    double GetReencoding_StopFrame ( );
    void PutReencoding_StopFrame (
        double Value );
    VARIANT_BOOL GetReencoding_IncludeAudioStream ( );
    void PutReencoding_IncludeAudioStream (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetReencoding_IncludeVideoStream ( );
    void PutReencoding_IncludeVideoStream (
        VARIANT_BOOL Value );
    enum TxRecordingMethod GetReencoding_Method ( );
    void PutReencoding_Method (
        enum TxRecordingMethod Value );
    VARIANT_BOOL GetReencoding_UseAudioCompressor ( );
    void PutReencoding_UseAudioCompressor (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetReencoding_UseFrameGrabber ( );
    void PutReencoding_UseFrameGrabber (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetReencoding_UseVideoCompressor ( );
    void PutReencoding_UseVideoCompressor (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetReencoding_WMVOutput ( );
    void PutReencoding_WMVOutput (
        VARIANT_BOOL Value );
    enum TxRawSampleCaptureLocation GetRawSampleCaptureLocation ( );
    void PutRawSampleCaptureLocation (
        enum TxRawSampleCaptureLocation Value );
    VARIANT_BOOL GetRawVideoSampleCapture ( );
    void PutRawVideoSampleCapture (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetRawAudioSampleCapture ( );
    void PutRawAudioSampleCapture (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetRawCaptureAsyncEvent ( );
    void PutRawCaptureAsyncEvent (
        VARIANT_BOOL Value );
    enum TxRecordingSize GetRecordingSize ( );
    void PutRecordingSize (
        enum TxRecordingSize Value );
    long GetScreenRecordingMonitor ( );
    void PutScreenRecordingMonitor (
        long Value );
    VARIANT_BOOL GetScreenRecordingNonVisibleWindows ( );
    void PutScreenRecordingNonVisibleWindows (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetScreenRecordingThroughClipboard ( );
    void PutScreenRecordingThroughClipboard (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetScreenRecordingWithCursor ( );
    void PutScreenRecordingWithCursor (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShapeOverlayEnabled ( );
    void PutShapeOverlayEnabled (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSpeakerControl ( );
    void PutSpeakerControl (
        VARIANT_BOOL Value );
    _bstr_t GetStoragePath ( );
    void PutStoragePath (
        _bstr_t Value );
    VARIANT_BOOL GetStoreDeviceSettingsInRegistry ( );
    void PutStoreDeviceSettingsInRegistry (
        VARIANT_BOOL Value );
    enum TxSynchronizationRole GetSynchronizationRole ( );
    void PutSynchronizationRole (
        enum TxSynchronizationRole Value );
    VARIANT_BOOL GetSynchronized ( );
    void PutSynchronized (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSyncCommands ( );
    void PutSyncCommands (
        VARIANT_BOOL Value );
    enum TxSyncPreview GetSyncPreview ( );
    void PutSyncPreview (
        enum TxSyncPreview Value );
    VARIANT_BOOL GetTextOverlay_Enabled ( );
    void PutTextOverlay_Enabled (
        VARIANT_BOOL Value );
    long GetTextOverlay_Left ( );
    void PutTextOverlay_Left (
        long Value );
    long GetTextOverlay_Top ( );
    void PutTextOverlay_Top (
        long Value );
    long GetTextOverlay_Right ( );
    void PutTextOverlay_Right (
        long Value );
    long GetTextOverlay_ScrollingSpeed ( );
    void PutTextOverlay_ScrollingSpeed (
        long Value );
    VARIANT_BOOL GetTextOverlay_Shadow ( );
    void PutTextOverlay_Shadow (
        VARIANT_BOOL Value );
    OLE_COLOR GetTextOverlay_ShadowColor ( );
    void PutTextOverlay_ShadowColor (
        OLE_COLOR Value );
    enum TxCardinalDirection GetTextOverlay_ShadowDirection ( );
    void PutTextOverlay_ShadowDirection (
        enum TxCardinalDirection Value );
    OLE_COLOR GetTextOverlay_BkColor ( );
    void PutTextOverlay_BkColor (
        OLE_COLOR Value );
    enum TxTextOverlayAlign GetTextOverlay_Align ( );
    void PutTextOverlay_Align (
        enum TxTextOverlayAlign Value );
    OLE_COLOR GetTextOverlay_FontColor ( );
    void PutTextOverlay_FontColor (
        OLE_COLOR Value );
    _bstr_t GetTextOverlay_String ( );
    void PutTextOverlay_String (
        _bstr_t Value );
    VARIANT_BOOL GetTextOverlay_Transparent ( );
    void PutTextOverlay_Transparent (
        VARIANT_BOOL Value );
    _bstr_t GetThirdPartyDeinterlacer ( );
    void PutThirdPartyDeinterlacer (
        _bstr_t Value );
    VARIANT_BOOL GetTranslateMouseCoordinates ( );
    void PutTranslateMouseCoordinates (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetTVUseFrequencyOverrides ( );
    void PutTVUseFrequencyOverrides (
        VARIANT_BOOL Value );
    long GetTunerFrequency ( );
    void PutTunerFrequency (
        long Value );
    VARIANT_BOOL GetUseClock ( );
    void PutUseClock (
        VARIANT_BOOL Value );
    _bstr_t GetVersion ( );
    void PutVersion (
        _bstr_t Value );
    long GetVideoDevice ( );
    void PutVideoDevice (
        long Value );
    long GetVideoCompression_DataRate ( );
    void PutVideoCompression_DataRate (
        long Value );
    long GetVideoCompression_KeyFrameRate ( );
    void PutVideoCompression_KeyFrameRate (
        long Value );
    long GetVideoCompression_PFramesPerKeyFrame ( );
    void PutVideoCompression_PFramesPerKeyFrame (
        long Value );
    double GetVideoCompression_Quality ( );
    void PutVideoCompression_Quality (
        double Value );
    long GetVideoCompression_WindowSize ( );
    void PutVideoCompression_WindowSize (
        long Value );
    long GetVideoCompressor ( );
    void PutVideoCompressor (
        long Value );
    VARIANT_BOOL GetVideoControlSettings ( );
    void PutVideoControlSettings (
        VARIANT_BOOL Value );
    long GetVideoFormat ( );
    void PutVideoFormat (
        long Value );
    enum TxFileSort GetVideoFromImages_BitmapsSortedBy ( );
    void PutVideoFromImages_BitmapsSortedBy (
        enum TxFileSort Value );
    VARIANT_BOOL GetVideoFromImages_RepeatIndefinitely ( );
    void PutVideoFromImages_RepeatIndefinitely (
        VARIANT_BOOL Value );
    _bstr_t GetVideoFromImages_SourceDirectory ( );
    void PutVideoFromImages_SourceDirectory (
        _bstr_t Value );
    _bstr_t GetVideoFromImages_TemporaryFile ( );
    void PutVideoFromImages_TemporaryFile (
        _bstr_t Value );
    long GetVideoInput ( );
    void PutVideoInput (
        long Value );
    long GetVideoProcessing_Brightness ( );
    void PutVideoProcessing_Brightness (
        long Value );
    long GetVideoProcessing_Contrast ( );
    void PutVideoProcessing_Contrast (
        long Value );
    enum TxVideoDeinterlacing GetVideoProcessing_Deinterlacing ( );
    void PutVideoProcessing_Deinterlacing (
        enum TxVideoDeinterlacing Value );
    VARIANT_BOOL GetVideoProcessing_FlipHorizontal ( );
    void PutVideoProcessing_FlipHorizontal (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetVideoProcessing_FlipVertical ( );
    void PutVideoProcessing_FlipVertical (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetVideoProcessing_GrayScale ( );
    void PutVideoProcessing_GrayScale (
        VARIANT_BOOL Value );
    long GetVideoProcessing_Hue ( );
    void PutVideoProcessing_Hue (
        long Value );
    VARIANT_BOOL GetVideoProcessing_InvertColors ( );
    void PutVideoProcessing_InvertColors (
        VARIANT_BOOL Value );
    long GetVideoProcessing_Pixellization ( );
    void PutVideoProcessing_Pixellization (
        long Value );
    long GetVideoProcessing_Saturation ( );
    void PutVideoProcessing_Saturation (
        long Value );
    enum TxVideoRotation GetVideoProcessing_Rotation ( );
    void PutVideoProcessing_Rotation (
        enum TxVideoRotation Value );
    double GetVideoProcessing_RotationCustomAngle ( );
    void PutVideoProcessing_RotationCustomAngle (
        double Value );
    VARIANT_BOOL GetVideoQualitySettings ( );
    void PutVideoQualitySettings (
        VARIANT_BOOL Value );
    enum TxVideoRenderer GetVideoRenderer ( );
    void PutVideoRenderer (
        enum TxVideoRenderer Value );
    enum TxVideoRendererExternal GetVideoRendererExternal ( );
    void PutVideoRendererExternal (
        enum TxVideoRendererExternal Value );
    long GetVideoRendererExternalIndex ( );
    void PutVideoRendererExternalIndex (
        long Value );
    long GetVideoSize ( );
    void PutVideoSize (
        long Value );
    enum TxVideoSource GetVideoSource ( );
    void PutVideoSource (
        enum TxVideoSource Value );
    _bstr_t GetVideoSource_FileOrURL ( );
    void PutVideoSource_FileOrURL (
        _bstr_t Value );
    double GetVideoSource_FileOrURL_StartTime ( );
    void PutVideoSource_FileOrURL_StartTime (
        double Value );
    double GetVideoSource_FileOrURL_StopTime ( );
    void PutVideoSource_FileOrURL_StopTime (
        double Value );
    long GetVideoSubtype ( );
    void PutVideoSubtype (
        long Value );
    VARIANT_BOOL GetVideoVisibleWhenStopped ( );
    void PutVideoVisibleWhenStopped (
        VARIANT_BOOL Value );
    long GetVirtualVideoStreamControl ( );
    void PutVirtualVideoStreamControl (
        long Value );
    long GetVirtualAudioStreamControl ( );
    void PutVirtualAudioStreamControl (
        long Value );
    enum TxVuMeter GetVuMeter ( );
    void PutVuMeter (
        enum TxVuMeter Value );
    enum TxWebcamStillCaptureButton GetWebcamStillCaptureButton ( );
    void PutWebcamStillCaptureButton (
        enum TxWebcamStillCaptureButton Value );
    long GetZoomCoeff ( );
    void PutZoomCoeff (
        long Value );
    long GetZoomXCenter ( );
    void PutZoomXCenter (
        long Value );
    long GetZoomYCenter ( );
    void PutZoomYCenter (
        long Value );
    VARIANT_BOOL GetParentBackground ( );
    void PutParentBackground (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAlignDisabled ( );
    long GetVisibleDockClientCount ( );
    long DrawTextBiDiModeFlagsReadingOnly ( );
    HRESULT InitiateAction ( );
    VARIANT_BOOL IsRightToLeft ( );
    VARIANT_BOOL UseRightToLeftReading ( );
    VARIANT_BOOL UseRightToLeftScrollBar ( );
    HRESULT SetSubComponent (
        VARIANT_BOOL IsSubComponent );
    HRESULT AboutBox ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_GetBusyCursor (
        enum TxCursors * Value ) = 0;
    virtual HRESULT __stdcall raw_SetBusyCursor (
        enum TxCursors Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoCursor (
        enum TxCursors * Value ) = 0;
    virtual HRESULT __stdcall raw_SetVideoCursor (
        enum TxCursors Value ) = 0;
    virtual HRESULT __stdcall raw_GetNormalCursor (
        enum TxCursors * Value ) = 0;
    virtual HRESULT __stdcall raw_SetNormalCursor (
        enum TxCursors Value ) = 0;
    virtual HRESULT __stdcall raw_GetAnalogVideoStandards (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAnalogVideoStandardsCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetBufferCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetASFProfiles (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetASFProfilesCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioBalance (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioCompressorName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioInputBalance (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioInputLevel (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioInputMono (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioInputs (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioInputsCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioDeviceName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioFormats (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioRendererName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioVolume (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetBusy (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetCropping_YMax (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetCropping_XMax (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetCurrentFrameRate (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetCurrentState (
        enum TxCurrentState * Value ) = 0;
    virtual HRESULT __stdcall raw_GetDeliveredFrames (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetDirectShowFilters (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetDirectShowFiltersCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetDisplay_VideoHeight (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetDisplay_VideoWidth (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetDroppedFrameCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetDisplay_VideoWindowHandle (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetDualDisplay_VideoWindowHandle (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioCompressors (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioCompressorsCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioDevices (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioDevicesCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioRenderers (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioRenderersCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetDualDisplay_VideoHeight (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetDualDisplay_VideoWidth (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetFrameGrabberCurrentRGBFormat (
        enum TxFrameGrabberRGBFormat * Value ) = 0;
    virtual HRESULT __stdcall raw_GetHoldRecording (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetImageOverlaySelector (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetImageRatio (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetInFrameProgressEvent (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsAnalogVideoDecoderAvailable (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsAudioCrossbarAvailable (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsAudioInputBalanceAvailable (
        enum TxTriState * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsCameraControlAvailable (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsDigitalVideoIn (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsDVCommandAvailable (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsHorizontalSyncLocked (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsMpegStream (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsPlayerAudioStreamAvailable (
        enum TxTriState * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsPlayerVideoStreamAvailable (
        enum TxTriState * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsRecordingPaused (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetTimeCodeReaderAvailable (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsTVAudioAvailable (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsTVAutoTuneRunning (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsTVTunerAvailable (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsVideoControlAvailable (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsVideoCrossbarAvailable (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsVideoQualityAvailable (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsVideoPortAvailable (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsVideoInterlaced (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetIsWDMVideoDriver (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetLast_BurstFrameCapture_FileName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetLast_CaptureFrameTo_FileName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetLast_Recording_FileName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetLast_Clip_Played (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetMotionDetector_GlobalMotionRatio (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetMotionDetector_GridXCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetMotionDetector_GridYCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetMotionDetector_IsGridValid (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetMpegStreamType (
        enum TxMpegStreamType * Value ) = 0;
    virtual HRESULT __stdcall raw_GetMultiplexerName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetMultiplexers (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetMultiplexersCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetPlaylistIndex (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetPlayerDuration (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetPlayerFrameCount (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetPlayerFramePosition (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetPlayerTimePosition (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetPlayerFrameRate (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetPlayerState (
        enum TxPlayerState * Value ) = 0;
    virtual HRESULT __stdcall raw_GetRecordingBacktimedFramesCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetRecordingCanPause (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetRecordingDuration (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetRecordingFourCC (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetRecordingHeight (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetRecordingWidth (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetReencodingStartFrame (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetReencodingStartTime (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetReencodingStopFrame (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetReencodingStopTime (
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetSendToDV_DeviceIndex (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetSpeakerBalance (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetSpeakerVolume (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetStreamingURL (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetSystemTempPath (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetTextOverlaySelector (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetTVChannel (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetTVCountryCode (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetTVTunerInputType (
        enum TxTunerInputType * Value ) = 0;
    virtual HRESULT __stdcall raw_GetTunerMode (
        enum TxTunerMode * Value ) = 0;
    virtual HRESULT __stdcall raw_GetUniqueID (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVCRHorizontalLocking (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoCompressorName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoCompressors (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoCompressorsCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoDevices (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoDevicesId (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoDevicesCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoFormats (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoFormatsCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoInputs (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoInputsCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoDeviceName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoSizes (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoSizesCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoHeight (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoHeight_PreferredAspectRatio (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoWidth (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoWidth_PreferredAspectRatio (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoSources (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoSourcesCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoSubtypes (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoSubtypesCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_SetAudioBalance (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetAudioInputBalance (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetAudioInputLevel (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetAudioInputMono (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall raw_SetAudioVolume (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetBufferCount (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetHoldRecording (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall raw_SetImageOverlaySelector (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetMpegStreamType (
        enum TxMpegStreamType Value ) = 0;
    virtual HRESULT __stdcall raw_SetPlaylistIndex (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetPlayerDuration (
        double Value ) = 0;
    virtual HRESULT __stdcall raw_SetPlayerFramePosition (
        double Value ) = 0;
    virtual HRESULT __stdcall raw_SetPlayerTimePosition (
        double Value ) = 0;
    virtual HRESULT __stdcall raw_SetRecordingBacktimedFramesCount (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetRecordingCanPause (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall raw_SetReencodingStartFrame (
        double Value ) = 0;
    virtual HRESULT __stdcall raw_SetReencodingStartTime (
        double Value ) = 0;
    virtual HRESULT __stdcall raw_SetReencodingStopFrame (
        double Value ) = 0;
    virtual HRESULT __stdcall raw_SetReencodingStopTime (
        double Value ) = 0;
    virtual HRESULT __stdcall raw_SetSendToDV_DeviceIndex (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetSpeakerBalance (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetSpeakerVolume (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetTextOverlaySelector (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetTVChannel (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetTVCountryCode (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetTVTunerInputType (
        enum TxTunerInputType Value ) = 0;
    virtual HRESULT __stdcall raw_SetTunerMode (
        enum TxTunerMode Value ) = 0;
    virtual HRESULT __stdcall raw_SetVCRHorizontalLocking (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall raw_GetTextOverlay_Font (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_SetTextOverlay_Font (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_About ( ) = 0;
    virtual HRESULT __stdcall raw_AnalogVideoStandardIndex (
        BSTR param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_ASFStreaming_GetAuthorizationList (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_ASFStreaming_GetConnectedClients (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_ASFStreaming_GetConnectedClientsCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_ASFStreaming_ResetAuthorizations (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_ASFStreaming_SetAuthorization (
        VARIANT_BOOL Allowed,
        BSTR IP,
        BSTR Mask,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_AssociateMultiplexedSlave (
        long InputNumber,
        long SlaveUniqueID,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_AudioCompressorIndex (
        BSTR param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_AudioDeviceIndex (
        BSTR param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_AudioRendererIndex (
        BSTR param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_AudioInputIndex (
        BSTR param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_AVIInfo2 (
        BSTR AVIFile,
        enum TxAVIInfoType AVIInfoType,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_AVIHeaderInfo (
        BSTR AVIFile,
        enum TxHeaderAttribute HeaderAttribute,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_CameraControlValue (
        enum TxCameraControl Setting,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_CameraControlAuto (
        enum TxCameraControl Setting,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_CameraControlDefault (
        enum TxCameraControl Setting,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_CameraControlMin (
        enum TxCameraControl Setting,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_CameraControlMax (
        enum TxCameraControl Setting,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_CameraControlStep (
        enum TxCameraControl Setting,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_Cancel (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_CanProcessMessages (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_CaptureFrameTo (
        enum TxFrameCaptureDest Dest,
        BSTR FileName,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_CaptureFrameSyncTo (
        enum TxFrameCaptureDest Dest,
        BSTR FileName,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_ClearHeaderAttributes ( ) = 0;
    virtual HRESULT __stdcall raw_ClosePlayer ( ) = 0;
    virtual HRESULT __stdcall raw_GetLastFrameAsHBITMAP (
        long BufferIndex,
        VARIANT_BOOL WithOverlays,
        long SrcLeftLocation,
        long SrcTopLocation,
        long SrcWidth,
        long SrcHeight,
        long DestWidth,
        long DestHeight,
        long BitmapColorBitCount,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_CreatePreallocCapFile (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_DVDInfo (
        BSTR DVDRootDirectory,
        enum TxDVDInfoType DVDInfoType,
        long TitleNumber,
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_Display_SetLocation (
        long WindowLeft,
        long WindowTop,
        long WindowWidth,
        long WindowHeight ) = 0;
    virtual HRESULT __stdcall raw_DestroyComponent ( ) = 0;
    virtual HRESULT __stdcall raw_DualDisplay_SetLocation (
        long WindowLeft,
        long WindowTop,
        long WindowWidth,
        long WindowHeight ) = 0;
    virtual HRESULT __stdcall raw_DrawBitmapOverFrame (
        long BitmapHandle,
        VARIANT_BOOL Stretched,
        long LeftLocation,
        long TopLocation,
        long bmWidth,
        long bmHeight,
        VARIANT_BOOL Transparent,
        VARIANT_BOOL UseTransparentColor,
        unsigned long TransparentColorValue,
        VARIANT_BOOL AlphaBlend,
        long AlphaBlendValue,
        VARIANT_BOOL ChromaKey,
        long ChromaKeyRGBColor,
        long ChromaKeyLeewayPercent,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_EnumerateWindows (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_EnableMultiplexedInput (
        long InputNumber,
        VARIANT_BOOL Enable,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_FastForwardPlayer ( ) = 0;
    virtual HRESULT __stdcall raw_FindIndexInListByName (
        BSTR List,
        BSTR SearchedString,
        VARIANT_BOOL IsSubString,
        VARIANT_BOOL IgnoreCase,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetAudioCodec (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetFrameInfo (
        long FrameId,
        enum TxFrameInfoId FrameInfoId,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetFrameInfoString (
        enum TxFrameInfoStringId FrameInfoStringId,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetItemNameFromList (
        BSTR List,
        long ItemIndex,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetMiscDeviceControl (
        enum TxMiscDeviceControl MiscDeviceControl,
        long Index,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetLogString (
        enum TxLogType param1,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetNearestVideoWidth (
        long PreferredVideoWidth,
        long PreferredVideoHeight,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetNearestVideoHeight (
        long PreferredVideoWidth,
        long PreferredVideoHeight,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetPlayerOpenProgressPercent (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetPlaylist (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetTranslatedCoordinates (
        long DisplayIndex,
        long NativeX,
        long NativeY,
        long * TranslatedX,
        long * TranslatedY,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetTVChannelInfo (
        enum TxTVChannelInfo param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoCodec (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoWidthFromIndex (
        long Index,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoHeightFromIndex (
        long Index,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetNearestVideoSize (
        long PreferredVideoWidth,
        long PreferredVideoHeight,
        long * NearestVideoWidth,
        long * NearestVideoHeight ) = 0;
    virtual HRESULT __stdcall raw_GetVMR9ImageAdjustmentBounds (
        VARIANT_BOOL MainDisplay,
        enum TxVMR9ImageAdjustment VMR9ControlSetting,
        long * MinValue,
        long * MaxValue,
        long * StepSize,
        long * DefaultValue,
        long * CurrentValue,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoSizeFromIndex (
        long Index,
        long * _VideoWidth,
        long * _VideoHeight,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_AVIDuration (
        BSTR AVIFile,
        double * Duration,
        double * FrameCount,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_AVIInfo (
        BSTR AVIFile,
        double * Duration,
        double * FrameCount,
        long * _VideoWidth,
        long * _VideoHeight,
        double * VideoFrameRateFps,
        long * AvgBitRate,
        long * AudioChannels,
        long * AudioSamplesPerSec,
        long * AudioBitsPerSample,
        BSTR * VideoCodec,
        BSTR * AudioCodec,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVideoCompressionSettings (
        long * DataRate,
        long * KeyFrameRate,
        long * PFramesPerKeyFrame,
        long * WindowSize,
        double * Quality,
        VARIANT_BOOL * CanQuality,
        VARIANT_BOOL * CanCrunch,
        VARIANT_BOOL * CanKeyFrame,
        VARIANT_BOOL * CanBFrame,
        VARIANT_BOOL * CanWindow,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_GetRGBPixelAt (
        long x,
        long y,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GetPixelsDistance (
        long x1,
        long y1,
        long x2,
        long y2,
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_GetVUMeterSetting (
        long ChannelIndex,
        enum TxVUMeterSetting VUMeterSetting,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_GraphState (
        enum TxGraphState * Value ) = 0;
    virtual HRESULT __stdcall raw_IsAudioDeviceConnected (
        long DeviceIndex,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_IsAudioDeviceASoundCard (
        long DeviceIndex,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_IsAudioRendererConnected (
        long RendererIndex,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_IsCameraControlSettingAvailable (
        enum TxCameraControl Setting,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_IsDialogAvailable (
        enum TxDialog Dialog,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_IsDirectX8OrHigherInstalled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_IsPlaylistActive (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_IsVideoQualitySettingAvailable (
        enum TxVideoQuality Setting,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_IsVideoControlModeAvailable (
        enum TxVideoControl Mode,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_IsVMR9ImageAdjustmentAvailable (
        VARIANT_BOOL MainDisplay,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_IsVideoDeviceConnected (
        long DeviceIndex,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_IsVideoSignalDetected (
        VARIANT_BOOL DetectConnexantBlueScreen,
        VARIANT_BOOL DetectCustomRGB,
        long CustomR,
        long CustomG,
        long CustomB,
        VARIANT_BOOL UseAsMaxValues,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_IsDVDevice (
        long Index,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_LoadCompressorSettingsFromDataString (
        VARIANT_BOOL IsVideoCompressor,
        long CompressorIndex,
        BSTR DataString,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_LoadCompressorSettingsFromTextFile (
        VARIANT_BOOL IsVideoCompressor,
        long CompressorIndex,
        BSTR FileName,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetLocation (
        long lLeft,
        long lTop,
        long lWidth,
        long lHeight ) = 0;
    virtual HRESULT __stdcall raw_MixAudioSamples (
        long pSampleBuffer,
        long SampleBufferSize,
        long SampleDataLength,
        enum TxFormatType SampleFormatType,
        long pFormat,
        double SampleStartTime,
        double SampleStopTime,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_MonitorsCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_CellMotionRatio (
        long x,
        long y,
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_CellColorIntensity (
        enum TxRGBSelector RGBSelector,
        long x,
        long y,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_Get2DTextGrid (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_Get2DTextMotion (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_GlobalColorIntensity (
        enum TxRGBSelector RGBSelector,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_GetCellLocation (
        long x,
        long y,
        long * XLocation,
        long * YLocation,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_GetCellSensitivity (
        long x,
        long y,
        long * param3,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_GetCellSize (
        long * XSize,
        long * YSize,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_SetCellSensitivity (
        long x,
        long y,
        long param3,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_SetGridSize (
        long x,
        long y ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_GloballyIncOrDecSensitivity (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_ResetGlobalSensitivity (
        long Value ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_Reset ( ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_ShowGridDialog ( ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_TriggerNow ( ) = 0;
    virtual HRESULT __stdcall raw_MotionDetector_UseThisReferenceSample (
        long Bitmap_,
        BSTR BMPFile,
        BSTR JPEGFile,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_MultiplexerIndex (
        BSTR param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_NotifyPlayerTrackbarAction (
        enum TxTrackbarAction TrackbarAction ) = 0;
    virtual HRESULT __stdcall raw_OpenPlayer (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_OpenDVD (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_OpenPlayerAtFramePositions (
        double StartFrame,
        double StopFrame,
        VARIANT_BOOL KeepBounds,
        VARIANT_BOOL CloseAndReopenIfAlreadyOpened,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_OpenPlayerAtTimePositions (
        double StartTime,
        double StopTime,
        VARIANT_BOOL KeepBounds,
        VARIANT_BOOL CloseAndReopenIfAlreadyOpened,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_PauseRecording (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_PausePlayer ( ) = 0;
    virtual HRESULT __stdcall raw_PlayerFrameStep (
        long FrameCount,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_Playlist (
        enum TxPlaylist PlaylistAction,
        BSTR VideoClip,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_RecordingKBytesWrittenToDisk (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_ReencodeVideoClip (
        BSTR SourceVideoClip,
        BSTR NewVideoClip,
        VARIANT_BOOL IncludeVideoStream,
        VARIANT_BOOL IncludeAudioStream,
        VARIANT_BOOL UseFrameGrabber,
        VARIANT_BOOL UseCurrentVideoCompressor,
        VARIANT_BOOL UseCurrentAudioCompressor,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_RefreshDevicesAndCompressorsLists ( ) = 0;
    virtual HRESULT __stdcall raw_RefreshPlayerOverlays ( ) = 0;
    virtual HRESULT __stdcall raw_ResetVideoDeviceSettings (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_ResumeRecording (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_RewindPlayer ( ) = 0;
    virtual HRESULT __stdcall raw_RunPlayer ( ) = 0;
    virtual HRESULT __stdcall raw_RunPlayerBackwards ( ) = 0;
    virtual HRESULT __stdcall raw_StartSynchronized (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoCompressorIndex (
        BSTR param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoDeviceIndex (
        BSTR param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoFormatIndex (
        BSTR param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoInputIndex (
        BSTR param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoSizeIndex (
        BSTR param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoSubtypeIndex (
        BSTR param1,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_SendDVCommand (
        enum TxDVCommand DVCommand,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SendIPCameraCommand (
        BSTR IPCameraCommand,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetAuthentication (
        enum TxAuthenticationType AuthenticationType,
        BSTR UserName,
        BSTR Password ) = 0;
    virtual HRESULT __stdcall raw_Mixer_AddToMixer (
        long SourceUniqueID,
        long SourceVideoInput,
        long MosaicLine,
        long MosaicColumn,
        long AlternatedGroup,
        long AlternatedTimeIntervalInMs,
        VARIANT_BOOL ReplacePreviouslyAdded,
        VARIANT_BOOL CanEraseBackground,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_Mixer_SetupPIPFromSource (
        long SourceUniqueID,
        long Source_Left,
        long Source_Top,
        long Source_Width,
        long Source_Height,
        VARIANT_BOOL ActivatePIP,
        long PIP_Left,
        long PIP_Top,
        long PIP_Width,
        long PIP_Height,
        VARIANT_BOOL MoveToTop,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_Mixer_Activation (
        long Id,
        VARIANT_BOOL Activate,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_Mixer_RemoveFromMixer (
        long Id,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_MPEGProgramSetting (
        enum TxMPEGProgramSetting MPEGProgramSetting,
        long param2,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_SaveCompressorSettingsToDataString (
        VARIANT_BOOL IsVideoCompressor,
        long CompressorIndex,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_SaveCompressorSettingsToTextFile (
        VARIANT_BOOL IsVideoCompressor,
        long CompressorIndex,
        BSTR FileName,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetAVIMuxConfig (
        enum TxAVIMuxConfig AVIMuxSetting,
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetCameraControl (
        enum TxCameraControl Setting,
        VARIANT_BOOL SetAuto,
        VARIANT_BOOL SetDefault,
        long SetValue,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetFrameCaptureBounds (
        long LeftPosition,
        long TopPosition,
        long RightPosition,
        long BottomPosition ) = 0;
    virtual HRESULT __stdcall raw_SetMultiplexerFilterByName (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_SetTextOverlayCustomVar (
        long TextOverlaySelector,
        long VarIndex,
        BSTR VarText ) = 0;
    virtual HRESULT __stdcall raw_SetVideoCompressionDefaults (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetVideoCompressionSettings (
        long DataRate,
        long KeyFrameRate,
        long PFramesPerKeyFrame,
        long WindowSize,
        double Quality,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetVideoControlMode (
        VARIANT_BOOL FlipHorizontal,
        VARIANT_BOOL FlipVertical,
        VARIANT_BOOL ExternalTriggerEnable,
        VARIANT_BOOL Trigger,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetVideoQuality (
        enum TxVideoQuality Setting,
        VARIANT_BOOL SetAuto,
        VARIANT_BOOL SetDefault,
        long SetValue,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetVMR9ImageAdjustmentValue (
        VARIANT_BOOL MainDisplay,
        enum TxVMR9ImageAdjustment VMR9ControlSetting,
        long param3,
        VARIANT_BOOL FixRange,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_ShowDialog (
        enum TxDialog Dialog,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_PausePreview (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_ResetPreview (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_ResumePreview (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_RecordToNewFileNow (
        BSTR NewRecordingFileName,
        VARIANT_BOOL ResetStreamTime,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_RetrieveInitialXYAfterRotation (
        long x,
        long y,
        long * OriginalX,
        long * OriginalY ) = 0;
    virtual HRESULT __stdcall raw_SendImageToVideoFromBitmaps (
        BSTR ImageFilePath,
        long BitmapHandle,
        VARIANT_BOOL CanFreeBitmapHandle,
        VARIANT_BOOL EndOfData,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetHeaderAttribute (
        enum TxHeaderAttribute HeaderAttribute,
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_SetImageOverlayAttributes (
        long LeftLocation,
        long TopLocation,
        long StretchedWidth,
        long StretchedHeight,
        VARIANT_BOOL Transparent,
        VARIANT_BOOL UseTransparentColor,
        long TransparentColorValue,
        VARIANT_BOOL AlphaBlend,
        long AlphaBlendValue ) = 0;
    virtual HRESULT __stdcall raw_SetImageOverlayFromImageFile (
        BSTR FileName,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetImageOverlayFromBMPFile (
        BSTR FileName,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetImageOverlayFromJPEGFile (
        BSTR FileName,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetImageOverlayFromHBitmap (
        long Bitmap,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetIPCameraSetting (
        enum TxIPCameraSetting Setting,
        long param2,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetLogoFromBMPFile (
        BSTR FileName,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetLogoFromJPEGFile (
        BSTR FileName,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetLogoFromHBitmap (
        long Bitmap,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_ScreenRecordingUsingCoordinates (
        VARIANT_BOOL FunctionEnabled,
        long scLeft,
        long scTop,
        long scWidth,
        long scHeight,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SendCameraCommand (
        long Pan,
        long Tilt,
        VARIANT_BOOL Relative,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_PutMiscDeviceControl (
        enum TxMiscDeviceControl MiscDeviceControl,
        long Index,
        long param3,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetWindowRecordingByHandle (
        long Window_Handle,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetWindowRecordingByName (
        BSTR WindowName,
        VARIANT_BOOL ExactMatch,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetVUMeterSetting (
        long ChannelIndex,
        enum TxVUMeterSetting VUMeterSetting,
        long Value ) = 0;
    virtual HRESULT __stdcall raw_SetWindowTransparency (
        long WndHandle,
        VARIANT_BOOL UseColorKey,
        VARIANT_BOOL UseAlpha,
        long AlphaValue,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_StartAudioRecording (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_StartAudioRendering (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_StartPreview (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_StartRecording (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_StartReencoding (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_Stop (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_StopPreview ( ) = 0;
    virtual HRESULT __stdcall raw_StopPlayer ( ) = 0;
    virtual HRESULT __stdcall raw_StopRecording ( ) = 0;
    virtual HRESULT __stdcall raw_StopReencoding (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_TextOverlay_CreateCustomFont (
        long fHeight,
        long fWidth,
        long fEscapement,
        long fOrientation,
        long fWeight,
        VARIANT_BOOL fItalic,
        VARIANT_BOOL fUnderline,
        VARIANT_BOOL fStrikeOut,
        long fCharSet,
        long fOutputPrecision,
        long fClipPrecision,
        long fQuality,
        long fPitchAndFamily,
        BSTR FontFacename,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_ThirdPartyFilter_AddToList (
        enum TxThirdPartyFilterList Location,
        BSTR GUIDString,
        BSTR OptionalDLLFilePath,
        BSTR FilterName,
        VARIANT_BOOL Enable,
        VARIANT_BOOL CanSaveFilterState,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_ThirdPartyFilter_ClearList (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_ThirdPartyFilter_Enable (
        enum TxThirdPartyFilterList Location,
        BSTR GUIDString,
        VARIANT_BOOL Enable,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_ThirdPartyFilter_RemoveFromList (
        enum TxThirdPartyFilterList Location,
        BSTR GUIDString,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_ThirdPartyFilter_ShowDialog (
        enum TxThirdPartyFilterList Location,
        BSTR GUIDString,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_TVGetMinMaxChannels (
        long * MinChannel,
        long * MaxChannel,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_TVClearFrequencyOverrides (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_TVSetChannelFrequencyOverride (
        long TVChannel,
        long FrequencyInHz,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_TVStartAutoScan (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_TVStartAutoScanChannels (
        long MinChannel,
        long MaxChannel,
        long Interval_ms,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_TVStopAutoScan (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_UseNearestVideoSize (
        long PreferredWidth,
        long PreferredHeight,
        VARIANT_BOOL Stretch ) = 0;
    virtual HRESULT __stdcall raw_VDECGetHorizontalLocked (
        long * plLocked,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_VDECGetNumberOfLines (
        long * plNumberOfLines,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_VDECGetOutputEnable (
        long * plOutputEnable,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_VDECGetVCRHorizontalLocking (
        long * plVCRHorizontalLocking,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_VDECPutTVFormat (
        long lAnalogVideoStandard,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_VDECPutOutputEnable (
        long lOutputEnable,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_VDECPutVCRHorizontalLocking (
        long lVCRHorizontalLocking,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoFromImages_CreateSetOfBitmaps (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoQualityValue (
        enum TxVideoQuality Setting,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoQualityAuto (
        enum TxVideoQuality Setting,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoQualityDefault (
        enum TxVideoQuality Setting,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoQualityMin (
        enum TxVideoQuality Setting,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoQualityMax (
        enum TxVideoQuality Setting,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_VideoQualityStep (
        enum TxVideoQuality Setting,
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_WriteScriptCommand (
        BSTR ScriptType,
        BSTR ScriptArgument,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_MonitorBounds (
        long MonitorNumber,
        long * LeftBound,
        long * TopBound,
        long * RightBound,
        long * BottomBound,
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall get_Alignment (
        enum TxAlignment * Value ) = 0;
    virtual HRESULT __stdcall put_Alignment (
        enum TxAlignment Value ) = 0;
    virtual HRESULT __stdcall get_Caption (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Caption (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_Color (
        OLE_COLOR * Value ) = 0;
    virtual HRESULT __stdcall put_Color (
        OLE_COLOR Value ) = 0;
    virtual HRESULT __stdcall get_Enabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Enabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_FullRepaint (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_FullRepaint (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ParentColor (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ParentColor (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Visible (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Visible (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AdjustOverlayAspectRatio (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AdjustOverlayAspectRatio (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AdjustPixelAspectRatio (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AdjustPixelAspectRatio (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Aero (
        enum TxAero * Value ) = 0;
    virtual HRESULT __stdcall put_Aero (
        enum TxAero Value ) = 0;
    virtual HRESULT __stdcall get_AnalogVideoStandard (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_AnalogVideoStandard (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ApplicationPriority (
        enum TxApplicationPriority * Value ) = 0;
    virtual HRESULT __stdcall put_ApplicationPriority (
        enum TxApplicationPriority Value ) = 0;
    virtual HRESULT __stdcall get_ASFAudioBitRate (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ASFAudioBitRate (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ASFAudioChannels (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ASFAudioChannels (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ASFDeinterlaceMode (
        enum TxASFDeinterlaceMode * Value ) = 0;
    virtual HRESULT __stdcall put_ASFDeinterlaceMode (
        enum TxASFDeinterlaceMode Value ) = 0;
    virtual HRESULT __stdcall get_ASFFixedFrameRate (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ASFFixedFrameRate (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ASFMediaServerPublishingPoint (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_ASFMediaServerPublishingPoint (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_ASFMediaServerTemplatePublishingPoint (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_ASFMediaServerTemplatePublishingPoint (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_ASFMediaServerRemovePublishingPointAfterDisconnect (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ASFMediaServerRemovePublishingPointAfterDisconnect (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ASFNetworkPort (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ASFNetworkPort (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ASFNetworkMaxUsers (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ASFNetworkMaxUsers (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ASFProfile (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ASFProfile (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ASFProfileFromCustomFile (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_ASFProfileFromCustomFile (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_ASFProfileVersion (
        enum TxASFProfileVersion * Value ) = 0;
    virtual HRESULT __stdcall put_ASFProfileVersion (
        enum TxASFProfileVersion Value ) = 0;
    virtual HRESULT __stdcall get_ASFVideoBitRate (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ASFVideoBitRate (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ASFVideoFrameRate (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_ASFVideoFrameRate (
        double Value ) = 0;
    virtual HRESULT __stdcall get_ASFVideoHeight (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ASFVideoHeight (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ASFVideoMaxKeyFrameSpacing (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ASFVideoMaxKeyFrameSpacing (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ASFVideoQuality (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ASFVideoQuality (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ASFVideoWidth (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ASFVideoWidth (
        long Value ) = 0;
    virtual HRESULT __stdcall get_AspectRatioToUse (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_AspectRatioToUse (
        double Value ) = 0;
    virtual HRESULT __stdcall get_AssociateAudioAndVideoDevices (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AssociateAudioAndVideoDevices (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AVIDurationUpdated (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AVIDurationUpdated (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AudioChannelRenderMode (
        enum TxAudioChannelRenderMode * Value ) = 0;
    virtual HRESULT __stdcall put_AudioChannelRenderMode (
        enum TxAudioChannelRenderMode Value ) = 0;
    virtual HRESULT __stdcall get_AudioCompressor (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_AudioCompressor (
        long Value ) = 0;
    virtual HRESULT __stdcall get_AudioDevice (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_AudioDevice (
        long Value ) = 0;
    virtual HRESULT __stdcall get_AudioDeviceRendering (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AudioDeviceRendering (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AudioFormat (
        enum TxAudioFormat * Value ) = 0;
    virtual HRESULT __stdcall put_AudioFormat (
        enum TxAudioFormat Value ) = 0;
    virtual HRESULT __stdcall get_AudioInput (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_AudioInput (
        long Value ) = 0;
    virtual HRESULT __stdcall get_AudioPeakEvent (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AudioPeakEvent (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AudioRecording (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AudioRecording (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AudioRenderer (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_AudioRenderer (
        long Value ) = 0;
    virtual HRESULT __stdcall get_AudioStreamNumber (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_AudioStreamNumber (
        long Value ) = 0;
    virtual HRESULT __stdcall get_AudioSyncAdjustmentEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AudioSyncAdjustmentEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AudioSyncAdjustment (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_AudioSyncAdjustment (
        long Value ) = 0;
    virtual HRESULT __stdcall get_AudioSource (
        enum TxAudioSource * Value ) = 0;
    virtual HRESULT __stdcall put_AudioSource (
        enum TxAudioSource Value ) = 0;
    virtual HRESULT __stdcall get_AutoConnectRelatedPins (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AutoConnectRelatedPins (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AutoFileName (
        enum TxAutoFileName * Value ) = 0;
    virtual HRESULT __stdcall put_AutoFileName (
        enum TxAutoFileName Value ) = 0;
    virtual HRESULT __stdcall get_AutoFileNameMinDigits (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_AutoFileNameMinDigits (
        long Value ) = 0;
    virtual HRESULT __stdcall get_AutoFilePrefix (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_AutoFilePrefix (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_AutoRefreshPreview (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AutoRefreshPreview (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AutoStartPlayer (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AutoStartPlayer (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AVIFormatOpenDML (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AVIFormatOpenDML (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AVIFormatOpenDMLCompatibilityIndex (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_AVIFormatOpenDMLCompatibilityIndex (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_BackgroundColor (
        OLE_COLOR * Value ) = 0;
    virtual HRESULT __stdcall put_BackgroundColor (
        OLE_COLOR Value ) = 0;
    virtual HRESULT __stdcall get_BorderStyle (
        enum TxBorderStyle * Value ) = 0;
    virtual HRESULT __stdcall put_BorderStyle (
        enum TxBorderStyle Value ) = 0;
    virtual HRESULT __stdcall get_BurstCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_BurstCount (
        long Value ) = 0;
    virtual HRESULT __stdcall get_BurstInterval (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_BurstInterval (
        long Value ) = 0;
    virtual HRESULT __stdcall get_BurstMode (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_BurstMode (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_BurstType (
        enum TxFrameCaptureDest * Value ) = 0;
    virtual HRESULT __stdcall put_BurstType (
        enum TxFrameCaptureDest Value ) = 0;
    virtual HRESULT __stdcall get_CameraControlSettings (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_CameraControlSettings (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_CaptureFileExt (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_CaptureFileExt (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_ColorKey (
        OLE_COLOR * Value ) = 0;
    virtual HRESULT __stdcall put_ColorKey (
        OLE_COLOR Value ) = 0;
    virtual HRESULT __stdcall get_ColorKeyEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ColorKeyEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_CompressionMode (
        enum TxCompressionMode * Value ) = 0;
    virtual HRESULT __stdcall put_CompressionMode (
        enum TxCompressionMode Value ) = 0;
    virtual HRESULT __stdcall get_CompressionType (
        enum TxCompressionType * Value ) = 0;
    virtual HRESULT __stdcall put_CompressionType (
        enum TxCompressionType Value ) = 0;
    virtual HRESULT __stdcall get_Display_Active (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Display_Active (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Display_AlphaBlendEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Display_AlphaBlendEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Display_AlphaBlendValue (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Display_AlphaBlendValue (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Display_AutoSize (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Display_AutoSize (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Display_AspectRatio (
        enum TxAspectRatio * Value ) = 0;
    virtual HRESULT __stdcall put_Display_AspectRatio (
        enum TxAspectRatio Value ) = 0;
    virtual HRESULT __stdcall get_Display_Embedded (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Display_Embedded (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Display_FullScreen (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Display_FullScreen (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Display_Height (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Display_Height (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Display_Left (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Display_Left (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Display_Monitor (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Display_Monitor (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Display_MouseMovesWindow (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Display_MouseMovesWindow (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Display_PanScanRatio (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Display_PanScanRatio (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Display_StayOnTop (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Display_StayOnTop (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Display_Top (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Display_Top (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Display_TransparentColorEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Display_TransparentColorEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Display_TransparentColorValue (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Display_TransparentColorValue (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Display_VideoPortEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Display_VideoPortEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Display_Visible (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Display_Visible (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Display_Width (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Display_Width (
        long Value ) = 0;
    virtual HRESULT __stdcall get_DoubleBuffered (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DoubleBuffered (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DroppedFramesPollingInterval (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_DroppedFramesPollingInterval (
        long Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_Active (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_Active (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_AlphaBlendEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_AlphaBlendEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_AlphaBlendValue (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_AlphaBlendValue (
        long Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_TransparentColorEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_TransparentColorEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_TransparentColorValue (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_TransparentColorValue (
        long Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_AutoSize (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_AutoSize (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_AspectRatio (
        enum TxAspectRatio * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_AspectRatio (
        enum TxAspectRatio Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_Embedded (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_Embedded (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_FullScreen (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_FullScreen (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_Height (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_Height (
        long Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_Left (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_Left (
        long Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_Monitor (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_Monitor (
        long Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_MouseMovesWindow (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_MouseMovesWindow (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_PanScanRatio (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_PanScanRatio (
        long Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_StayOnTop (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_StayOnTop (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_Top (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_Top (
        long Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_VideoPortEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_VideoPortEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_Visible (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_Visible (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DualDisplay_Width (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_DualDisplay_Width (
        long Value ) = 0;
    virtual HRESULT __stdcall get_DVDateTimeEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DVDateTimeEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DVDTitle (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_DVDTitle (
        long Value ) = 0;
    virtual HRESULT __stdcall get_DVDiscontinuityMinimumInterval (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_DVDiscontinuityMinimumInterval (
        long Value ) = 0;
    virtual HRESULT __stdcall get_DVEncoder_VideoFormat (
        enum TxDVVideoFormat * Value ) = 0;
    virtual HRESULT __stdcall put_DVEncoder_VideoFormat (
        enum TxDVVideoFormat Value ) = 0;
    virtual HRESULT __stdcall get_DVEncoder_VideoResolution (
        enum TxDVSize * Value ) = 0;
    virtual HRESULT __stdcall put_DVEncoder_VideoResolution (
        enum TxDVSize Value ) = 0;
    virtual HRESULT __stdcall get_DVEncoder_VideoStandard (
        enum TxDVVideoStandard * Value ) = 0;
    virtual HRESULT __stdcall put_DVEncoder_VideoStandard (
        enum TxDVVideoStandard Value ) = 0;
    virtual HRESULT __stdcall get_DVRgb219 (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DVRgb219 (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DVReduceFrameRate (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DVReduceFrameRate (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DVRecordingInNativeFormatSeparatesStreams (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DVRecordingInNativeFormatSeparatesStreams (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_DVTimeCodeEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_DVTimeCodeEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_EventNotificationSynchrone (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_EventNotificationSynchrone (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Cropping_Enabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Cropping_Enabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Cropping_Height (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Cropping_Height (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Cropping_Outbounds (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Cropping_Outbounds (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Cropping_Width (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Cropping_Width (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Cropping_X (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Cropping_X (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Cropping_Y (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Cropping_Y (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Cropping_Zoom (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_Cropping_Zoom (
        double Value ) = 0;
    virtual HRESULT __stdcall get_FixFlickerOrBlackCapture (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_FixFlickerOrBlackCapture (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_FrameCaptureWithoutOverlay (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_FrameCaptureWithoutOverlay (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_FrameCaptureHeight (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_FrameCaptureHeight (
        long Value ) = 0;
    virtual HRESULT __stdcall get_FrameCaptureWidth (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_FrameCaptureWidth (
        long Value ) = 0;
    virtual HRESULT __stdcall get_FrameCaptureZoomSize (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_FrameCaptureZoomSize (
        long Value ) = 0;
    virtual HRESULT __stdcall get_FrameGrabber (
        enum TxFrameGrabber * Value ) = 0;
    virtual HRESULT __stdcall put_FrameGrabber (
        enum TxFrameGrabber Value ) = 0;
    virtual HRESULT __stdcall get_FrameGrabberRGBFormat (
        enum TxFrameGrabberRGBFormat * Value ) = 0;
    virtual HRESULT __stdcall put_FrameGrabberRGBFormat (
        enum TxFrameGrabberRGBFormat Value ) = 0;
    virtual HRESULT __stdcall get_FrameNumberStartsFromZero (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_FrameNumberStartsFromZero (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_FrameRate (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_FrameRate (
        double Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_AlphaBlend (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_AlphaBlend (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_AlphaBlendValue (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_AlphaBlendValue (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_ChromaKey (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_ChromaKey (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_ChromaKeyLeewayPercent (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_ChromaKeyLeewayPercent (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_ChromaKeyRGBColor (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_ChromaKeyRGBColor (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_Height (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_Height (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_LeftLocation (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_LeftLocation (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_RotationAngle (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_RotationAngle (
        double Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_StretchToVideoSize (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_StretchToVideoSize (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_TopLocation (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_TopLocation (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_Transparent (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_Transparent (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_TransparentColorValue (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_TransparentColorValue (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_UseTransparentColor (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_UseTransparentColor (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlay_Width (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlay_Width (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ImageOverlayEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ImageOverlayEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_IPCameraURL (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_IPCameraURL (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_JPEGPerformance (
        enum TxJPEGPerformance * Value ) = 0;
    virtual HRESULT __stdcall put_JPEGPerformance (
        enum TxJPEGPerformance Value ) = 0;
    virtual HRESULT __stdcall get_JPEGProgressiveDisplay (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_JPEGProgressiveDisplay (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_JPEGQuality (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_JPEGQuality (
        long Value ) = 0;
    virtual HRESULT __stdcall get_LicenseString (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_LicenseString (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_LogoDisplayed (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_LogoDisplayed (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_LogoLayout (
        enum TxLogoLayout * Value ) = 0;
    virtual HRESULT __stdcall put_LogoLayout (
        enum TxLogoLayout Value ) = 0;
    virtual HRESULT __stdcall get_MixAudioSamples_CurrentSourceLevel (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_MixAudioSamples_CurrentSourceLevel (
        long Value ) = 0;
    virtual HRESULT __stdcall get_MixAudioSamples_ExternalSourceLevel (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_MixAudioSamples_ExternalSourceLevel (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Mixer_MosaicColumns (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Mixer_MosaicColumns (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Mixer_MosaicLines (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Mixer_MosaicLines (
        long Value ) = 0;
    virtual HRESULT __stdcall get_MotionDetector_CompareBlue (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_MotionDetector_CompareBlue (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_MotionDetector_CompareGreen (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_MotionDetector_CompareGreen (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_MotionDetector_GreyScale (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_MotionDetector_GreyScale (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_MotionDetector_CompareRed (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_MotionDetector_CompareRed (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_MotionDetector_Enabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_MotionDetector_Enabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_MotionDetector_Grid (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_MotionDetector_Grid (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_MotionDetector_MaxDetectionsPerSecond (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_MotionDetector_MaxDetectionsPerSecond (
        double Value ) = 0;
    virtual HRESULT __stdcall get_MotionDetector_ReduceCPULoad (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_MotionDetector_ReduceCPULoad (
        long Value ) = 0;
    virtual HRESULT __stdcall get_MotionDetector_ReduceVideoNoise (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_MotionDetector_ReduceVideoNoise (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_MotionDetector_Triggered (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_MotionDetector_Triggered (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_MouseWheelEventEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_MouseWheelEventEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_MultiplexedInputEmulation (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_MultiplexedInputEmulation (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_MultiplexedRole (
        enum TxMultiplexedRole * Value ) = 0;
    virtual HRESULT __stdcall put_MultiplexedRole (
        enum TxMultiplexedRole Value ) = 0;
    virtual HRESULT __stdcall get_MultiplexedSwitchDelay (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_MultiplexedSwitchDelay (
        long Value ) = 0;
    virtual HRESULT __stdcall get_MultiplexedStabilizationDelay (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_MultiplexedStabilizationDelay (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Multiplexer (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Multiplexer (
        long Value ) = 0;
    virtual HRESULT __stdcall get_MuteAudioRendering (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_MuteAudioRendering (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_NetworkStreaming (
        enum TxNetworkStreaming * Value ) = 0;
    virtual HRESULT __stdcall put_NetworkStreaming (
        enum TxNetworkStreaming Value ) = 0;
    virtual HRESULT __stdcall get_NetworkStreamingType (
        enum TxNetworkStreamingType * Value ) = 0;
    virtual HRESULT __stdcall put_NetworkStreamingType (
        enum TxNetworkStreamingType Value ) = 0;
    virtual HRESULT __stdcall get_NotificationMethod (
        enum TxNotificationMethod * Value ) = 0;
    virtual HRESULT __stdcall put_NotificationMethod (
        enum TxNotificationMethod Value ) = 0;
    virtual HRESULT __stdcall get_NotificationSleepTime (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_NotificationSleepTime (
        long Value ) = 0;
    virtual HRESULT __stdcall get_NotificationPriority (
        enum TxThreadPriority * Value ) = 0;
    virtual HRESULT __stdcall put_NotificationPriority (
        enum TxThreadPriority Value ) = 0;
    virtual HRESULT __stdcall get_OverlayAfterTransform (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_OverlayAfterTransform (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_OverlayEventCallbackAllowed (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_OverlayEventCallbackAllowed (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_PlayerAudioRendering (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_PlayerAudioRendering (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_PlayerDVSize (
        enum TxDVSize * Value ) = 0;
    virtual HRESULT __stdcall put_PlayerDVSize (
        enum TxDVSize Value ) = 0;
    virtual HRESULT __stdcall get_PlayerFastSeekSpeedRatio (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_PlayerFastSeekSpeedRatio (
        long Value ) = 0;
    virtual HRESULT __stdcall get_PlayerFileName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_PlayerFileName (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_PlayerForcedCodec (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_PlayerForcedCodec (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_PlayerRefreshPausedDisplay (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_PlayerRefreshPausedDisplay (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_PlayerRefreshPausedDisplayFrameRate (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_PlayerRefreshPausedDisplayFrameRate (
        double Value ) = 0;
    virtual HRESULT __stdcall get_PlayerSpeedRatio (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_PlayerSpeedRatio (
        double Value ) = 0;
    virtual HRESULT __stdcall get_PlayerTrackBarSynchrone (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_PlayerTrackBarSynchrone (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_PreallocCapFileCopiedAfterRecording (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_PreallocCapFileCopiedAfterRecording (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_PreallocCapFileEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_PreallocCapFileEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_PreallocCapFileName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_PreallocCapFileName (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_PreallocCapFileSizeInMB (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_PreallocCapFileSizeInMB (
        long Value ) = 0;
    virtual HRESULT __stdcall get_PreviewZoomSize (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_PreviewZoomSize (
        long Value ) = 0;
    virtual HRESULT __stdcall get_RecordingAudioBitRate (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_RecordingAudioBitRate (
        long Value ) = 0;
    virtual HRESULT __stdcall get_RecordingVideoBitRate (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_RecordingVideoBitRate (
        long Value ) = 0;
    virtual HRESULT __stdcall get_RecordingFileName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_RecordingFileName (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_RecordingInNativeFormat (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_RecordingInNativeFormat (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_RecordingMethod (
        enum TxRecordingMethod * Value ) = 0;
    virtual HRESULT __stdcall put_RecordingMethod (
        enum TxRecordingMethod Value ) = 0;
    virtual HRESULT __stdcall get_RecordingPauseCreatesNewFile (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_RecordingPauseCreatesNewFile (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_RecordingOnMotion_Enabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_RecordingOnMotion_Enabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_RecordingOnMotion_MotionThreshold (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_RecordingOnMotion_MotionThreshold (
        double Value ) = 0;
    virtual HRESULT __stdcall get_RecordingTimer (
        enum TxRecordingTimer * Value ) = 0;
    virtual HRESULT __stdcall put_RecordingTimer (
        enum TxRecordingTimer Value ) = 0;
    virtual HRESULT __stdcall get_RecordingTimerInterval (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_RecordingTimerInterval (
        long Value ) = 0;
    virtual HRESULT __stdcall get_RecordingOnMotion_NoMotionPauseDelayMs (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_RecordingOnMotion_NoMotionPauseDelayMs (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_NewVideoClip (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_NewVideoClip (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_SourceVideoClip (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_SourceVideoClip (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_StartTime (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_StartTime (
        double Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_StartFrame (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_StartFrame (
        double Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_StopTime (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_StopTime (
        double Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_StopFrame (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_StopFrame (
        double Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_IncludeAudioStream (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_IncludeAudioStream (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_IncludeVideoStream (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_IncludeVideoStream (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_Method (
        enum TxRecordingMethod * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_Method (
        enum TxRecordingMethod Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_UseAudioCompressor (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_UseAudioCompressor (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_UseFrameGrabber (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_UseFrameGrabber (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_UseVideoCompressor (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_UseVideoCompressor (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Reencoding_WMVOutput (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Reencoding_WMVOutput (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_RawSampleCaptureLocation (
        enum TxRawSampleCaptureLocation * Value ) = 0;
    virtual HRESULT __stdcall put_RawSampleCaptureLocation (
        enum TxRawSampleCaptureLocation Value ) = 0;
    virtual HRESULT __stdcall get_RawVideoSampleCapture (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_RawVideoSampleCapture (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_RawAudioSampleCapture (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_RawAudioSampleCapture (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_RawCaptureAsyncEvent (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_RawCaptureAsyncEvent (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_RecordingSize (
        enum TxRecordingSize * Value ) = 0;
    virtual HRESULT __stdcall put_RecordingSize (
        enum TxRecordingSize Value ) = 0;
    virtual HRESULT __stdcall get_ScreenRecordingMonitor (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ScreenRecordingMonitor (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ScreenRecordingNonVisibleWindows (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ScreenRecordingNonVisibleWindows (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ScreenRecordingThroughClipboard (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ScreenRecordingThroughClipboard (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ScreenRecordingWithCursor (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ScreenRecordingWithCursor (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ShapeOverlayEnabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ShapeOverlayEnabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_SpeakerControl (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_SpeakerControl (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_StoragePath (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_StoragePath (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_StoreDeviceSettingsInRegistry (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_StoreDeviceSettingsInRegistry (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_SynchronizationRole (
        enum TxSynchronizationRole * Value ) = 0;
    virtual HRESULT __stdcall put_SynchronizationRole (
        enum TxSynchronizationRole Value ) = 0;
    virtual HRESULT __stdcall get_Synchronized (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Synchronized (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_SyncCommands (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_SyncCommands (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_SyncPreview (
        enum TxSyncPreview * Value ) = 0;
    virtual HRESULT __stdcall put_SyncPreview (
        enum TxSyncPreview Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_Enabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_Enabled (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_Left (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_Left (
        long Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_Top (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_Top (
        long Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_Right (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_Right (
        long Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_ScrollingSpeed (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_ScrollingSpeed (
        long Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_Shadow (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_Shadow (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_ShadowColor (
        OLE_COLOR * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_ShadowColor (
        OLE_COLOR Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_ShadowDirection (
        enum TxCardinalDirection * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_ShadowDirection (
        enum TxCardinalDirection Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_BkColor (
        OLE_COLOR * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_BkColor (
        OLE_COLOR Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_Align (
        enum TxTextOverlayAlign * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_Align (
        enum TxTextOverlayAlign Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_FontColor (
        OLE_COLOR * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_FontColor (
        OLE_COLOR Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_String (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_String (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_TextOverlay_Transparent (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_TextOverlay_Transparent (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ThirdPartyDeinterlacer (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_ThirdPartyDeinterlacer (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_TranslateMouseCoordinates (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_TranslateMouseCoordinates (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_TVUseFrequencyOverrides (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_TVUseFrequencyOverrides (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_TunerFrequency (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_TunerFrequency (
        long Value ) = 0;
    virtual HRESULT __stdcall get_UseClock (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_UseClock (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Version (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Version (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_VideoDevice (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoDevice (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoCompression_DataRate (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoCompression_DataRate (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoCompression_KeyFrameRate (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoCompression_KeyFrameRate (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoCompression_PFramesPerKeyFrame (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoCompression_PFramesPerKeyFrame (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoCompression_Quality (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_VideoCompression_Quality (
        double Value ) = 0;
    virtual HRESULT __stdcall get_VideoCompression_WindowSize (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoCompression_WindowSize (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoCompressor (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoCompressor (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoControlSettings (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_VideoControlSettings (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_VideoFormat (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoFormat (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoFromImages_BitmapsSortedBy (
        enum TxFileSort * Value ) = 0;
    virtual HRESULT __stdcall put_VideoFromImages_BitmapsSortedBy (
        enum TxFileSort Value ) = 0;
    virtual HRESULT __stdcall get_VideoFromImages_RepeatIndefinitely (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_VideoFromImages_RepeatIndefinitely (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_VideoFromImages_SourceDirectory (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_VideoFromImages_SourceDirectory (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_VideoFromImages_TemporaryFile (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_VideoFromImages_TemporaryFile (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_VideoInput (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoInput (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoProcessing_Brightness (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoProcessing_Brightness (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoProcessing_Contrast (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoProcessing_Contrast (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoProcessing_Deinterlacing (
        enum TxVideoDeinterlacing * Value ) = 0;
    virtual HRESULT __stdcall put_VideoProcessing_Deinterlacing (
        enum TxVideoDeinterlacing Value ) = 0;
    virtual HRESULT __stdcall get_VideoProcessing_FlipHorizontal (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_VideoProcessing_FlipHorizontal (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_VideoProcessing_FlipVertical (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_VideoProcessing_FlipVertical (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_VideoProcessing_GrayScale (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_VideoProcessing_GrayScale (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_VideoProcessing_Hue (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoProcessing_Hue (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoProcessing_InvertColors (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_VideoProcessing_InvertColors (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_VideoProcessing_Pixellization (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoProcessing_Pixellization (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoProcessing_Saturation (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoProcessing_Saturation (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoProcessing_Rotation (
        enum TxVideoRotation * Value ) = 0;
    virtual HRESULT __stdcall put_VideoProcessing_Rotation (
        enum TxVideoRotation Value ) = 0;
    virtual HRESULT __stdcall get_VideoProcessing_RotationCustomAngle (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_VideoProcessing_RotationCustomAngle (
        double Value ) = 0;
    virtual HRESULT __stdcall get_VideoQualitySettings (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_VideoQualitySettings (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_VideoRenderer (
        enum TxVideoRenderer * Value ) = 0;
    virtual HRESULT __stdcall put_VideoRenderer (
        enum TxVideoRenderer Value ) = 0;
    virtual HRESULT __stdcall get_VideoRendererExternal (
        enum TxVideoRendererExternal * Value ) = 0;
    virtual HRESULT __stdcall put_VideoRendererExternal (
        enum TxVideoRendererExternal Value ) = 0;
    virtual HRESULT __stdcall get_VideoRendererExternalIndex (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoRendererExternalIndex (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoSize (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoSize (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoSource (
        enum TxVideoSource * Value ) = 0;
    virtual HRESULT __stdcall put_VideoSource (
        enum TxVideoSource Value ) = 0;
    virtual HRESULT __stdcall get_VideoSource_FileOrURL (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_VideoSource_FileOrURL (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_VideoSource_FileOrURL_StartTime (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_VideoSource_FileOrURL_StartTime (
        double Value ) = 0;
    virtual HRESULT __stdcall get_VideoSource_FileOrURL_StopTime (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_VideoSource_FileOrURL_StopTime (
        double Value ) = 0;
    virtual HRESULT __stdcall get_VideoSubtype (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VideoSubtype (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VideoVisibleWhenStopped (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_VideoVisibleWhenStopped (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_VirtualVideoStreamControl (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VirtualVideoStreamControl (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VirtualAudioStreamControl (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_VirtualAudioStreamControl (
        long Value ) = 0;
    virtual HRESULT __stdcall get_VuMeter (
        enum TxVuMeter * Value ) = 0;
    virtual HRESULT __stdcall put_VuMeter (
        enum TxVuMeter Value ) = 0;
    virtual HRESULT __stdcall get_WebcamStillCaptureButton (
        enum TxWebcamStillCaptureButton * Value ) = 0;
    virtual HRESULT __stdcall put_WebcamStillCaptureButton (
        enum TxWebcamStillCaptureButton Value ) = 0;
    virtual HRESULT __stdcall get_ZoomCoeff (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ZoomCoeff (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ZoomXCenter (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ZoomXCenter (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ZoomYCenter (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ZoomYCenter (
        long Value ) = 0;
    virtual HRESULT __stdcall get_ParentBackground (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ParentBackground (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_AlignDisabled (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall get_VisibleDockClientCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_DrawTextBiDiModeFlagsReadingOnly (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_InitiateAction ( ) = 0;
    virtual HRESULT __stdcall raw_IsRightToLeft (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_UseRightToLeftReading (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_UseRightToLeftScrollBar (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall raw_SetSubComponent (
        VARIANT_BOOL IsSubComponent ) = 0;
    virtual HRESULT __stdcall raw_AboutBox ( ) = 0;
};

struct __declspec(uuid("5ee7e058-1a02-402a-a953-47afde5f1e91"))
IVideoGrabberVC6Events : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnResize ( );
    HRESULT OnCanResize (
        long * NewWidth,
        long * NewHeight,
        VARIANT_BOOL * Resize );
    HRESULT OnConstrainedResize (
        long * MinWidth,
        long * MinHeight,
        long * MaxWidth,
        long * MaxHeight );
    HRESULT OnAVIDurationUpdated (
        _bstr_t FileName,
        long Frames,
        double * FrameRate,
        double * Duration );
    HRESULT OnAudioDeviceSelected ( );
    HRESULT OnAudioPeak (
        double Left_Percent,
        double Left_DB,
        double Right_Percent,
        double Right_DB );
    HRESULT OnBacktimedFramesCountReached ( );
    HRESULT OnBitmapsLoadingProgress (
        long Percent,
        double Position,
        double Duration,
        _bstr_t Comment );
    HRESULT OnClick ( );
    HRESULT OnDblClick ( );
    HRESULT OnClientConnection (
        VARIANT_BOOL Connected,
        _bstr_t ClientInfo );
    HRESULT OnColorKeyChange (
        OLE_COLOR ColorKey );
    HRESULT OnCopyPreallocDataCompleted (
        _bstr_t SourceFile,
        _bstr_t DestFile,
        VARIANT_BOOL Success );
    HRESULT OnCopyPreallocDataProgress (
        long Percent,
        double Position,
        double Duration );
    HRESULT OnCopyPreallocDataStarted (
        _bstr_t SourceFile,
        _bstr_t DestFile );
    HRESULT OnCreatePreallocFileCompleted (
        _bstr_t FileName,
        VARIANT_BOOL Success );
    HRESULT OnCreatePreallocFileProgress (
        long Percent,
        double Position,
        double Duration );
    HRESULT OnCreatePreallocFileStarted (
        _bstr_t FileName );
    HRESULT OnDeviceArrivalOrRemoval (
        VARIANT_BOOL IsDeviceArrival,
        VARIANT_BOOL IsVideoDevice,
        _bstr_t DeviceName,
        long DeviceIndex );
    HRESULT OnDeviceLost ( );
    HRESULT OnDirectNetworkStreamingHostUrl (
        _bstr_t HostUrl,
        _bstr_t HostName,
        long HostPort );
    HRESULT OnDiskFull ( );
    HRESULT OnDVDiscontinuity (
        VARIANT_BOOL * DeliverNewFrame );
    HRESULT OnDVCommandCompleted (
        long NewStateValue,
        _bstr_t NewStateLabel );
    HRESULT OnEnumerateWindows (
        long WindowHandle,
        _bstr_t WindowName,
        _bstr_t WindowClass );
    HRESULT OnFilterSelected (
        _bstr_t FilterName,
        VARIANT_BOOL * RejectFilter );
    HRESULT OnFirstFrameReceived ( );
    HRESULT OnFrameBitmap (
        long FrameInfo,
        long BitmapInfo );
    HRESULT OnFrameCaptureCompleted (
        long FrameBitmapHandle,
        long BitmapWidth,
        long BitmapHeight,
        long FrameNumber,
        double FrameTime,
        enum TxFrameCaptureDest DestType,
        _bstr_t FileName,
        VARIANT_BOOL Success,
        long FrameId );
    HRESULT OnFrameOverlayUsingDC (
        long Dc,
        long FrameNumber,
        double FrameTime,
        long FrameId );
    HRESULT OnFrameOverlayUsingDIB (
        long FrameBitmapHandle,
        long FrameNumber,
        double FrameTime,
        long FrameId );
    HRESULT OnFrameProgress (
        long FrameNumber,
        double FrameTime,
        long FrameId );
    HRESULT OnFrameProgress2 (
        long FrameInfo );
    HRESULT OnGraphBuilt ( );
    HRESULT OnInactive ( );
    HRESULT OnLastCommandCompleted ( );
    HRESULT OnKeyPress (
        long VideoWindow,
        short * Key,
        long PhysicalKey );
    HRESULT OnLog (
        enum TxLogType LogType,
        _bstr_t Severity,
        _bstr_t InfoMsg );
    HRESULT OnMotionDetected (
        double GlobalMotionRatio,
        long MaxMotionCellX,
        long MaxMotionCellY,
        long FrameBitmapHandle,
        long FrameNumber,
        double FrameTime,
        long FrameId,
        VARIANT_BOOL * CaptureFrame );
    HRESULT OnMotionNotDetected (
        long FrameBitmapHandle,
        long FrameNumber,
        double FrameTime,
        long FrameId,
        VARIANT_BOOL * CaptureFrame );
    HRESULT OnMouseDown (
        long VideoWindow,
        enum TxMouseButton Button,
        long x,
        long y );
    HRESULT OnMouseMove (
        long VideoWindow,
        long x,
        long y );
    HRESULT OnMouseUp (
        long VideoWindow,
        enum TxMouseButton Button,
        long x,
        long y );
    HRESULT OnMouseWheel (
        long VideoWindow,
        VARIANT_BOOL DirectionUp,
        long x,
        long y );
    HRESULT OnNoVideoDevices ( );
    HRESULT OnPlayerBufferingData (
        VARIANT_BOOL StartingToBuffer );
    HRESULT OnPlayerEndOfPlaylist ( );
    HRESULT OnPlayerEndOfStream ( );
    HRESULT OnPlayerOpened ( );
    HRESULT OnPlayerUpdateTrackbarPosition (
        long FrameNumber,
        double FrameTime,
        long FrameId );
    HRESULT OnPreviewStarted ( );
    HRESULT OnPlayerStateChanged (
        enum TxPlayerState OldPlayerState,
        enum TxPlayerState NewPlayerState );
    HRESULT OnAuthenticationNeeded (
        enum TxAuthenticationType AuthenticationType,
        _bstr_t Realm,
        _bstr_t Server,
        BSTR * UserName,
        BSTR * Password );
    HRESULT OnRawAudioSample (
        long pSampleBuffer,
        long SampleBufferSize,
        long SampleDataLength,
        enum TxFormatType FormatType,
        long pFormat,
        long pWaveFormatEx,
        double SampleStartTime,
        double SampleStopTime );
    HRESULT OnRawVideoSample (
        long pSampleBuffer,
        long SampleBufferSize,
        long SampleDataLength,
        enum TxFormatType FormatType,
        long pFormat,
        long pBitmapInfoHeader,
        double SampleStartTime,
        double SampleStopTime );
    HRESULT OnRecordingCompleted (
        _bstr_t FileName,
        VARIANT_BOOL Success );
    HRESULT OnRecordingPaused ( );
    HRESULT OnRecordingReadyToStart ( );
    HRESULT OnRecordingStarted (
        _bstr_t FileName );
    HRESULT OnReencodingCompleted (
        _bstr_t SourceFile,
        _bstr_t DestFile,
        VARIANT_BOOL Success );
    HRESULT OnReencodingProgress (
        long Percent,
        double Position,
        double Duration );
    HRESULT OnReencodingStarted (
        _bstr_t SourceFile,
        _bstr_t DestFile );
    HRESULT OnReinitializing ( );
    HRESULT OnResizeVideo (
        long SourceWidth,
        long SourceHeight );
    HRESULT OnTextOverlayScrollingCompleted (
        long TextOverlayIndex );
    HRESULT OnTVChannelScanCompleted ( );
    HRESULT OnTVChannelScanStarted (
        long MinChannel,
        long MaxChannel );
    HRESULT OnTVChannelSelected (
        long Channel,
        VARIANT_BOOL Locked,
        long DefaultVideoFrequency,
        long OverriddenVideoFrequency,
        long TunerVideoFrequency,
        long TunerAudioFrequency );
    HRESULT OnVideoCompressionSettings (
        VARIANT_BOOL CanKeyFrameRate,
        VARIANT_BOOL CanPFramesPerKeyFrame,
        VARIANT_BOOL CanQuality,
        VARIANT_BOOL CanWindowSize,
        VARIANT_BOOL CanSpecifyDataRate,
        long DefaultFrameRate,
        long DefaultPFramesPerKey,
        double DefaultQuality,
        long DefaultWindowSize,
        long DefaultDataRate );
    HRESULT OnVideoDeviceSelected ( );
    HRESULT OnVideoFromBitmapsNextFrameNeeded (
        VARIANT_BOOL FirstSample );
};

struct __declspec(uuid("c0befc8f-0dc6-49e2-9c7d-daf838954f22"))
VideoGrabberVC6;
    // [ default ] interface IVideoGrabberVC6
    // [ default, source ] dispinterface IVideoGrabberVC6Events

enum TxCursors
{
    cr_Default = 0,
    cr_None = 1,
    cr_Arrow = 2,
    cr_cross = 3,
    cr_IBeam = 4,
    cr_Size = 5,
    cr_SizeNESW = 6,
    cr_SizeNS = 7,
    cr_SizeNWSE = 8,
    cr_SizeWE = 9,
    cr_UpArrow = 10,
    cr_HourGlass = 11,
    cr_Drag = 12,
    cr_NoDrop = 13,
    cr_HSplit = 14,
    cr_VSplit = 15,
    cr_MultiDrag = 16,
    cr_SQLWait = 17,
    cr_No = 18,
    cr_AppStart = 19,
    cr_Help = 20,
    cr_HandPoint = 21,
    cr_SizeAll = 22
};

enum TxCurrentState
{
    cs_Down = 0,
    cs_Preview = 1,
    cs_Recording = 2,
    cs_Playback = 3,
    cs_Reencoding = 4
};

enum TxFrameGrabberRGBFormat
{
    fgf_Default = 0,
    fgf_RGB32 = 1,
    fgf_RGB24 = 2,
    fgf_RGB565 = 3,
    fgf_RGB555 = 4,
    fgf_RGB8 = 5
};

enum TxTriState
{
    ts_Undefined = 0,
    ts_False = 1,
    ts_True = 2
};

enum TxMpegStreamType
{
    mpst_Default = 0,
    mpst_Program = 1,
    mpst_Program_DVD = 2,
    mpst_Program_DVD_MC = 3,
    mpst_Program_SVCD = 4,
    mpst_MPEG1 = 5,
    mpst_MPEG1_VCD = 6
};

enum TxPlayerState
{
    ps_Closed = 0,
    ps_Stopped = 1,
    ps_Paused = 2,
    ps_Playing = 3,
    ps_PlayingBackward = 4,
    ps_FastForwarding = 5,
    ps_FastRewinding = 6,
    ps_Downloading = 7,
    ps_DownloadCompleted = 8,
    ps_DownloadCancelled = 9
};

enum TxTunerInputType
{
    TunerInputCable = 0,
    TunerInputAntenna = 1
};

enum TxTunerMode
{
    tm_TVTuner = 0,
    tm_FMRadioTuner = 1,
    tm_AMRadioTuner = 2,
    tm_DigitalSatelliteTuner = 3
};

enum TxAVIInfoType
{
    av_Duration = 0,
    av_FrameCount = 1,
    av_VideoWidth = 2,
    av_VideoHeight = 3,
    av_VideoFrameRateFps = 4,
    av_VideoCodec = 5,
    av_AudioCodec = 6,
    av_AvgBitRate = 7,
    av_AudioChannels = 8,
    av_AudioSamplesPerSec = 9,
    av_AudioBitsPerSample = 10,
    av_FileSizeInKB = 11,
    av_AudioStreams = 12
};

enum TxHeaderAttribute
{
    ha_Title = 0,
    ha_Description = 1,
    ha_Author = 2,
    ha_Copyright = 3,
    ha_AlbumArtist = 4,
    ha_AlbumTitle = 5,
    ha_Composer = 6,
    ha_ContentDistributor = 7,
    ha_Director = 8,
    ha_EncodingTime = 9,
    ha_Genre = 10,
    ha_Language = 11,
    ha_ParentalRating = 12,
    ha_Producer = 13,
    ha_Provider = 14,
    ha_ToolName = 15,
    ha_ToolVersion = 16,
    ha_Writer = 17,
    ha_IARL = 18,
    ha_ICMS = 19,
    ha_ICMT = 20,
    ha_ICRD = 21,
    ha_ICRP = 22,
    ha_IDIM = 23,
    ha_IDPI = 24,
    ha_IENG = 25,
    ha_IGNR = 26,
    ha_IKEY = 27,
    ha_ILGT = 28,
    ha_IMED = 29,
    ha_IPLT = 30,
    ha_IPRD = 31,
    ha_ISFT = 32,
    ha_ISHP = 33,
    ha_ISRC = 34,
    ha_ISRF = 35,
    ha_ITCH = 36
};

enum TxCameraControl
{
    cc_Pan = 0,
    cc_Tilt = 1,
    cc_Roll = 2,
    cc_Zoom = 3,
    cc_Exposure = 4,
    cc_Iris = 5,
    cc_Focus = 6
};

enum TxFrameCaptureDest
{
    fc_TBitmap = 0,
    fc_BmpFile = 1,
    fc_JpegFile = 2,
    fc_Clipboard = 3
};

enum TxDVDInfoType
{
    dvd_NumberOfVolumes = 0,
    dvd_TotalDuration = 1,
    dvd_NumberOfTitles = 2,
    dvd_TitleDuration = 3,
    dvd_TitleFrameRate = 4,
    dvd_SourceResolutionX = 5,
    dvd_SourceResolutionY = 6,
    dvd_TitleFrameCount = 7
};

enum TxFrameInfoId
{
    fi_FrameNumber = 0,
    fi_DroppedFrameCount = 1,
    fi_SampleTime_Hour = 2,
    fi_SampleTime_Min = 3,
    fi_SampleTime_Sec = 4,
    fi_SampleTime_Hs = 5,
    fi_SampleTime_TotalMin = 6,
    fi_DVTimeCode_IsAvailable = 7,
    fi_DVTimeCode_Hour = 8,
    fi_DVTimeCode_Min = 9,
    fi_DVTimeCode_Sec = 10,
    fi_DVTimeCode_Ff = 11,
    fi_DVTimeCode_TrackNumber = 12,
    fi_DVDateTime_IsAvailable = 13,
    fi_DVDateTime_Year = 14,
    fi_DVDateTime_Month = 15,
    fi_DVDateTime_Day = 16,
    fi_DVDateTime_Hour = 17,
    fi_DVDateTime_Min = 18,
    fi_DVDateTime_Sec = 19
};

enum TxFrameInfoStringId
{
    fis_DVTimeCode = 0,
    fis_DVDateTime = 1,
    fis_TimeCode = 2,
    fis_FrameTime = 3,
    fis_FrameNumber = 4,
    fis_FullInfo = 5
};

enum TxMiscDeviceControl
{
    mdc_GPIO = 0,
    mdc_VPD = 1,
    mdc_VPD_Data = 2
};

enum TxLogType
{
    e_add_filter = 0,
    e_add_source_filter = 1,
    e_audio_compressor_not_suitable = 2,
    e_bind_moniker_to_filter = 3,
    e_compressor_possibly_not_suitable = 4,
    e_create_instance = 5,
    e_ddraw_caps_not_suitable = 6,
    e_device_in_use_in_another_graph = 7,
    e_disk_full = 8,
    e_failed = 9,
    e_failed_to_allocate_recording_file = 10,
    e_failed_to_bind_codec = 11,
    e_failed_to_connect_crossbar_pin = 12,
    e_failed_to_connect_to_server = 13,
    e_failed_to_create_directory = 14,
    e_failed_to_create_file = 15,
    e_failed_to_create_temp = 16,
    e_failed_to_bind_frame_grabber = 17,
    e_failed_to_load_ASF_profile = 18,
    e_failed_to_load_ASF_profile_custom_file = 19,
    e_failed_to_load_set_of_bitmaps = 20,
    e_failed_to_set_image_overlay = 21,
    e_failed_to_set_logo = 22,
    e_failed_to_play_backwards = 23,
    e_failed_to_render_file = 24,
    e_failed_to_renew_recording_file = 25,
    e_failed_to_set_player_speed_ratio_with_audio = 26,
    e_failed_to_setup_network_streaming = 27,
    e_failed_to_start_preview = 28,
    e_failed_to_start_recording = 29,
    e_file_in_use = 30,
    e_file_name_not_specified = 31,
    e_file_not_found = 32,
    e_get_audio_format = 33,
    e_get_interface = 34,
    e_get_video_format = 35,
    e_graph_error = 36,
    e_graph_cant_run = 37,
    e_graph_must_be_restarted = 38,
    e_hw_deinterlace_not_supported = 39,
    e_incompatible_options = 40,
    e_index_out_of_range = 41,
    e_invalid_directory = 42,
    e_library_not_found = 43,
    e_load_filter = 44,
    e_no_audio_input_device = 45,
    e_no_device_available = 46,
    e_no_dialog = 47,
    e_no_stream_control = 48,
    e_no_tv_tuner = 49,
    e_no_device_selected = 50,
    e_no_video_input_device = 51,
    e_not_allowed_during_network_streaming = 52,
    e_not_allowed_with_streaming_URL = 53,
    e_not_assigned = 54,
    e_not_multiplexed_master = 55,
    e_not_previewing = 56,
    e_not_recording = 57,
    e_not_reencoding = 58,
    e_not_streaming = 59,
    e_out_of_memory = 60,
    e_pause_resume_disabled = 61,
    e_pin_not_found = 62,
    e_interface_not_assigned = 63,
    e_query_config_avi_mux = 64,
    e_reencoding = 65,
    e_recording_cannot_pause = 66,
    e_render_audio_stream = 67,
    e_render_video_stream = 68,
    e_must_restart_master = 69,
    e_recording_on_motion_failed = 70,
    e_sendtodv_device_index_out_of_bound = 71,
    e_sendtodv_deviceindex_and_videodevice_have_same_value = 72,
    e_sendtodv_failed_to_bind_dv_device = 73,
    e_set_filter_graph = 74,
    e_set_interleaving_mode = 75,
    e_set_master_stream = 76,
    e_set_output_compatibility_index = 77,
    e_set_output_file_name = 78,
    e_set_format = 79,
    e_start_preview_first = 80,
    e_stop_player_first = 81,
    e_stop_preview_first = 82,
    e_stop_recording_first = 83,
    e_stop_reencoding_first = 84,
    e_storage_path_read_only = 85,
    e_streaming_type_not_specified = 86,
    e_third_party_filter_already_inserted = 87,
    e_third_party_filter_error = 88,
    e_trace_log = 89,
    e_tv_command_not_allowed_during_tv_tuning = 90,
    e_tuner_input_not_selected = 91,
    e_TVideoGrabber_Filter_obsolete = 92,
    e_value_out_of_range = 93,
    e_video_compressor_not_suitable = 94,
    e_window_transparency_failed = 95,
    e_invalid_size = 96,
    e_invalid_window_handle = 97,
    e_tuner_mode_not_supported = 98,
    e_publishing_point_connection_failed = 99,
    e_speaker_control_disabled = 100,
    i_audio_device_associated_to_video_device = 101,
    i_begin_discovering_device = 102,
    i_binding_device_or_compressor = 103,
    i_discovering_device = 104,
    i_end_discovering_device = 105,
    i_preallocated_file_size_large_enough = 106,
    i_preallocated_file_size_changed = 107,
    i_preallocated_file_not_suitable = 108,
    i_streaming_to_publishing_point = 109,
    i_third_party_filter_inserted = 110,
    i_using_ASF_Profile = 111,
    i_recording_videosubtype = 112,
    i_ismpegstream = 113,
    i_new_recording_filename = 114,
    i_using_property_group = 115,
    i_streaming_client_connected = 116,
    i_streaming_client_disconnected = 117,
    i_refreshing_preview = 118,
    i_recording_on_motion = 119,
    i_window_found = 120,
    i_limiting_preview = 121,
    i_codec_recommended = 122,
    i_tuner_mode = 123,
    i_DV_date_time_discontinuity = 124,
    w_cannot_connect_thirdparty_filter = 125,
    w_cannot_connect_thirdparty_renderer = 126,
    w_cannot_instantiate_thirdparty_filter = 127,
    w_cannot_route_crossbar = 128,
    w_cannot_use_color_key = 129,
    w_command_delayed = 130,
    w_does_not_apply_to_dv = 131,
    w_find_audio_device = 132,
    w_filter_does_not_save_properties = 133,
    w_frame_grabber_requires_CPU = 134,
    w_hold_recording = 135,
    w_information = 136,
    w_not_playing = 137,
    w_player_audio_should_be_disabled = 138,
    w_recording_cancelled_by_user = 139,
    w_can_pause_and_ASF_incompatible = 140,
    w_set_audio_format = 141,
    w_storage_path_on_network = 142,
    w_tv_tuner = 143,
    w_using_nearest_video_size = 144,
    w_divx_codec_not_installed = 145,
    w_codec_does_not_support_debugger = 146,
    w_divx_codec_profile = 147,
    w_device_partially_supported = 148,
    w_excessive_grid_size = 149,
    w_grid_too_large_for_dialog = 150,
    w_operation_may_lock = 151,
    w_audio_streaming_needs_audiorecording_property_enabled = 152,
    w_network_streaming_disabled = 153,
    w_server_lost_next_retry = 154,
    w_overlay_mixer_not_available = 155,
    w_network_streaming_change_requires_application_to_be_restarted = 156,
    w_standard_renderer_recommended = 157,
    w_window_transparency_and_recording_not_recommended = 158,
    w_clip_not_seekable = 159,
    w_only_WMV_recording_during_network_streaming = 160,
    w_check_analog_video_standard = 161,
    w_recording_timer_set = 162,
    w_stream_time_beyong_script_time = 163,
    w_generate_new_file = 164,
    w_hires_timer_not_available = 165,
    w_applies_to_the_current_recording_method = 166
};

enum TxTVChannelInfo
{
    tci_Channel = 0,
    tci_DefaultVideoFrequency = 1,
    tci_OverriddenVideoFrequency = 2,
    tci_TunerVideoFrequency = 3,
    tci_TunerAudioFrequency = 4,
    tci_Locked = 5
};

enum TxVMR9ImageAdjustment
{
    vmr9_Brightness = 0,
    vmr9_Contrast = 1,
    vmr9_Hue = 2,
    vmr9_Saturation = 3,
    vmr9_Alpha = 4
};

enum TxVUMeterSetting
{
    vu_Handle = 0,
    vu_WarningPercent = 1,
    vu_PeakPercent = 2,
    vu_BkgndColor = 3,
    vu_NormalColor = 4,
    vu_WarningColor = 5,
    vu_PeakColor = 6,
    vu_TickSize = 7,
    vu_TickInterval = 8,
    vu_NeedleThickness = 9
};

enum TxGraphState
{
    gs_Stopped = 0,
    gs_Paused = 1,
    gs_Running = 2
};

enum TxDialog
{
    dlg_VideoDevice = 0,
    dlg_VideoCompressor = 1,
    dlg_AudioCompressor = 2,
    dlg_StreamConfig = 3,
    dlg_VfwFormat = 4,
    dlg_VfwSource = 5,
    dlg_vfwDisplay = 6,
    dlg_VideoCrossbar = 7,
    dlg_AudioCrossbar = 8,
    dlg_TVTuner = 9,
    dlg_TVAudio = 10,
    dlg_AudioDevice = 11,
    dlg_NetShowConfig = 12,
    dlg_DScaler = 13,
    dlg_FFDShowVideo = 14,
    dlg_FFDShowAudio = 15,
    dlg_Multiplexer = 16,
    dlg_None = 17
};

enum TxVideoQuality
{
    vq_Brightness = 0,
    vq_Contrast = 1,
    vq_Hue = 2,
    vq_Saturation = 3,
    vq_Sharpness = 4,
    vq_Gamma = 5,
    vq_ColorEnable = 6,
    vq_WhiteBalance = 7,
    vq_BacklightCompensation = 8,
    vq_Gain = 9
};

enum TxVideoControl
{
    vc_FlipHorizontal = 0,
    vc_FlipVertical = 1,
    vc_ExternalTriggerEnable = 2,
    vc_Trigger = 3
};

enum TxFormatType
{
    ft_VideoInfo = 0,
    ft_VideoInfo2 = 1,
    ft_DvInfo = 2,
    ft_Mpeg1Video = 3,
    ft_Mpeg2Video = 4,
    ft_Mpeg1Stream = 5,
    ft_Mpeg2Stream = 6,
    ft_MpegStreamType = 7,
    ft_MpegCustom = 8,
    ft_WaveFormatEx = 9,
    ft_Mpeg1Audio = 10,
    ft_Mpeg2Audio = 11,
    ft_Mpeg3Audio = 12,
    ft_OGG = 13,
    ft_Unknown = 14
};

enum TxRGBSelector
{
    rs_Red = 0,
    rs_Green = 1,
    rs_Blue = 2
};

enum TxTrackbarAction
{
    tba_MouseDown = 0,
    tba_MouseUp = 1,
    tba_KeyDown = 2,
    tba_KeyUp = 3
};

enum TxPlaylist
{
    pl_Add = 0,
    pl_Remove = 1,
    pl_Clear = 2,
    pl_Loop = 3,
    pl_NoLoop = 4,
    pl_Play = 5,
    pl_Stop = 6,
    pl_Next = 7,
    pl_Previous = 8,
    pl_SortAlpha = 9,
    pl_SortRevAlpha = 10,
    pl_Random = 11,
    pl_Sequential = 12,
    pl_SpecifyPositions = 13,
    pl_Transition = 14
};

enum TxDVCommand
{
    dv_Play = 0,
    dv_Stop = 1,
    dv_Freeze = 2,
    dv_Thaw = 3,
    dv_Ff = 4,
    dv_Rew = 5,
    dv_Record = 6,
    dv_RecordFreeze = 7,
    dv_RecordStrobe = 8,
    dv_StepFwd = 9,
    dv_StepRev = 10,
    dv_ModeShuttle = 11,
    dv_PlayFastestFwd = 12,
    dv_PlaySlowestFwd = 13,
    dv_PlayFastestRev = 14,
    dv_PlaySlowestRev = 15
};

enum TxAuthenticationType
{
    at_PublishingPoint = 0,
    at_IPCamera = 1,
    at_StreamingUrl = 2
};

enum TxMPEGProgramSetting
{
    mps_Program_Number = 0,
    mps_Program_PCR_PID = 1,
    mps_VideoStream_PID = 2,
    mps_AudioStream_PID = 3,
    mps_ReceiveTimeoutInSeconds = 4
};

enum TxAVIMuxConfig
{
    avmx_SetInterleavingMode = 0,
    avmx_SetInterleave = 1,
    avmx_SetPreroll = 2
};

enum TxIPCameraSetting
{
    ips_ConnectionTimeout = 0,
    ips_ReceiveTimeout = 1
};

enum TxThirdPartyFilterList
{
    tpf_VideoSource = 0,
    tpf_VideoPreview = 1,
    tpf_VideoRecording = 2,
    tpf_AudioSource = 3,
    tpf_AudioRendering = 4,
    tpf_AudioRecording = 5,
    tpf_VideoRenderer = 6,
    tpf_AudioRenderer = 7,
    tpf_ThirdPartyVideoSource = 8,
    tpf_ThirdPartyAudioSource = 9,
    tpf_AddToGraph = 10
};

enum TxAlignment
{
    taLeftJustify = 0,
    taRightJustify = 1,
    taCenter = 2
};

enum TxAero
{
    ae_Default = 0,
    ae_AutoBestRenderingQuality = 1,
    ae_ForceOnWhenStartingVideo = 2,
    ae_ForceOffWhenStartingVideo = 3,
    ae_ForceOnImmediately = 4,
    ae_ForceOffImmediately = 5
};

enum TxApplicationPriority
{
    ap_default = 0,
    ap_idle = 1,
    ap_normal = 2,
    ap_high = 3,
    ap_realtime = 4
};

enum TxASFDeinterlaceMode
{
    adm_NotInterlaced = 0,
    adm_DeinterlaceNormal = 1,
    adm_DeinterlaceHalfSize = 2,
    adm_DeinterlaceHalfSizeDoubleRate = 3,
    adm_DeinterlaceInverseTelecine = 4,
    adm_DeinterlaceVerticalHalfSizeDoubleRate = 5
};

enum TxASFProfileVersion
{
    apv_ProfileVersion_8 = 0,
    apv_ProfileVersion_9 = 1
};

enum TxAudioChannelRenderMode
{
    acrm_Normal = 0,
    acrm_RenderLeft = 1,
    acrm_RenderRight = 2,
    acrm_MuteLeft = 3,
    acrm_MuteRight = 4,
    acrm_Mute_All = 5,
    acrm_MixLeftAndRight = 6,
    acrm_PassThru = 7
};

enum TxAudioFormat
{
    af_default = 0,
    af_8000_8b_1ch = 1,
    af_8000_8b_2ch = 2,
    af_8000_16b_1ch = 3,
    af_8000_16b_2ch = 4,
    af_11025_8b_1ch = 5,
    af_11025_8b_2ch = 6,
    af_11025_16b_1ch = 7,
    af_11025_16b_2ch = 8,
    af_16000_8b_1ch = 9,
    af_16000_8b_2ch = 10,
    af_16000_16b_1ch = 11,
    af_16000_16b_2ch = 12,
    af_22050_8b_1ch = 13,
    af_22050_8b_2ch = 14,
    af_22050_16b_1ch = 15,
    af_22050_16b_2ch = 16,
    af_32000_8b_1ch = 17,
    af_32000_8b_2ch = 18,
    af_32000_16b_1ch = 19,
    af_32000_16b_2ch = 20,
    af_44100_8b_1ch = 21,
    af_44100_8b_2ch = 22,
    af_44100_16b_1ch = 23,
    af_44100_16b_2ch = 24,
    af_48000_8b_1ch = 25,
    af_48000_8b_2ch = 26,
    af_48000_16b_1ch = 27,
    af_48000_16b_2ch = 28
};

enum TxAudioSource
{
    as_Default = 0,
    as_UseExternalAudio = 1
};

enum TxAutoFileName
{
    fn_Sequential = 0,
    fn_DateTime = 1,
    fn_Counter = 2
};

enum TxBorderStyle
{
    bsNone = 0,
    bsSingle = 1
};

enum TxCompressionMode
{
    cm_NoCompression = 0,
    cm_CompressOnTheFly = 1,
    cm_CompressAfterRecording = 2
};

enum TxCompressionType
{
    ct_Video = 0,
    ct_Audio = 1,
    ct_AudioVideo = 2
};

enum TxAspectRatio
{
    ar_Box = 0,
    ar_NoResize = 1,
    ar_Stretch = 2,
    ar_PanScan = 3
};

enum TxDVVideoFormat
{
    dvf_Default = 0,
    dvf_DVSD = 1,
    dvf_DVHD = 2,
    dvf_DVSL = 3
};

enum TxDVSize
{
    dv_Full = 0,
    dv_Half = 1,
    dv_Quarter = 2,
    dv_DC = 3
};

enum TxDVVideoStandard
{
    dvs_Default = 0,
    dvs_PAL = 1,
    dvs_NTSC = 2
};

enum TxFrameGrabber
{
    fg_BothStreams = 0,
    fg_PreviewStream = 1,
    fg_CaptureStream = 2,
    fg_Disabled = 3
};

enum TxJPEGPerformance
{
    jpBestQuality = 0,
    jpBestSpeed = 1
};

enum TxLogoLayout
{
    lg_Centered = 0,
    lg_Stretched = 1,
    lg_Repeated = 2,
    lg_TopLeft = 3,
    lg_TopRight = 4,
    lg_BottomLeft = 5,
    lg_BottomRight = 6,
    lg_Boxed = 7
};

enum TxMultiplexedRole
{
    mr_NotMultiplexed = 0,
    mr_MultiplexedMosaic4 = 1,
    mr_MultiplexedMosaic16 = 2,
    mr_MultiplexedMaster = 3,
    mr_MultiplexedSlave = 4
};

enum TxNetworkStreaming
{
    ns_Disabled = 0,
    ns_ASFDirectNetworkStreaming = 1,
    ns_ASFStreamingToPublishingPoint = 2
};

enum TxNetworkStreamingType
{
    nst_AudioVideoStreaming = 0,
    nst_VideoStreaming = 1,
    nst_AudioStreaming = 2
};

enum TxNotificationMethod
{
    nm_Timer = 0,
    nm_Thread = 1
};

enum TxThreadPriority
{
    tpIdle = 0,
    tpLowest = 1,
    tpLower = 2,
    tpNormal = 3,
    tpHigher = 4,
    tpHighest = 5,
    tpTimeCritical = 6
};

enum TxRecordingMethod
{
    rm_AVI = 0,
    rm_ASF = 1,
    rm_SendToDV = 2,
    rm_MKV = 3,
    rm_FLV = 4,
    rm_MP4 = 5,
    rm_Multiplexer = 6
};

enum TxRecordingTimer
{
    rt_Disabled = 0,
    rt_RecordToNewFile = 1,
    rt_StopRecording = 2,
    rt_StartRecording = 3
};

enum TxRawSampleCaptureLocation
{
    rl_SourceFormat = 0,
    rl_AfterCompression = 1
};

enum TxRecordingSize
{
    rs_Default = 0,
    rs_HalfSize = 1,
    rs_QuarterSize = 2
};

enum TxSynchronizationRole
{
    sr_Master = 0,
    sr_Slave = 1
};

enum TxSyncPreview
{
    sp_Auto = 0,
    sp_Disabled = 1,
    sp_Enabled = 2
};

enum TxCardinalDirection
{
    cd_North = 0,
    cd_NorthEast = 1,
    cd_East = 2,
    cd_SouthEast = 3,
    cd_South = 4,
    cd_SouthWest = 5,
    cd_West = 6,
    cd_NorthWest = 7,
    cd_Center = 8
};

enum TxTextOverlayAlign
{
    tf_Left = 0,
    tf_Center = 1,
    tf_Right = 2
};

enum TxFileSort
{
    fs_TimeAsc = 0,
    fs_TimeDesc = 1,
    fs_NameAsc = 2,
    fs_NameDesc = 3
};

enum TxVideoDeinterlacing
{
    di_Disabled = 0,
    di_HalfSize = 1,
    di_FullSize = 2,
    di_DScaler = 3,
    di_AVISynth = 4,
    di_FFDShow = 5,
    di_ThirdPartyDeinterlacer = 6
};

enum TxVideoRotation
{
    rt_0_deg = 0,
    rt_90_deg = 1,
    rt_180_deg = 2,
    rt_270_deg = 3,
    rt_0_deg_mirror = 4,
    rt_90_deg_mirror = 5,
    rt_180_deg_mirror = 6,
    rt_270_deg_mirror = 7,
    rt_custom_angle = 8,
    rt_custom_angle_mirror = 9
};

enum TxVideoRenderer
{
    vr_AutoSelect = 0,
    vr_EVR = 1,
    vr_VMR9 = 2,
    vr_VMR7 = 3,
    vr_StandardRenderer = 4,
    vr_OverlayRenderer = 5,
    vr_RecordingPriority = 6,
    vr_None = 7
};

enum TxVideoRendererExternal
{
    vre_None = 0,
    vre_Matrox_PRO = 1,
    vre_Decklink_SD = 2,
    vre_Decklink_Extreme = 3,
    vre_Pinnacle_MovieBoard = 4
};

enum TxVideoSource
{
    vs_VideoCaptureDevice = 0,
    vs_ScreenRecording = 1,
    vs_VideoFileOrURL = 2,
    vs_JPEGsOrBitmaps = 3,
    vs_IPCamera = 4,
    vs_Mixer = 5,
    vs_VideoFromImages = 6,
    vs_ThirdPartyFilter = 7
};

enum TxVuMeter
{
    vu_Disabled = 0,
    vu_Analog = 1,
    vu_Bargraph = 2
};

enum TxWebcamStillCaptureButton
{
    wb_Disabled = 0,
    wb_Enabled = 1
};

enum TxMouseButton
{
    mbLeft = 0,
    mbRight = 1,
    mbMiddle = 2
};

//
// Function implementation mapping
//

#pragma start_map_region("k:\_a\a\release\vidgrab_VC6.tli")
__declspec(implementation_key(1)) enum TxCursors IVideoGrabberVC6::GetBusyCursor ( );
__declspec(implementation_key(2)) HRESULT IVideoGrabberVC6::SetBusyCursor ( enum TxCursors Value );
__declspec(implementation_key(3)) enum TxCursors IVideoGrabberVC6::GetVideoCursor ( );
__declspec(implementation_key(4)) HRESULT IVideoGrabberVC6::SetVideoCursor ( enum TxCursors Value );
__declspec(implementation_key(5)) enum TxCursors IVideoGrabberVC6::GetNormalCursor ( );
__declspec(implementation_key(6)) HRESULT IVideoGrabberVC6::SetNormalCursor ( enum TxCursors Value );
__declspec(implementation_key(7)) _bstr_t IVideoGrabberVC6::GetAnalogVideoStandards ( );
__declspec(implementation_key(8)) long IVideoGrabberVC6::GetAnalogVideoStandardsCount ( );
__declspec(implementation_key(9)) long IVideoGrabberVC6::GetBufferCount ( );
__declspec(implementation_key(10)) _bstr_t IVideoGrabberVC6::GetASFProfiles ( );
__declspec(implementation_key(11)) long IVideoGrabberVC6::GetASFProfilesCount ( );
__declspec(implementation_key(12)) long IVideoGrabberVC6::GetAudioBalance ( );
__declspec(implementation_key(13)) _bstr_t IVideoGrabberVC6::GetAudioCompressorName ( );
__declspec(implementation_key(14)) long IVideoGrabberVC6::GetAudioInputBalance ( );
__declspec(implementation_key(15)) long IVideoGrabberVC6::GetAudioInputLevel ( );
__declspec(implementation_key(16)) VARIANT_BOOL IVideoGrabberVC6::GetAudioInputMono ( );
__declspec(implementation_key(17)) _bstr_t IVideoGrabberVC6::GetAudioInputs ( );
__declspec(implementation_key(18)) long IVideoGrabberVC6::GetAudioInputsCount ( );
__declspec(implementation_key(19)) _bstr_t IVideoGrabberVC6::GetAudioDeviceName ( );
__declspec(implementation_key(20)) _bstr_t IVideoGrabberVC6::GetAudioFormats ( );
__declspec(implementation_key(21)) _bstr_t IVideoGrabberVC6::GetAudioRendererName ( );
__declspec(implementation_key(22)) long IVideoGrabberVC6::GetAudioVolume ( );
__declspec(implementation_key(23)) VARIANT_BOOL IVideoGrabberVC6::GetBusy ( );
__declspec(implementation_key(24)) long IVideoGrabberVC6::GetCropping_YMax ( );
__declspec(implementation_key(25)) long IVideoGrabberVC6::GetCropping_XMax ( );
__declspec(implementation_key(26)) double IVideoGrabberVC6::GetCurrentFrameRate ( );
__declspec(implementation_key(27)) enum TxCurrentState IVideoGrabberVC6::GetCurrentState ( );
__declspec(implementation_key(28)) double IVideoGrabberVC6::GetDeliveredFrames ( );
__declspec(implementation_key(29)) _bstr_t IVideoGrabberVC6::GetDirectShowFilters ( );
__declspec(implementation_key(30)) long IVideoGrabberVC6::GetDirectShowFiltersCount ( );
__declspec(implementation_key(31)) long IVideoGrabberVC6::GetDisplay_VideoHeight ( );
__declspec(implementation_key(32)) long IVideoGrabberVC6::GetDisplay_VideoWidth ( );
__declspec(implementation_key(33)) long IVideoGrabberVC6::GetDroppedFrameCount ( );
__declspec(implementation_key(34)) long IVideoGrabberVC6::GetDisplay_VideoWindowHandle ( );
__declspec(implementation_key(35)) long IVideoGrabberVC6::GetDualDisplay_VideoWindowHandle ( );
__declspec(implementation_key(36)) _bstr_t IVideoGrabberVC6::GetAudioCompressors ( );
__declspec(implementation_key(37)) long IVideoGrabberVC6::GetAudioCompressorsCount ( );
__declspec(implementation_key(38)) _bstr_t IVideoGrabberVC6::GetAudioDevices ( );
__declspec(implementation_key(39)) long IVideoGrabberVC6::GetAudioDevicesCount ( );
__declspec(implementation_key(40)) _bstr_t IVideoGrabberVC6::GetAudioRenderers ( );
__declspec(implementation_key(41)) long IVideoGrabberVC6::GetAudioRenderersCount ( );
__declspec(implementation_key(42)) long IVideoGrabberVC6::GetDualDisplay_VideoHeight ( );
__declspec(implementation_key(43)) long IVideoGrabberVC6::GetDualDisplay_VideoWidth ( );
__declspec(implementation_key(44)) enum TxFrameGrabberRGBFormat IVideoGrabberVC6::GetFrameGrabberCurrentRGBFormat ( );
__declspec(implementation_key(45)) VARIANT_BOOL IVideoGrabberVC6::GetHoldRecording ( );
__declspec(implementation_key(46)) long IVideoGrabberVC6::GetImageOverlaySelector ( );
__declspec(implementation_key(47)) double IVideoGrabberVC6::GetImageRatio ( );
__declspec(implementation_key(48)) VARIANT_BOOL IVideoGrabberVC6::GetInFrameProgressEvent ( );
__declspec(implementation_key(49)) VARIANT_BOOL IVideoGrabberVC6::GetIsAnalogVideoDecoderAvailable ( );
__declspec(implementation_key(50)) VARIANT_BOOL IVideoGrabberVC6::GetIsAudioCrossbarAvailable ( );
__declspec(implementation_key(51)) enum TxTriState IVideoGrabberVC6::GetIsAudioInputBalanceAvailable ( );
__declspec(implementation_key(52)) VARIANT_BOOL IVideoGrabberVC6::GetIsCameraControlAvailable ( );
__declspec(implementation_key(53)) VARIANT_BOOL IVideoGrabberVC6::GetIsDigitalVideoIn ( );
__declspec(implementation_key(54)) VARIANT_BOOL IVideoGrabberVC6::GetIsDVCommandAvailable ( );
__declspec(implementation_key(55)) VARIANT_BOOL IVideoGrabberVC6::GetIsHorizontalSyncLocked ( );
__declspec(implementation_key(56)) VARIANT_BOOL IVideoGrabberVC6::GetIsMpegStream ( );
__declspec(implementation_key(57)) enum TxTriState IVideoGrabberVC6::GetIsPlayerAudioStreamAvailable ( );
__declspec(implementation_key(58)) enum TxTriState IVideoGrabberVC6::GetIsPlayerVideoStreamAvailable ( );
__declspec(implementation_key(59)) VARIANT_BOOL IVideoGrabberVC6::GetIsRecordingPaused ( );
__declspec(implementation_key(60)) VARIANT_BOOL IVideoGrabberVC6::GetTimeCodeReaderAvailable ( );
__declspec(implementation_key(61)) VARIANT_BOOL IVideoGrabberVC6::GetIsTVAudioAvailable ( );
__declspec(implementation_key(62)) VARIANT_BOOL IVideoGrabberVC6::GetIsTVAutoTuneRunning ( );
__declspec(implementation_key(63)) VARIANT_BOOL IVideoGrabberVC6::GetIsTVTunerAvailable ( );
__declspec(implementation_key(64)) VARIANT_BOOL IVideoGrabberVC6::GetIsVideoControlAvailable ( );
__declspec(implementation_key(65)) VARIANT_BOOL IVideoGrabberVC6::GetIsVideoCrossbarAvailable ( );
__declspec(implementation_key(66)) VARIANT_BOOL IVideoGrabberVC6::GetIsVideoQualityAvailable ( );
__declspec(implementation_key(67)) VARIANT_BOOL IVideoGrabberVC6::GetIsVideoPortAvailable ( );
__declspec(implementation_key(68)) VARIANT_BOOL IVideoGrabberVC6::GetIsVideoInterlaced ( );
__declspec(implementation_key(69)) VARIANT_BOOL IVideoGrabberVC6::GetIsWDMVideoDriver ( );
__declspec(implementation_key(70)) _bstr_t IVideoGrabberVC6::GetLast_BurstFrameCapture_FileName ( );
__declspec(implementation_key(71)) _bstr_t IVideoGrabberVC6::GetLast_CaptureFrameTo_FileName ( );
__declspec(implementation_key(72)) _bstr_t IVideoGrabberVC6::GetLast_Recording_FileName ( );
__declspec(implementation_key(73)) _bstr_t IVideoGrabberVC6::GetLast_Clip_Played ( );
__declspec(implementation_key(74)) double IVideoGrabberVC6::GetMotionDetector_GlobalMotionRatio ( );
__declspec(implementation_key(75)) long IVideoGrabberVC6::GetMotionDetector_GridXCount ( );
__declspec(implementation_key(76)) long IVideoGrabberVC6::GetMotionDetector_GridYCount ( );
__declspec(implementation_key(77)) VARIANT_BOOL IVideoGrabberVC6::GetMotionDetector_IsGridValid ( );
__declspec(implementation_key(78)) enum TxMpegStreamType IVideoGrabberVC6::GetMpegStreamType ( );
__declspec(implementation_key(79)) _bstr_t IVideoGrabberVC6::GetMultiplexerName ( );
__declspec(implementation_key(80)) _bstr_t IVideoGrabberVC6::GetMultiplexers ( );
__declspec(implementation_key(81)) long IVideoGrabberVC6::GetMultiplexersCount ( );
__declspec(implementation_key(82)) long IVideoGrabberVC6::GetPlaylistIndex ( );
__declspec(implementation_key(83)) double IVideoGrabberVC6::GetPlayerDuration ( );
__declspec(implementation_key(84)) double IVideoGrabberVC6::GetPlayerFrameCount ( );
__declspec(implementation_key(85)) double IVideoGrabberVC6::GetPlayerFramePosition ( );
__declspec(implementation_key(86)) double IVideoGrabberVC6::GetPlayerTimePosition ( );
__declspec(implementation_key(87)) double IVideoGrabberVC6::GetPlayerFrameRate ( );
__declspec(implementation_key(88)) enum TxPlayerState IVideoGrabberVC6::GetPlayerState ( );
__declspec(implementation_key(89)) long IVideoGrabberVC6::GetRecordingBacktimedFramesCount ( );
__declspec(implementation_key(90)) VARIANT_BOOL IVideoGrabberVC6::GetRecordingCanPause ( );
__declspec(implementation_key(91)) double IVideoGrabberVC6::GetRecordingDuration ( );
__declspec(implementation_key(92)) _bstr_t IVideoGrabberVC6::GetRecordingFourCC ( );
__declspec(implementation_key(93)) long IVideoGrabberVC6::GetRecordingHeight ( );
__declspec(implementation_key(94)) long IVideoGrabberVC6::GetRecordingWidth ( );
__declspec(implementation_key(95)) double IVideoGrabberVC6::GetReencodingStartFrame ( );
__declspec(implementation_key(96)) double IVideoGrabberVC6::GetReencodingStartTime ( );
__declspec(implementation_key(97)) double IVideoGrabberVC6::GetReencodingStopFrame ( );
__declspec(implementation_key(98)) double IVideoGrabberVC6::GetReencodingStopTime ( );
__declspec(implementation_key(99)) long IVideoGrabberVC6::GetSendToDV_DeviceIndex ( );
__declspec(implementation_key(100)) long IVideoGrabberVC6::GetSpeakerBalance ( );
__declspec(implementation_key(101)) long IVideoGrabberVC6::GetSpeakerVolume ( );
__declspec(implementation_key(102)) _bstr_t IVideoGrabberVC6::GetStreamingURL ( );
__declspec(implementation_key(103)) _bstr_t IVideoGrabberVC6::GetSystemTempPath ( );
__declspec(implementation_key(104)) long IVideoGrabberVC6::GetTextOverlaySelector ( );
__declspec(implementation_key(105)) long IVideoGrabberVC6::GetTVChannel ( );
__declspec(implementation_key(106)) long IVideoGrabberVC6::GetTVCountryCode ( );
__declspec(implementation_key(107)) enum TxTunerInputType IVideoGrabberVC6::GetTVTunerInputType ( );
__declspec(implementation_key(108)) enum TxTunerMode IVideoGrabberVC6::GetTunerMode ( );
__declspec(implementation_key(109)) long IVideoGrabberVC6::GetUniqueID ( );
__declspec(implementation_key(110)) VARIANT_BOOL IVideoGrabberVC6::GetVCRHorizontalLocking ( );
__declspec(implementation_key(111)) _bstr_t IVideoGrabberVC6::GetVideoCompressorName ( );
__declspec(implementation_key(112)) _bstr_t IVideoGrabberVC6::GetVideoCompressors ( );
__declspec(implementation_key(113)) long IVideoGrabberVC6::GetVideoCompressorsCount ( );
__declspec(implementation_key(114)) _bstr_t IVideoGrabberVC6::GetVideoDevices ( );
__declspec(implementation_key(115)) _bstr_t IVideoGrabberVC6::GetVideoDevicesId ( );
__declspec(implementation_key(116)) long IVideoGrabberVC6::GetVideoDevicesCount ( );
__declspec(implementation_key(117)) _bstr_t IVideoGrabberVC6::GetVideoFormats ( );
__declspec(implementation_key(118)) long IVideoGrabberVC6::GetVideoFormatsCount ( );
__declspec(implementation_key(119)) _bstr_t IVideoGrabberVC6::GetVideoInputs ( );
__declspec(implementation_key(120)) long IVideoGrabberVC6::GetVideoInputsCount ( );
__declspec(implementation_key(121)) _bstr_t IVideoGrabberVC6::GetVideoDeviceName ( );
__declspec(implementation_key(122)) _bstr_t IVideoGrabberVC6::GetVideoSizes ( );
__declspec(implementation_key(123)) long IVideoGrabberVC6::GetVideoSizesCount ( );
__declspec(implementation_key(124)) long IVideoGrabberVC6::GetVideoHeight ( );
__declspec(implementation_key(125)) long IVideoGrabberVC6::GetVideoHeight_PreferredAspectRatio ( );
__declspec(implementation_key(126)) long IVideoGrabberVC6::GetVideoWidth ( );
__declspec(implementation_key(127)) long IVideoGrabberVC6::GetVideoWidth_PreferredAspectRatio ( );
__declspec(implementation_key(128)) _bstr_t IVideoGrabberVC6::GetVideoSources ( );
__declspec(implementation_key(129)) long IVideoGrabberVC6::GetVideoSourcesCount ( );
__declspec(implementation_key(130)) _bstr_t IVideoGrabberVC6::GetVideoSubtypes ( );
__declspec(implementation_key(131)) long IVideoGrabberVC6::GetVideoSubtypesCount ( );
__declspec(implementation_key(132)) HRESULT IVideoGrabberVC6::SetAudioBalance ( long Value );
__declspec(implementation_key(133)) HRESULT IVideoGrabberVC6::SetAudioInputBalance ( long Value );
__declspec(implementation_key(134)) HRESULT IVideoGrabberVC6::SetAudioInputLevel ( long Value );
__declspec(implementation_key(135)) HRESULT IVideoGrabberVC6::SetAudioInputMono ( VARIANT_BOOL Value );
__declspec(implementation_key(136)) HRESULT IVideoGrabberVC6::SetAudioVolume ( long Value );
__declspec(implementation_key(137)) HRESULT IVideoGrabberVC6::SetBufferCount ( long Value );
__declspec(implementation_key(138)) HRESULT IVideoGrabberVC6::SetHoldRecording ( VARIANT_BOOL Value );
__declspec(implementation_key(139)) HRESULT IVideoGrabberVC6::SetImageOverlaySelector ( long Value );
__declspec(implementation_key(140)) HRESULT IVideoGrabberVC6::SetMpegStreamType ( enum TxMpegStreamType Value );
__declspec(implementation_key(141)) HRESULT IVideoGrabberVC6::SetPlaylistIndex ( long Value );
__declspec(implementation_key(142)) HRESULT IVideoGrabberVC6::SetPlayerDuration ( double Value );
__declspec(implementation_key(143)) HRESULT IVideoGrabberVC6::SetPlayerFramePosition ( double Value );
__declspec(implementation_key(144)) HRESULT IVideoGrabberVC6::SetPlayerTimePosition ( double Value );
__declspec(implementation_key(145)) HRESULT IVideoGrabberVC6::SetRecordingBacktimedFramesCount ( long Value );
__declspec(implementation_key(146)) HRESULT IVideoGrabberVC6::SetRecordingCanPause ( VARIANT_BOOL Value );
__declspec(implementation_key(147)) HRESULT IVideoGrabberVC6::SetReencodingStartFrame ( double Value );
__declspec(implementation_key(148)) HRESULT IVideoGrabberVC6::SetReencodingStartTime ( double Value );
__declspec(implementation_key(149)) HRESULT IVideoGrabberVC6::SetReencodingStopFrame ( double Value );
__declspec(implementation_key(150)) HRESULT IVideoGrabberVC6::SetReencodingStopTime ( double Value );
__declspec(implementation_key(151)) HRESULT IVideoGrabberVC6::SetSendToDV_DeviceIndex ( long Value );
__declspec(implementation_key(152)) HRESULT IVideoGrabberVC6::SetSpeakerBalance ( long Value );
__declspec(implementation_key(153)) HRESULT IVideoGrabberVC6::SetSpeakerVolume ( long Value );
__declspec(implementation_key(154)) HRESULT IVideoGrabberVC6::SetTextOverlaySelector ( long Value );
__declspec(implementation_key(155)) HRESULT IVideoGrabberVC6::SetTVChannel ( long Value );
__declspec(implementation_key(156)) HRESULT IVideoGrabberVC6::SetTVCountryCode ( long Value );
__declspec(implementation_key(157)) HRESULT IVideoGrabberVC6::SetTVTunerInputType ( enum TxTunerInputType Value );
__declspec(implementation_key(158)) HRESULT IVideoGrabberVC6::SetTunerMode ( enum TxTunerMode Value );
__declspec(implementation_key(159)) HRESULT IVideoGrabberVC6::SetVCRHorizontalLocking ( VARIANT_BOOL Value );
__declspec(implementation_key(160)) long IVideoGrabberVC6::GetTextOverlay_Font ( );
__declspec(implementation_key(161)) HRESULT IVideoGrabberVC6::SetTextOverlay_Font ( long Value );
__declspec(implementation_key(162)) HRESULT IVideoGrabberVC6::About ( );
__declspec(implementation_key(163)) long IVideoGrabberVC6::AnalogVideoStandardIndex ( _bstr_t param1 );
__declspec(implementation_key(164)) _bstr_t IVideoGrabberVC6::ASFStreaming_GetAuthorizationList ( );
__declspec(implementation_key(165)) _bstr_t IVideoGrabberVC6::ASFStreaming_GetConnectedClients ( );
__declspec(implementation_key(166)) long IVideoGrabberVC6::ASFStreaming_GetConnectedClientsCount ( );
__declspec(implementation_key(167)) VARIANT_BOOL IVideoGrabberVC6::ASFStreaming_ResetAuthorizations ( );
__declspec(implementation_key(168)) VARIANT_BOOL IVideoGrabberVC6::ASFStreaming_SetAuthorization ( VARIANT_BOOL Allowed, _bstr_t IP, _bstr_t Mask );
__declspec(implementation_key(169)) VARIANT_BOOL IVideoGrabberVC6::AssociateMultiplexedSlave ( long InputNumber, long SlaveUniqueID );
__declspec(implementation_key(170)) long IVideoGrabberVC6::AudioCompressorIndex ( _bstr_t param1 );
__declspec(implementation_key(171)) long IVideoGrabberVC6::AudioDeviceIndex ( _bstr_t param1 );
__declspec(implementation_key(172)) long IVideoGrabberVC6::AudioRendererIndex ( _bstr_t param1 );
__declspec(implementation_key(173)) long IVideoGrabberVC6::AudioInputIndex ( _bstr_t param1 );
__declspec(implementation_key(174)) _bstr_t IVideoGrabberVC6::AVIInfo2 ( _bstr_t AVIFile, enum TxAVIInfoType AVIInfoType );
__declspec(implementation_key(175)) _bstr_t IVideoGrabberVC6::AVIHeaderInfo ( _bstr_t AVIFile, enum TxHeaderAttribute HeaderAttribute );
__declspec(implementation_key(176)) long IVideoGrabberVC6::CameraControlValue ( enum TxCameraControl Setting );
__declspec(implementation_key(177)) VARIANT_BOOL IVideoGrabberVC6::CameraControlAuto ( enum TxCameraControl Setting );
__declspec(implementation_key(178)) long IVideoGrabberVC6::CameraControlDefault ( enum TxCameraControl Setting );
__declspec(implementation_key(179)) long IVideoGrabberVC6::CameraControlMin ( enum TxCameraControl Setting );
__declspec(implementation_key(180)) long IVideoGrabberVC6::CameraControlMax ( enum TxCameraControl Setting );
__declspec(implementation_key(181)) long IVideoGrabberVC6::CameraControlStep ( enum TxCameraControl Setting );
__declspec(implementation_key(182)) VARIANT_BOOL IVideoGrabberVC6::Cancel ( );
__declspec(implementation_key(183)) VARIANT_BOOL IVideoGrabberVC6::CanProcessMessages ( );
__declspec(implementation_key(184)) VARIANT_BOOL IVideoGrabberVC6::CaptureFrameTo ( enum TxFrameCaptureDest Dest, _bstr_t FileName );
__declspec(implementation_key(185)) VARIANT_BOOL IVideoGrabberVC6::CaptureFrameSyncTo ( enum TxFrameCaptureDest Dest, _bstr_t FileName );
__declspec(implementation_key(186)) HRESULT IVideoGrabberVC6::ClearHeaderAttributes ( );
__declspec(implementation_key(187)) HRESULT IVideoGrabberVC6::ClosePlayer ( );
__declspec(implementation_key(188)) long IVideoGrabberVC6::GetLastFrameAsHBITMAP ( long BufferIndex, VARIANT_BOOL WithOverlays, long SrcLeftLocation, long SrcTopLocation, long SrcWidth, long SrcHeight, long DestWidth, long DestHeight, long BitmapColorBitCount );
__declspec(implementation_key(189)) VARIANT_BOOL IVideoGrabberVC6::CreatePreallocCapFile ( );
__declspec(implementation_key(190)) double IVideoGrabberVC6::DVDInfo ( _bstr_t DVDRootDirectory, enum TxDVDInfoType DVDInfoType, long TitleNumber );
__declspec(implementation_key(191)) HRESULT IVideoGrabberVC6::Display_SetLocation ( long WindowLeft, long WindowTop, long WindowWidth, long WindowHeight );
__declspec(implementation_key(192)) HRESULT IVideoGrabberVC6::DestroyComponent ( );
__declspec(implementation_key(193)) HRESULT IVideoGrabberVC6::DualDisplay_SetLocation ( long WindowLeft, long WindowTop, long WindowWidth, long WindowHeight );
__declspec(implementation_key(194)) VARIANT_BOOL IVideoGrabberVC6::DrawBitmapOverFrame ( long BitmapHandle, VARIANT_BOOL Stretched, long LeftLocation, long TopLocation, long bmWidth, long bmHeight, VARIANT_BOOL Transparent, VARIANT_BOOL UseTransparentColor, unsigned long TransparentColorValue, VARIANT_BOOL AlphaBlend, long AlphaBlendValue, VARIANT_BOOL ChromaKey, long ChromaKeyRGBColor, long ChromaKeyLeewayPercent );
__declspec(implementation_key(195)) VARIANT_BOOL IVideoGrabberVC6::EnumerateWindows ( );
__declspec(implementation_key(196)) VARIANT_BOOL IVideoGrabberVC6::EnableMultiplexedInput ( long InputNumber, VARIANT_BOOL Enable );
__declspec(implementation_key(197)) HRESULT IVideoGrabberVC6::FastForwardPlayer ( );
__declspec(implementation_key(198)) long IVideoGrabberVC6::FindIndexInListByName ( _bstr_t List, _bstr_t SearchedString, VARIANT_BOOL IsSubString, VARIANT_BOOL IgnoreCase );
__declspec(implementation_key(199)) _bstr_t IVideoGrabberVC6::GetAudioCodec ( );
__declspec(implementation_key(200)) long IVideoGrabberVC6::GetFrameInfo ( long FrameId, enum TxFrameInfoId FrameInfoId );
__declspec(implementation_key(201)) _bstr_t IVideoGrabberVC6::GetFrameInfoString ( enum TxFrameInfoStringId FrameInfoStringId );
__declspec(implementation_key(202)) _bstr_t IVideoGrabberVC6::GetItemNameFromList ( _bstr_t List, long ItemIndex );
__declspec(implementation_key(203)) long IVideoGrabberVC6::GetMiscDeviceControl ( enum TxMiscDeviceControl MiscDeviceControl, long Index );
__declspec(implementation_key(204)) _bstr_t IVideoGrabberVC6::GetLogString ( enum TxLogType param1 );
__declspec(implementation_key(205)) long IVideoGrabberVC6::GetNearestVideoWidth ( long PreferredVideoWidth, long PreferredVideoHeight );
__declspec(implementation_key(206)) long IVideoGrabberVC6::GetNearestVideoHeight ( long PreferredVideoWidth, long PreferredVideoHeight );
__declspec(implementation_key(207)) long IVideoGrabberVC6::GetPlayerOpenProgressPercent ( );
__declspec(implementation_key(208)) _bstr_t IVideoGrabberVC6::GetPlaylist ( );
__declspec(implementation_key(209)) VARIANT_BOOL IVideoGrabberVC6::GetTranslatedCoordinates ( long DisplayIndex, long NativeX, long NativeY, long * TranslatedX, long * TranslatedY );
__declspec(implementation_key(210)) long IVideoGrabberVC6::GetTVChannelInfo ( enum TxTVChannelInfo param1 );
__declspec(implementation_key(211)) _bstr_t IVideoGrabberVC6::GetVideoCodec ( );
__declspec(implementation_key(212)) long IVideoGrabberVC6::GetVideoWidthFromIndex ( long Index );
__declspec(implementation_key(213)) long IVideoGrabberVC6::GetVideoHeightFromIndex ( long Index );
__declspec(implementation_key(214)) HRESULT IVideoGrabberVC6::GetNearestVideoSize ( long PreferredVideoWidth, long PreferredVideoHeight, long * NearestVideoWidth, long * NearestVideoHeight );
__declspec(implementation_key(215)) VARIANT_BOOL IVideoGrabberVC6::GetVMR9ImageAdjustmentBounds ( VARIANT_BOOL MainDisplay, enum TxVMR9ImageAdjustment VMR9ControlSetting, long * MinValue, long * MaxValue, long * StepSize, long * DefaultValue, long * CurrentValue );
__declspec(implementation_key(216)) VARIANT_BOOL IVideoGrabberVC6::GetVideoSizeFromIndex ( long Index, long * _VideoWidth, long * _VideoHeight );
__declspec(implementation_key(217)) VARIANT_BOOL IVideoGrabberVC6::AVIDuration ( _bstr_t AVIFile, double * Duration, double * FrameCount );
__declspec(implementation_key(218)) VARIANT_BOOL IVideoGrabberVC6::AVIInfo ( _bstr_t AVIFile, double * Duration, double * FrameCount, long * _VideoWidth, long * _VideoHeight, double * VideoFrameRateFps, long * AvgBitRate, long * AudioChannels, long * AudioSamplesPerSec, long * AudioBitsPerSample, BSTR * VideoCodec, BSTR * AudioCodec );
__declspec(implementation_key(219)) VARIANT_BOOL IVideoGrabberVC6::GetVideoCompressionSettings ( long * DataRate, long * KeyFrameRate, long * PFramesPerKeyFrame, long * WindowSize, double * Quality, VARIANT_BOOL * CanQuality, VARIANT_BOOL * CanCrunch, VARIANT_BOOL * CanKeyFrame, VARIANT_BOOL * CanBFrame, VARIANT_BOOL * CanWindow );
__declspec(implementation_key(220)) long IVideoGrabberVC6::GetRGBPixelAt ( long x, long y );
__declspec(implementation_key(221)) double IVideoGrabberVC6::GetPixelsDistance ( long x1, long y1, long x2, long y2 );
__declspec(implementation_key(222)) long IVideoGrabberVC6::GetVUMeterSetting ( long ChannelIndex, enum TxVUMeterSetting VUMeterSetting );
__declspec(implementation_key(223)) enum TxGraphState IVideoGrabberVC6::GraphState ( );
__declspec(implementation_key(224)) VARIANT_BOOL IVideoGrabberVC6::IsAudioDeviceConnected ( long DeviceIndex );
__declspec(implementation_key(225)) VARIANT_BOOL IVideoGrabberVC6::IsAudioDeviceASoundCard ( long DeviceIndex );
__declspec(implementation_key(226)) VARIANT_BOOL IVideoGrabberVC6::IsAudioRendererConnected ( long RendererIndex );
__declspec(implementation_key(227)) VARIANT_BOOL IVideoGrabberVC6::IsCameraControlSettingAvailable ( enum TxCameraControl Setting );
__declspec(implementation_key(228)) VARIANT_BOOL IVideoGrabberVC6::IsDialogAvailable ( enum TxDialog Dialog );
__declspec(implementation_key(229)) VARIANT_BOOL IVideoGrabberVC6::IsDirectX8OrHigherInstalled ( );
__declspec(implementation_key(230)) VARIANT_BOOL IVideoGrabberVC6::IsPlaylistActive ( );
__declspec(implementation_key(231)) VARIANT_BOOL IVideoGrabberVC6::IsVideoQualitySettingAvailable ( enum TxVideoQuality Setting );
__declspec(implementation_key(232)) VARIANT_BOOL IVideoGrabberVC6::IsVideoControlModeAvailable ( enum TxVideoControl Mode );
__declspec(implementation_key(233)) VARIANT_BOOL IVideoGrabberVC6::IsVMR9ImageAdjustmentAvailable ( VARIANT_BOOL MainDisplay );
__declspec(implementation_key(234)) VARIANT_BOOL IVideoGrabberVC6::IsVideoDeviceConnected ( long DeviceIndex );
__declspec(implementation_key(235)) VARIANT_BOOL IVideoGrabberVC6::IsVideoSignalDetected ( VARIANT_BOOL DetectConnexantBlueScreen, VARIANT_BOOL DetectCustomRGB, long CustomR, long CustomG, long CustomB, VARIANT_BOOL UseAsMaxValues );
__declspec(implementation_key(236)) VARIANT_BOOL IVideoGrabberVC6::IsDVDevice ( long Index );
__declspec(implementation_key(237)) VARIANT_BOOL IVideoGrabberVC6::LoadCompressorSettingsFromDataString ( VARIANT_BOOL IsVideoCompressor, long CompressorIndex, _bstr_t DataString );
__declspec(implementation_key(238)) VARIANT_BOOL IVideoGrabberVC6::LoadCompressorSettingsFromTextFile ( VARIANT_BOOL IsVideoCompressor, long CompressorIndex, _bstr_t FileName );
__declspec(implementation_key(239)) HRESULT IVideoGrabberVC6::SetLocation ( long lLeft, long lTop, long lWidth, long lHeight );
__declspec(implementation_key(240)) VARIANT_BOOL IVideoGrabberVC6::MixAudioSamples ( long pSampleBuffer, long SampleBufferSize, long SampleDataLength, enum TxFormatType SampleFormatType, long pFormat, double SampleStartTime, double SampleStopTime );
__declspec(implementation_key(241)) long IVideoGrabberVC6::MonitorsCount ( );
__declspec(implementation_key(242)) double IVideoGrabberVC6::MotionDetector_CellMotionRatio ( long x, long y );
__declspec(implementation_key(243)) long IVideoGrabberVC6::MotionDetector_CellColorIntensity ( enum TxRGBSelector RGBSelector, long x, long y );
__declspec(implementation_key(244)) _bstr_t IVideoGrabberVC6::MotionDetector_Get2DTextGrid ( );
__declspec(implementation_key(245)) _bstr_t IVideoGrabberVC6::MotionDetector_Get2DTextMotion ( );
__declspec(implementation_key(246)) long IVideoGrabberVC6::MotionDetector_GlobalColorIntensity ( enum TxRGBSelector RGBSelector );
__declspec(implementation_key(247)) VARIANT_BOOL IVideoGrabberVC6::MotionDetector_GetCellLocation ( long x, long y, long * XLocation, long * YLocation );
__declspec(implementation_key(248)) VARIANT_BOOL IVideoGrabberVC6::MotionDetector_GetCellSensitivity ( long x, long y, long * param3 );
__declspec(implementation_key(249)) VARIANT_BOOL IVideoGrabberVC6::MotionDetector_GetCellSize ( long * XSize, long * YSize );
__declspec(implementation_key(250)) VARIANT_BOOL IVideoGrabberVC6::MotionDetector_SetCellSensitivity ( long x, long y, long param3 );
__declspec(implementation_key(251)) HRESULT IVideoGrabberVC6::MotionDetector_SetGridSize ( long x, long y );
__declspec(implementation_key(252)) HRESULT IVideoGrabberVC6::MotionDetector_GloballyIncOrDecSensitivity ( long Value );
__declspec(implementation_key(253)) HRESULT IVideoGrabberVC6::MotionDetector_ResetGlobalSensitivity ( long Value );
__declspec(implementation_key(254)) HRESULT IVideoGrabberVC6::MotionDetector_Reset ( );
__declspec(implementation_key(255)) HRESULT IVideoGrabberVC6::MotionDetector_ShowGridDialog ( );
__declspec(implementation_key(256)) HRESULT IVideoGrabberVC6::MotionDetector_TriggerNow ( );
__declspec(implementation_key(257)) VARIANT_BOOL IVideoGrabberVC6::MotionDetector_UseThisReferenceSample ( long Bitmap_, _bstr_t BMPFile, _bstr_t JPEGFile );
__declspec(implementation_key(258)) long IVideoGrabberVC6::MultiplexerIndex ( _bstr_t param1 );
__declspec(implementation_key(259)) HRESULT IVideoGrabberVC6::NotifyPlayerTrackbarAction ( enum TxTrackbarAction TrackbarAction );
__declspec(implementation_key(260)) VARIANT_BOOL IVideoGrabberVC6::OpenPlayer ( );
__declspec(implementation_key(261)) VARIANT_BOOL IVideoGrabberVC6::OpenDVD ( );
__declspec(implementation_key(262)) VARIANT_BOOL IVideoGrabberVC6::OpenPlayerAtFramePositions ( double StartFrame, double StopFrame, VARIANT_BOOL KeepBounds, VARIANT_BOOL CloseAndReopenIfAlreadyOpened );
__declspec(implementation_key(263)) VARIANT_BOOL IVideoGrabberVC6::OpenPlayerAtTimePositions ( double StartTime, double StopTime, VARIANT_BOOL KeepBounds, VARIANT_BOOL CloseAndReopenIfAlreadyOpened );
__declspec(implementation_key(264)) VARIANT_BOOL IVideoGrabberVC6::PauseRecording ( );
__declspec(implementation_key(265)) HRESULT IVideoGrabberVC6::PausePlayer ( );
__declspec(implementation_key(266)) VARIANT_BOOL IVideoGrabberVC6::PlayerFrameStep ( long FrameCount );
__declspec(implementation_key(267)) VARIANT_BOOL IVideoGrabberVC6::Playlist ( enum TxPlaylist PlaylistAction, _bstr_t VideoClip );
__declspec(implementation_key(268)) long IVideoGrabberVC6::RecordingKBytesWrittenToDisk ( );
__declspec(implementation_key(269)) VARIANT_BOOL IVideoGrabberVC6::ReencodeVideoClip ( _bstr_t SourceVideoClip, _bstr_t NewVideoClip, VARIANT_BOOL IncludeVideoStream, VARIANT_BOOL IncludeAudioStream, VARIANT_BOOL UseFrameGrabber, VARIANT_BOOL UseCurrentVideoCompressor, VARIANT_BOOL UseCurrentAudioCompressor );
__declspec(implementation_key(270)) HRESULT IVideoGrabberVC6::RefreshDevicesAndCompressorsLists ( );
__declspec(implementation_key(271)) HRESULT IVideoGrabberVC6::RefreshPlayerOverlays ( );
__declspec(implementation_key(272)) VARIANT_BOOL IVideoGrabberVC6::ResetVideoDeviceSettings ( );
__declspec(implementation_key(273)) VARIANT_BOOL IVideoGrabberVC6::ResumeRecording ( );
__declspec(implementation_key(274)) HRESULT IVideoGrabberVC6::RewindPlayer ( );
__declspec(implementation_key(275)) HRESULT IVideoGrabberVC6::RunPlayer ( );
__declspec(implementation_key(276)) HRESULT IVideoGrabberVC6::RunPlayerBackwards ( );
__declspec(implementation_key(277)) VARIANT_BOOL IVideoGrabberVC6::StartSynchronized ( );
__declspec(implementation_key(278)) long IVideoGrabberVC6::VideoCompressorIndex ( _bstr_t param1 );
__declspec(implementation_key(279)) long IVideoGrabberVC6::VideoDeviceIndex ( _bstr_t param1 );
__declspec(implementation_key(280)) long IVideoGrabberVC6::VideoFormatIndex ( _bstr_t param1 );
__declspec(implementation_key(281)) long IVideoGrabberVC6::VideoInputIndex ( _bstr_t param1 );
__declspec(implementation_key(282)) long IVideoGrabberVC6::VideoSizeIndex ( _bstr_t param1 );
__declspec(implementation_key(283)) long IVideoGrabberVC6::VideoSubtypeIndex ( _bstr_t param1 );
__declspec(implementation_key(284)) VARIANT_BOOL IVideoGrabberVC6::SendDVCommand ( enum TxDVCommand DVCommand );
__declspec(implementation_key(285)) VARIANT_BOOL IVideoGrabberVC6::SendIPCameraCommand ( _bstr_t IPCameraCommand );
__declspec(implementation_key(286)) HRESULT IVideoGrabberVC6::SetAuthentication ( enum TxAuthenticationType AuthenticationType, _bstr_t UserName, _bstr_t Password );
__declspec(implementation_key(287)) long IVideoGrabberVC6::Mixer_AddToMixer ( long SourceUniqueID, long SourceVideoInput, long MosaicLine, long MosaicColumn, long AlternatedGroup, long AlternatedTimeIntervalInMs, VARIANT_BOOL ReplacePreviouslyAdded, VARIANT_BOOL CanEraseBackground );
__declspec(implementation_key(288)) long IVideoGrabberVC6::Mixer_SetupPIPFromSource ( long SourceUniqueID, long Source_Left, long Source_Top, long Source_Width, long Source_Height, VARIANT_BOOL ActivatePIP, long PIP_Left, long PIP_Top, long PIP_Width, long PIP_Height, VARIANT_BOOL MoveToTop );
__declspec(implementation_key(289)) VARIANT_BOOL IVideoGrabberVC6::Mixer_Activation ( long Id, VARIANT_BOOL Activate );
__declspec(implementation_key(290)) VARIANT_BOOL IVideoGrabberVC6::Mixer_RemoveFromMixer ( long Id );
__declspec(implementation_key(291)) long IVideoGrabberVC6::MPEGProgramSetting ( enum TxMPEGProgramSetting MPEGProgramSetting, long param2 );
__declspec(implementation_key(292)) _bstr_t IVideoGrabberVC6::SaveCompressorSettingsToDataString ( VARIANT_BOOL IsVideoCompressor, long CompressorIndex );
__declspec(implementation_key(293)) VARIANT_BOOL IVideoGrabberVC6::SaveCompressorSettingsToTextFile ( VARIANT_BOOL IsVideoCompressor, long CompressorIndex, _bstr_t FileName );
__declspec(implementation_key(294)) HRESULT IVideoGrabberVC6::SetAVIMuxConfig ( enum TxAVIMuxConfig AVIMuxSetting, long Value );
__declspec(implementation_key(295)) VARIANT_BOOL IVideoGrabberVC6::SetCameraControl ( enum TxCameraControl Setting, VARIANT_BOOL SetAuto, VARIANT_BOOL SetDefault, long SetValue );
__declspec(implementation_key(296)) HRESULT IVideoGrabberVC6::SetFrameCaptureBounds ( long LeftPosition, long TopPosition, long RightPosition, long BottomPosition );
__declspec(implementation_key(297)) HRESULT IVideoGrabberVC6::SetMultiplexerFilterByName ( _bstr_t Value );
__declspec(implementation_key(298)) HRESULT IVideoGrabberVC6::SetTextOverlayCustomVar ( long TextOverlaySelector, long VarIndex, _bstr_t VarText );
__declspec(implementation_key(299)) VARIANT_BOOL IVideoGrabberVC6::SetVideoCompressionDefaults ( );
__declspec(implementation_key(300)) VARIANT_BOOL IVideoGrabberVC6::SetVideoCompressionSettings ( long DataRate, long KeyFrameRate, long PFramesPerKeyFrame, long WindowSize, double Quality );
__declspec(implementation_key(301)) VARIANT_BOOL IVideoGrabberVC6::SetVideoControlMode ( VARIANT_BOOL FlipHorizontal, VARIANT_BOOL FlipVertical, VARIANT_BOOL ExternalTriggerEnable, VARIANT_BOOL Trigger );
__declspec(implementation_key(302)) VARIANT_BOOL IVideoGrabberVC6::SetVideoQuality ( enum TxVideoQuality Setting, VARIANT_BOOL SetAuto, VARIANT_BOOL SetDefault, long SetValue );
__declspec(implementation_key(303)) VARIANT_BOOL IVideoGrabberVC6::SetVMR9ImageAdjustmentValue ( VARIANT_BOOL MainDisplay, enum TxVMR9ImageAdjustment VMR9ControlSetting, long param3, VARIANT_BOOL FixRange );
__declspec(implementation_key(304)) VARIANT_BOOL IVideoGrabberVC6::ShowDialog ( enum TxDialog Dialog );
__declspec(implementation_key(305)) VARIANT_BOOL IVideoGrabberVC6::PausePreview ( );
__declspec(implementation_key(306)) VARIANT_BOOL IVideoGrabberVC6::ResetPreview ( );
__declspec(implementation_key(307)) VARIANT_BOOL IVideoGrabberVC6::ResumePreview ( );
__declspec(implementation_key(308)) VARIANT_BOOL IVideoGrabberVC6::RecordToNewFileNow ( _bstr_t NewRecordingFileName, VARIANT_BOOL ResetStreamTime );
__declspec(implementation_key(309)) HRESULT IVideoGrabberVC6::RetrieveInitialXYAfterRotation ( long x, long y, long * OriginalX, long * OriginalY );
__declspec(implementation_key(310)) VARIANT_BOOL IVideoGrabberVC6::SendImageToVideoFromBitmaps ( _bstr_t ImageFilePath, long BitmapHandle, VARIANT_BOOL CanFreeBitmapHandle, VARIANT_BOOL EndOfData );
__declspec(implementation_key(311)) HRESULT IVideoGrabberVC6::SetHeaderAttribute ( enum TxHeaderAttribute HeaderAttribute, _bstr_t Value );
__declspec(implementation_key(312)) HRESULT IVideoGrabberVC6::SetImageOverlayAttributes ( long LeftLocation, long TopLocation, long StretchedWidth, long StretchedHeight, VARIANT_BOOL Transparent, VARIANT_BOOL UseTransparentColor, long TransparentColorValue, VARIANT_BOOL AlphaBlend, long AlphaBlendValue );
__declspec(implementation_key(313)) VARIANT_BOOL IVideoGrabberVC6::SetImageOverlayFromImageFile ( _bstr_t FileName );
__declspec(implementation_key(314)) VARIANT_BOOL IVideoGrabberVC6::SetImageOverlayFromBMPFile ( _bstr_t FileName );
__declspec(implementation_key(315)) VARIANT_BOOL IVideoGrabberVC6::SetImageOverlayFromJPEGFile ( _bstr_t FileName );
__declspec(implementation_key(316)) VARIANT_BOOL IVideoGrabberVC6::SetImageOverlayFromHBitmap ( long Bitmap );
__declspec(implementation_key(317)) VARIANT_BOOL IVideoGrabberVC6::SetIPCameraSetting ( enum TxIPCameraSetting Setting, long param2 );
__declspec(implementation_key(318)) VARIANT_BOOL IVideoGrabberVC6::SetLogoFromBMPFile ( _bstr_t FileName );
__declspec(implementation_key(319)) VARIANT_BOOL IVideoGrabberVC6::SetLogoFromJPEGFile ( _bstr_t FileName );
__declspec(implementation_key(320)) VARIANT_BOOL IVideoGrabberVC6::SetLogoFromHBitmap ( long Bitmap );
__declspec(implementation_key(321)) VARIANT_BOOL IVideoGrabberVC6::ScreenRecordingUsingCoordinates ( VARIANT_BOOL FunctionEnabled, long scLeft, long scTop, long scWidth, long scHeight );
__declspec(implementation_key(322)) VARIANT_BOOL IVideoGrabberVC6::SendCameraCommand ( long Pan, long Tilt, VARIANT_BOOL Relative );
__declspec(implementation_key(323)) VARIANT_BOOL IVideoGrabberVC6::PutMiscDeviceControl ( enum TxMiscDeviceControl MiscDeviceControl, long Index, long param3 );
__declspec(implementation_key(324)) VARIANT_BOOL IVideoGrabberVC6::SetWindowRecordingByHandle ( long Window_Handle );
__declspec(implementation_key(325)) VARIANT_BOOL IVideoGrabberVC6::SetWindowRecordingByName ( _bstr_t WindowName, VARIANT_BOOL ExactMatch );
__declspec(implementation_key(326)) HRESULT IVideoGrabberVC6::SetVUMeterSetting ( long ChannelIndex, enum TxVUMeterSetting VUMeterSetting, long Value );
__declspec(implementation_key(327)) VARIANT_BOOL IVideoGrabberVC6::SetWindowTransparency ( long WndHandle, VARIANT_BOOL UseColorKey, VARIANT_BOOL UseAlpha, long AlphaValue );
__declspec(implementation_key(328)) VARIANT_BOOL IVideoGrabberVC6::StartAudioRecording ( );
__declspec(implementation_key(329)) VARIANT_BOOL IVideoGrabberVC6::StartAudioRendering ( );
__declspec(implementation_key(330)) VARIANT_BOOL IVideoGrabberVC6::StartPreview ( );
__declspec(implementation_key(331)) VARIANT_BOOL IVideoGrabberVC6::StartRecording ( );
__declspec(implementation_key(332)) VARIANT_BOOL IVideoGrabberVC6::StartReencoding ( );
__declspec(implementation_key(333)) VARIANT_BOOL IVideoGrabberVC6::Stop ( );
__declspec(implementation_key(334)) HRESULT IVideoGrabberVC6::StopPreview ( );
__declspec(implementation_key(335)) HRESULT IVideoGrabberVC6::StopPlayer ( );
__declspec(implementation_key(336)) HRESULT IVideoGrabberVC6::StopRecording ( );
__declspec(implementation_key(337)) VARIANT_BOOL IVideoGrabberVC6::StopReencoding ( );
__declspec(implementation_key(338)) VARIANT_BOOL IVideoGrabberVC6::TextOverlay_CreateCustomFont ( long fHeight, long fWidth, long fEscapement, long fOrientation, long fWeight, VARIANT_BOOL fItalic, VARIANT_BOOL fUnderline, VARIANT_BOOL fStrikeOut, long fCharSet, long fOutputPrecision, long fClipPrecision, long fQuality, long fPitchAndFamily, _bstr_t FontFacename );
__declspec(implementation_key(339)) VARIANT_BOOL IVideoGrabberVC6::ThirdPartyFilter_AddToList ( enum TxThirdPartyFilterList Location, _bstr_t GUIDString, _bstr_t OptionalDLLFilePath, _bstr_t FilterName, VARIANT_BOOL Enable, VARIANT_BOOL CanSaveFilterState );
__declspec(implementation_key(340)) VARIANT_BOOL IVideoGrabberVC6::ThirdPartyFilter_ClearList ( );
__declspec(implementation_key(341)) VARIANT_BOOL IVideoGrabberVC6::ThirdPartyFilter_Enable ( enum TxThirdPartyFilterList Location, _bstr_t GUIDString, VARIANT_BOOL Enable );
__declspec(implementation_key(342)) VARIANT_BOOL IVideoGrabberVC6::ThirdPartyFilter_RemoveFromList ( enum TxThirdPartyFilterList Location, _bstr_t GUIDString );
__declspec(implementation_key(343)) VARIANT_BOOL IVideoGrabberVC6::ThirdPartyFilter_ShowDialog ( enum TxThirdPartyFilterList Location, _bstr_t GUIDString );
__declspec(implementation_key(344)) VARIANT_BOOL IVideoGrabberVC6::TVGetMinMaxChannels ( long * MinChannel, long * MaxChannel );
__declspec(implementation_key(345)) VARIANT_BOOL IVideoGrabberVC6::TVClearFrequencyOverrides ( );
__declspec(implementation_key(346)) long IVideoGrabberVC6::TVSetChannelFrequencyOverride ( long TVChannel, long FrequencyInHz );
__declspec(implementation_key(347)) VARIANT_BOOL IVideoGrabberVC6::TVStartAutoScan ( );
__declspec(implementation_key(348)) VARIANT_BOOL IVideoGrabberVC6::TVStartAutoScanChannels ( long MinChannel, long MaxChannel, long Interval_ms );
__declspec(implementation_key(349)) VARIANT_BOOL IVideoGrabberVC6::TVStopAutoScan ( );
__declspec(implementation_key(350)) HRESULT IVideoGrabberVC6::UseNearestVideoSize ( long PreferredWidth, long PreferredHeight, VARIANT_BOOL Stretch );
__declspec(implementation_key(351)) VARIANT_BOOL IVideoGrabberVC6::VDECGetHorizontalLocked ( long * plLocked );
__declspec(implementation_key(352)) VARIANT_BOOL IVideoGrabberVC6::VDECGetNumberOfLines ( long * plNumberOfLines );
__declspec(implementation_key(353)) VARIANT_BOOL IVideoGrabberVC6::VDECGetOutputEnable ( long * plOutputEnable );
__declspec(implementation_key(354)) VARIANT_BOOL IVideoGrabberVC6::VDECGetVCRHorizontalLocking ( long * plVCRHorizontalLocking );
__declspec(implementation_key(355)) VARIANT_BOOL IVideoGrabberVC6::VDECPutTVFormat ( long lAnalogVideoStandard );
__declspec(implementation_key(356)) VARIANT_BOOL IVideoGrabberVC6::VDECPutOutputEnable ( long lOutputEnable );
__declspec(implementation_key(357)) VARIANT_BOOL IVideoGrabberVC6::VDECPutVCRHorizontalLocking ( long lVCRHorizontalLocking );
__declspec(implementation_key(358)) VARIANT_BOOL IVideoGrabberVC6::VideoFromImages_CreateSetOfBitmaps ( );
__declspec(implementation_key(359)) long IVideoGrabberVC6::VideoQualityValue ( enum TxVideoQuality Setting );
__declspec(implementation_key(360)) VARIANT_BOOL IVideoGrabberVC6::VideoQualityAuto ( enum TxVideoQuality Setting );
__declspec(implementation_key(361)) long IVideoGrabberVC6::VideoQualityDefault ( enum TxVideoQuality Setting );
__declspec(implementation_key(362)) long IVideoGrabberVC6::VideoQualityMin ( enum TxVideoQuality Setting );
__declspec(implementation_key(363)) long IVideoGrabberVC6::VideoQualityMax ( enum TxVideoQuality Setting );
__declspec(implementation_key(364)) long IVideoGrabberVC6::VideoQualityStep ( enum TxVideoQuality Setting );
__declspec(implementation_key(365)) VARIANT_BOOL IVideoGrabberVC6::WriteScriptCommand ( _bstr_t ScriptType, _bstr_t ScriptArgument );
__declspec(implementation_key(366)) VARIANT_BOOL IVideoGrabberVC6::MonitorBounds ( long MonitorNumber, long * LeftBound, long * TopBound, long * RightBound, long * BottomBound );
__declspec(implementation_key(367)) enum TxAlignment IVideoGrabberVC6::GetAlignment ( );
__declspec(implementation_key(368)) void IVideoGrabberVC6::PutAlignment ( enum TxAlignment Value );
__declspec(implementation_key(369)) _bstr_t IVideoGrabberVC6::GetCaption ( );
__declspec(implementation_key(370)) void IVideoGrabberVC6::PutCaption ( _bstr_t Value );
__declspec(implementation_key(371)) OLE_COLOR IVideoGrabberVC6::GetColor ( );
__declspec(implementation_key(372)) void IVideoGrabberVC6::PutColor ( OLE_COLOR Value );
__declspec(implementation_key(373)) VARIANT_BOOL IVideoGrabberVC6::GetEnabled ( );
__declspec(implementation_key(374)) void IVideoGrabberVC6::PutEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(375)) VARIANT_BOOL IVideoGrabberVC6::GetFullRepaint ( );
__declspec(implementation_key(376)) void IVideoGrabberVC6::PutFullRepaint ( VARIANT_BOOL Value );
__declspec(implementation_key(377)) VARIANT_BOOL IVideoGrabberVC6::GetParentColor ( );
__declspec(implementation_key(378)) void IVideoGrabberVC6::PutParentColor ( VARIANT_BOOL Value );
__declspec(implementation_key(379)) VARIANT_BOOL IVideoGrabberVC6::GetVisible ( );
__declspec(implementation_key(380)) void IVideoGrabberVC6::PutVisible ( VARIANT_BOOL Value );
__declspec(implementation_key(381)) VARIANT_BOOL IVideoGrabberVC6::GetAdjustOverlayAspectRatio ( );
__declspec(implementation_key(382)) void IVideoGrabberVC6::PutAdjustOverlayAspectRatio ( VARIANT_BOOL Value );
__declspec(implementation_key(383)) VARIANT_BOOL IVideoGrabberVC6::GetAdjustPixelAspectRatio ( );
__declspec(implementation_key(384)) void IVideoGrabberVC6::PutAdjustPixelAspectRatio ( VARIANT_BOOL Value );
__declspec(implementation_key(385)) enum TxAero IVideoGrabberVC6::GetAero ( );
__declspec(implementation_key(386)) void IVideoGrabberVC6::PutAero ( enum TxAero Value );
__declspec(implementation_key(387)) long IVideoGrabberVC6::GetAnalogVideoStandard ( );
__declspec(implementation_key(388)) void IVideoGrabberVC6::PutAnalogVideoStandard ( long Value );
__declspec(implementation_key(389)) enum TxApplicationPriority IVideoGrabberVC6::GetApplicationPriority ( );
__declspec(implementation_key(390)) void IVideoGrabberVC6::PutApplicationPriority ( enum TxApplicationPriority Value );
__declspec(implementation_key(391)) long IVideoGrabberVC6::GetASFAudioBitRate ( );
__declspec(implementation_key(392)) void IVideoGrabberVC6::PutASFAudioBitRate ( long Value );
__declspec(implementation_key(393)) long IVideoGrabberVC6::GetASFAudioChannels ( );
__declspec(implementation_key(394)) void IVideoGrabberVC6::PutASFAudioChannels ( long Value );
__declspec(implementation_key(395)) enum TxASFDeinterlaceMode IVideoGrabberVC6::GetASFDeinterlaceMode ( );
__declspec(implementation_key(396)) void IVideoGrabberVC6::PutASFDeinterlaceMode ( enum TxASFDeinterlaceMode Value );
__declspec(implementation_key(397)) VARIANT_BOOL IVideoGrabberVC6::GetASFFixedFrameRate ( );
__declspec(implementation_key(398)) void IVideoGrabberVC6::PutASFFixedFrameRate ( VARIANT_BOOL Value );
__declspec(implementation_key(399)) _bstr_t IVideoGrabberVC6::GetASFMediaServerPublishingPoint ( );
__declspec(implementation_key(400)) void IVideoGrabberVC6::PutASFMediaServerPublishingPoint ( _bstr_t Value );
__declspec(implementation_key(401)) _bstr_t IVideoGrabberVC6::GetASFMediaServerTemplatePublishingPoint ( );
__declspec(implementation_key(402)) void IVideoGrabberVC6::PutASFMediaServerTemplatePublishingPoint ( _bstr_t Value );
__declspec(implementation_key(403)) VARIANT_BOOL IVideoGrabberVC6::GetASFMediaServerRemovePublishingPointAfterDisconnect ( );
__declspec(implementation_key(404)) void IVideoGrabberVC6::PutASFMediaServerRemovePublishingPointAfterDisconnect ( VARIANT_BOOL Value );
__declspec(implementation_key(405)) long IVideoGrabberVC6::GetASFNetworkPort ( );
__declspec(implementation_key(406)) void IVideoGrabberVC6::PutASFNetworkPort ( long Value );
__declspec(implementation_key(407)) long IVideoGrabberVC6::GetASFNetworkMaxUsers ( );
__declspec(implementation_key(408)) void IVideoGrabberVC6::PutASFNetworkMaxUsers ( long Value );
__declspec(implementation_key(409)) long IVideoGrabberVC6::GetASFProfile ( );
__declspec(implementation_key(410)) void IVideoGrabberVC6::PutASFProfile ( long Value );
__declspec(implementation_key(411)) _bstr_t IVideoGrabberVC6::GetASFProfileFromCustomFile ( );
__declspec(implementation_key(412)) void IVideoGrabberVC6::PutASFProfileFromCustomFile ( _bstr_t Value );
__declspec(implementation_key(413)) enum TxASFProfileVersion IVideoGrabberVC6::GetASFProfileVersion ( );
__declspec(implementation_key(414)) void IVideoGrabberVC6::PutASFProfileVersion ( enum TxASFProfileVersion Value );
__declspec(implementation_key(415)) long IVideoGrabberVC6::GetASFVideoBitRate ( );
__declspec(implementation_key(416)) void IVideoGrabberVC6::PutASFVideoBitRate ( long Value );
__declspec(implementation_key(417)) double IVideoGrabberVC6::GetASFVideoFrameRate ( );
__declspec(implementation_key(418)) void IVideoGrabberVC6::PutASFVideoFrameRate ( double Value );
__declspec(implementation_key(419)) long IVideoGrabberVC6::GetASFVideoHeight ( );
__declspec(implementation_key(420)) void IVideoGrabberVC6::PutASFVideoHeight ( long Value );
__declspec(implementation_key(421)) long IVideoGrabberVC6::GetASFVideoMaxKeyFrameSpacing ( );
__declspec(implementation_key(422)) void IVideoGrabberVC6::PutASFVideoMaxKeyFrameSpacing ( long Value );
__declspec(implementation_key(423)) long IVideoGrabberVC6::GetASFVideoQuality ( );
__declspec(implementation_key(424)) void IVideoGrabberVC6::PutASFVideoQuality ( long Value );
__declspec(implementation_key(425)) long IVideoGrabberVC6::GetASFVideoWidth ( );
__declspec(implementation_key(426)) void IVideoGrabberVC6::PutASFVideoWidth ( long Value );
__declspec(implementation_key(427)) double IVideoGrabberVC6::GetAspectRatioToUse ( );
__declspec(implementation_key(428)) void IVideoGrabberVC6::PutAspectRatioToUse ( double Value );
__declspec(implementation_key(429)) VARIANT_BOOL IVideoGrabberVC6::GetAssociateAudioAndVideoDevices ( );
__declspec(implementation_key(430)) void IVideoGrabberVC6::PutAssociateAudioAndVideoDevices ( VARIANT_BOOL Value );
__declspec(implementation_key(431)) VARIANT_BOOL IVideoGrabberVC6::GetAVIDurationUpdated ( );
__declspec(implementation_key(432)) void IVideoGrabberVC6::PutAVIDurationUpdated ( VARIANT_BOOL Value );
__declspec(implementation_key(433)) enum TxAudioChannelRenderMode IVideoGrabberVC6::GetAudioChannelRenderMode ( );
__declspec(implementation_key(434)) void IVideoGrabberVC6::PutAudioChannelRenderMode ( enum TxAudioChannelRenderMode Value );
__declspec(implementation_key(435)) long IVideoGrabberVC6::GetAudioCompressor ( );
__declspec(implementation_key(436)) void IVideoGrabberVC6::PutAudioCompressor ( long Value );
__declspec(implementation_key(437)) long IVideoGrabberVC6::GetAudioDevice ( );
__declspec(implementation_key(438)) void IVideoGrabberVC6::PutAudioDevice ( long Value );
__declspec(implementation_key(439)) VARIANT_BOOL IVideoGrabberVC6::GetAudioDeviceRendering ( );
__declspec(implementation_key(440)) void IVideoGrabberVC6::PutAudioDeviceRendering ( VARIANT_BOOL Value );
__declspec(implementation_key(441)) enum TxAudioFormat IVideoGrabberVC6::GetAudioFormat ( );
__declspec(implementation_key(442)) void IVideoGrabberVC6::PutAudioFormat ( enum TxAudioFormat Value );
__declspec(implementation_key(443)) long IVideoGrabberVC6::GetAudioInput ( );
__declspec(implementation_key(444)) void IVideoGrabberVC6::PutAudioInput ( long Value );
__declspec(implementation_key(445)) VARIANT_BOOL IVideoGrabberVC6::GetAudioPeakEvent ( );
__declspec(implementation_key(446)) void IVideoGrabberVC6::PutAudioPeakEvent ( VARIANT_BOOL Value );
__declspec(implementation_key(447)) VARIANT_BOOL IVideoGrabberVC6::GetAudioRecording ( );
__declspec(implementation_key(448)) void IVideoGrabberVC6::PutAudioRecording ( VARIANT_BOOL Value );
__declspec(implementation_key(449)) long IVideoGrabberVC6::GetAudioRenderer ( );
__declspec(implementation_key(450)) void IVideoGrabberVC6::PutAudioRenderer ( long Value );
__declspec(implementation_key(451)) long IVideoGrabberVC6::GetAudioStreamNumber ( );
__declspec(implementation_key(452)) void IVideoGrabberVC6::PutAudioStreamNumber ( long Value );
__declspec(implementation_key(453)) VARIANT_BOOL IVideoGrabberVC6::GetAudioSyncAdjustmentEnabled ( );
__declspec(implementation_key(454)) void IVideoGrabberVC6::PutAudioSyncAdjustmentEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(455)) long IVideoGrabberVC6::GetAudioSyncAdjustment ( );
__declspec(implementation_key(456)) void IVideoGrabberVC6::PutAudioSyncAdjustment ( long Value );
__declspec(implementation_key(457)) enum TxAudioSource IVideoGrabberVC6::GetAudioSource ( );
__declspec(implementation_key(458)) void IVideoGrabberVC6::PutAudioSource ( enum TxAudioSource Value );
__declspec(implementation_key(459)) VARIANT_BOOL IVideoGrabberVC6::GetAutoConnectRelatedPins ( );
__declspec(implementation_key(460)) void IVideoGrabberVC6::PutAutoConnectRelatedPins ( VARIANT_BOOL Value );
__declspec(implementation_key(461)) enum TxAutoFileName IVideoGrabberVC6::GetAutoFileName ( );
__declspec(implementation_key(462)) void IVideoGrabberVC6::PutAutoFileName ( enum TxAutoFileName Value );
__declspec(implementation_key(463)) long IVideoGrabberVC6::GetAutoFileNameMinDigits ( );
__declspec(implementation_key(464)) void IVideoGrabberVC6::PutAutoFileNameMinDigits ( long Value );
__declspec(implementation_key(465)) _bstr_t IVideoGrabberVC6::GetAutoFilePrefix ( );
__declspec(implementation_key(466)) void IVideoGrabberVC6::PutAutoFilePrefix ( _bstr_t Value );
__declspec(implementation_key(467)) VARIANT_BOOL IVideoGrabberVC6::GetAutoRefreshPreview ( );
__declspec(implementation_key(468)) void IVideoGrabberVC6::PutAutoRefreshPreview ( VARIANT_BOOL Value );
__declspec(implementation_key(469)) VARIANT_BOOL IVideoGrabberVC6::GetAutoStartPlayer ( );
__declspec(implementation_key(470)) void IVideoGrabberVC6::PutAutoStartPlayer ( VARIANT_BOOL Value );
__declspec(implementation_key(471)) VARIANT_BOOL IVideoGrabberVC6::GetAVIFormatOpenDML ( );
__declspec(implementation_key(472)) void IVideoGrabberVC6::PutAVIFormatOpenDML ( VARIANT_BOOL Value );
__declspec(implementation_key(473)) VARIANT_BOOL IVideoGrabberVC6::GetAVIFormatOpenDMLCompatibilityIndex ( );
__declspec(implementation_key(474)) void IVideoGrabberVC6::PutAVIFormatOpenDMLCompatibilityIndex ( VARIANT_BOOL Value );
__declspec(implementation_key(475)) OLE_COLOR IVideoGrabberVC6::GetBackgroundColor ( );
__declspec(implementation_key(476)) void IVideoGrabberVC6::PutBackgroundColor ( OLE_COLOR Value );
__declspec(implementation_key(477)) enum TxBorderStyle IVideoGrabberVC6::GetBorderStyle ( );
__declspec(implementation_key(478)) void IVideoGrabberVC6::PutBorderStyle ( enum TxBorderStyle Value );
__declspec(implementation_key(479)) long IVideoGrabberVC6::GetBurstCount ( );
__declspec(implementation_key(480)) void IVideoGrabberVC6::PutBurstCount ( long Value );
__declspec(implementation_key(481)) long IVideoGrabberVC6::GetBurstInterval ( );
__declspec(implementation_key(482)) void IVideoGrabberVC6::PutBurstInterval ( long Value );
__declspec(implementation_key(483)) VARIANT_BOOL IVideoGrabberVC6::GetBurstMode ( );
__declspec(implementation_key(484)) void IVideoGrabberVC6::PutBurstMode ( VARIANT_BOOL Value );
__declspec(implementation_key(485)) enum TxFrameCaptureDest IVideoGrabberVC6::GetBurstType ( );
__declspec(implementation_key(486)) void IVideoGrabberVC6::PutBurstType ( enum TxFrameCaptureDest Value );
__declspec(implementation_key(487)) VARIANT_BOOL IVideoGrabberVC6::GetCameraControlSettings ( );
__declspec(implementation_key(488)) void IVideoGrabberVC6::PutCameraControlSettings ( VARIANT_BOOL Value );
__declspec(implementation_key(489)) _bstr_t IVideoGrabberVC6::GetCaptureFileExt ( );
__declspec(implementation_key(490)) void IVideoGrabberVC6::PutCaptureFileExt ( _bstr_t Value );
__declspec(implementation_key(491)) OLE_COLOR IVideoGrabberVC6::GetColorKey ( );
__declspec(implementation_key(492)) void IVideoGrabberVC6::PutColorKey ( OLE_COLOR Value );
__declspec(implementation_key(493)) VARIANT_BOOL IVideoGrabberVC6::GetColorKeyEnabled ( );
__declspec(implementation_key(494)) void IVideoGrabberVC6::PutColorKeyEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(495)) enum TxCompressionMode IVideoGrabberVC6::GetCompressionMode ( );
__declspec(implementation_key(496)) void IVideoGrabberVC6::PutCompressionMode ( enum TxCompressionMode Value );
__declspec(implementation_key(497)) enum TxCompressionType IVideoGrabberVC6::GetCompressionType ( );
__declspec(implementation_key(498)) void IVideoGrabberVC6::PutCompressionType ( enum TxCompressionType Value );
__declspec(implementation_key(499)) VARIANT_BOOL IVideoGrabberVC6::GetDisplay_Active ( );
__declspec(implementation_key(500)) void IVideoGrabberVC6::PutDisplay_Active ( VARIANT_BOOL Value );
__declspec(implementation_key(501)) VARIANT_BOOL IVideoGrabberVC6::GetDisplay_AlphaBlendEnabled ( );
__declspec(implementation_key(502)) void IVideoGrabberVC6::PutDisplay_AlphaBlendEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(503)) long IVideoGrabberVC6::GetDisplay_AlphaBlendValue ( );
__declspec(implementation_key(504)) void IVideoGrabberVC6::PutDisplay_AlphaBlendValue ( long Value );
__declspec(implementation_key(505)) VARIANT_BOOL IVideoGrabberVC6::GetDisplay_AutoSize ( );
__declspec(implementation_key(506)) void IVideoGrabberVC6::PutDisplay_AutoSize ( VARIANT_BOOL Value );
__declspec(implementation_key(507)) enum TxAspectRatio IVideoGrabberVC6::GetDisplay_AspectRatio ( );
__declspec(implementation_key(508)) void IVideoGrabberVC6::PutDisplay_AspectRatio ( enum TxAspectRatio Value );
__declspec(implementation_key(509)) VARIANT_BOOL IVideoGrabberVC6::GetDisplay_Embedded ( );
__declspec(implementation_key(510)) void IVideoGrabberVC6::PutDisplay_Embedded ( VARIANT_BOOL Value );
__declspec(implementation_key(511)) VARIANT_BOOL IVideoGrabberVC6::GetDisplay_FullScreen ( );
__declspec(implementation_key(512)) void IVideoGrabberVC6::PutDisplay_FullScreen ( VARIANT_BOOL Value );
__declspec(implementation_key(513)) long IVideoGrabberVC6::GetDisplay_Height ( );
__declspec(implementation_key(514)) void IVideoGrabberVC6::PutDisplay_Height ( long Value );
__declspec(implementation_key(515)) long IVideoGrabberVC6::GetDisplay_Left ( );
__declspec(implementation_key(516)) void IVideoGrabberVC6::PutDisplay_Left ( long Value );
__declspec(implementation_key(517)) long IVideoGrabberVC6::GetDisplay_Monitor ( );
__declspec(implementation_key(518)) void IVideoGrabberVC6::PutDisplay_Monitor ( long Value );
__declspec(implementation_key(519)) VARIANT_BOOL IVideoGrabberVC6::GetDisplay_MouseMovesWindow ( );
__declspec(implementation_key(520)) void IVideoGrabberVC6::PutDisplay_MouseMovesWindow ( VARIANT_BOOL Value );
__declspec(implementation_key(521)) long IVideoGrabberVC6::GetDisplay_PanScanRatio ( );
__declspec(implementation_key(522)) void IVideoGrabberVC6::PutDisplay_PanScanRatio ( long Value );
__declspec(implementation_key(523)) VARIANT_BOOL IVideoGrabberVC6::GetDisplay_StayOnTop ( );
__declspec(implementation_key(524)) void IVideoGrabberVC6::PutDisplay_StayOnTop ( VARIANT_BOOL Value );
__declspec(implementation_key(525)) long IVideoGrabberVC6::GetDisplay_Top ( );
__declspec(implementation_key(526)) void IVideoGrabberVC6::PutDisplay_Top ( long Value );
__declspec(implementation_key(527)) VARIANT_BOOL IVideoGrabberVC6::GetDisplay_TransparentColorEnabled ( );
__declspec(implementation_key(528)) void IVideoGrabberVC6::PutDisplay_TransparentColorEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(529)) long IVideoGrabberVC6::GetDisplay_TransparentColorValue ( );
__declspec(implementation_key(530)) void IVideoGrabberVC6::PutDisplay_TransparentColorValue ( long Value );
__declspec(implementation_key(531)) VARIANT_BOOL IVideoGrabberVC6::GetDisplay_VideoPortEnabled ( );
__declspec(implementation_key(532)) void IVideoGrabberVC6::PutDisplay_VideoPortEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(533)) VARIANT_BOOL IVideoGrabberVC6::GetDisplay_Visible ( );
__declspec(implementation_key(534)) void IVideoGrabberVC6::PutDisplay_Visible ( VARIANT_BOOL Value );
__declspec(implementation_key(535)) long IVideoGrabberVC6::GetDisplay_Width ( );
__declspec(implementation_key(536)) void IVideoGrabberVC6::PutDisplay_Width ( long Value );
__declspec(implementation_key(537)) VARIANT_BOOL IVideoGrabberVC6::GetDoubleBuffered ( );
__declspec(implementation_key(538)) void IVideoGrabberVC6::PutDoubleBuffered ( VARIANT_BOOL Value );
__declspec(implementation_key(539)) long IVideoGrabberVC6::GetDroppedFramesPollingInterval ( );
__declspec(implementation_key(540)) void IVideoGrabberVC6::PutDroppedFramesPollingInterval ( long Value );
__declspec(implementation_key(541)) VARIANT_BOOL IVideoGrabberVC6::GetDualDisplay_Active ( );
__declspec(implementation_key(542)) void IVideoGrabberVC6::PutDualDisplay_Active ( VARIANT_BOOL Value );
__declspec(implementation_key(543)) VARIANT_BOOL IVideoGrabberVC6::GetDualDisplay_AlphaBlendEnabled ( );
__declspec(implementation_key(544)) void IVideoGrabberVC6::PutDualDisplay_AlphaBlendEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(545)) long IVideoGrabberVC6::GetDualDisplay_AlphaBlendValue ( );
__declspec(implementation_key(546)) void IVideoGrabberVC6::PutDualDisplay_AlphaBlendValue ( long Value );
__declspec(implementation_key(547)) VARIANT_BOOL IVideoGrabberVC6::GetDualDisplay_TransparentColorEnabled ( );
__declspec(implementation_key(548)) void IVideoGrabberVC6::PutDualDisplay_TransparentColorEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(549)) long IVideoGrabberVC6::GetDualDisplay_TransparentColorValue ( );
__declspec(implementation_key(550)) void IVideoGrabberVC6::PutDualDisplay_TransparentColorValue ( long Value );
__declspec(implementation_key(551)) VARIANT_BOOL IVideoGrabberVC6::GetDualDisplay_AutoSize ( );
__declspec(implementation_key(552)) void IVideoGrabberVC6::PutDualDisplay_AutoSize ( VARIANT_BOOL Value );
__declspec(implementation_key(553)) enum TxAspectRatio IVideoGrabberVC6::GetDualDisplay_AspectRatio ( );
__declspec(implementation_key(554)) void IVideoGrabberVC6::PutDualDisplay_AspectRatio ( enum TxAspectRatio Value );
__declspec(implementation_key(555)) VARIANT_BOOL IVideoGrabberVC6::GetDualDisplay_Embedded ( );
__declspec(implementation_key(556)) void IVideoGrabberVC6::PutDualDisplay_Embedded ( VARIANT_BOOL Value );
__declspec(implementation_key(557)) VARIANT_BOOL IVideoGrabberVC6::GetDualDisplay_FullScreen ( );
__declspec(implementation_key(558)) void IVideoGrabberVC6::PutDualDisplay_FullScreen ( VARIANT_BOOL Value );
__declspec(implementation_key(559)) long IVideoGrabberVC6::GetDualDisplay_Height ( );
__declspec(implementation_key(560)) void IVideoGrabberVC6::PutDualDisplay_Height ( long Value );
__declspec(implementation_key(561)) long IVideoGrabberVC6::GetDualDisplay_Left ( );
__declspec(implementation_key(562)) void IVideoGrabberVC6::PutDualDisplay_Left ( long Value );
__declspec(implementation_key(563)) long IVideoGrabberVC6::GetDualDisplay_Monitor ( );
__declspec(implementation_key(564)) void IVideoGrabberVC6::PutDualDisplay_Monitor ( long Value );
__declspec(implementation_key(565)) VARIANT_BOOL IVideoGrabberVC6::GetDualDisplay_MouseMovesWindow ( );
__declspec(implementation_key(566)) void IVideoGrabberVC6::PutDualDisplay_MouseMovesWindow ( VARIANT_BOOL Value );
__declspec(implementation_key(567)) long IVideoGrabberVC6::GetDualDisplay_PanScanRatio ( );
__declspec(implementation_key(568)) void IVideoGrabberVC6::PutDualDisplay_PanScanRatio ( long Value );
__declspec(implementation_key(569)) VARIANT_BOOL IVideoGrabberVC6::GetDualDisplay_StayOnTop ( );
__declspec(implementation_key(570)) void IVideoGrabberVC6::PutDualDisplay_StayOnTop ( VARIANT_BOOL Value );
__declspec(implementation_key(571)) long IVideoGrabberVC6::GetDualDisplay_Top ( );
__declspec(implementation_key(572)) void IVideoGrabberVC6::PutDualDisplay_Top ( long Value );
__declspec(implementation_key(573)) VARIANT_BOOL IVideoGrabberVC6::GetDualDisplay_VideoPortEnabled ( );
__declspec(implementation_key(574)) void IVideoGrabberVC6::PutDualDisplay_VideoPortEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(575)) VARIANT_BOOL IVideoGrabberVC6::GetDualDisplay_Visible ( );
__declspec(implementation_key(576)) void IVideoGrabberVC6::PutDualDisplay_Visible ( VARIANT_BOOL Value );
__declspec(implementation_key(577)) long IVideoGrabberVC6::GetDualDisplay_Width ( );
__declspec(implementation_key(578)) void IVideoGrabberVC6::PutDualDisplay_Width ( long Value );
__declspec(implementation_key(579)) VARIANT_BOOL IVideoGrabberVC6::GetDVDateTimeEnabled ( );
__declspec(implementation_key(580)) void IVideoGrabberVC6::PutDVDateTimeEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(581)) long IVideoGrabberVC6::GetDVDTitle ( );
__declspec(implementation_key(582)) void IVideoGrabberVC6::PutDVDTitle ( long Value );
__declspec(implementation_key(583)) long IVideoGrabberVC6::GetDVDiscontinuityMinimumInterval ( );
__declspec(implementation_key(584)) void IVideoGrabberVC6::PutDVDiscontinuityMinimumInterval ( long Value );
__declspec(implementation_key(585)) enum TxDVVideoFormat IVideoGrabberVC6::GetDVEncoder_VideoFormat ( );
__declspec(implementation_key(586)) void IVideoGrabberVC6::PutDVEncoder_VideoFormat ( enum TxDVVideoFormat Value );
__declspec(implementation_key(587)) enum TxDVSize IVideoGrabberVC6::GetDVEncoder_VideoResolution ( );
__declspec(implementation_key(588)) void IVideoGrabberVC6::PutDVEncoder_VideoResolution ( enum TxDVSize Value );
__declspec(implementation_key(589)) enum TxDVVideoStandard IVideoGrabberVC6::GetDVEncoder_VideoStandard ( );
__declspec(implementation_key(590)) void IVideoGrabberVC6::PutDVEncoder_VideoStandard ( enum TxDVVideoStandard Value );
__declspec(implementation_key(591)) VARIANT_BOOL IVideoGrabberVC6::GetDVRgb219 ( );
__declspec(implementation_key(592)) void IVideoGrabberVC6::PutDVRgb219 ( VARIANT_BOOL Value );
__declspec(implementation_key(593)) VARIANT_BOOL IVideoGrabberVC6::GetDVReduceFrameRate ( );
__declspec(implementation_key(594)) void IVideoGrabberVC6::PutDVReduceFrameRate ( VARIANT_BOOL Value );
__declspec(implementation_key(595)) VARIANT_BOOL IVideoGrabberVC6::GetDVRecordingInNativeFormatSeparatesStreams ( );
__declspec(implementation_key(596)) void IVideoGrabberVC6::PutDVRecordingInNativeFormatSeparatesStreams ( VARIANT_BOOL Value );
__declspec(implementation_key(597)) VARIANT_BOOL IVideoGrabberVC6::GetDVTimeCodeEnabled ( );
__declspec(implementation_key(598)) void IVideoGrabberVC6::PutDVTimeCodeEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(599)) VARIANT_BOOL IVideoGrabberVC6::GetEventNotificationSynchrone ( );
__declspec(implementation_key(600)) void IVideoGrabberVC6::PutEventNotificationSynchrone ( VARIANT_BOOL Value );
__declspec(implementation_key(601)) VARIANT_BOOL IVideoGrabberVC6::GetCropping_Enabled ( );
__declspec(implementation_key(602)) void IVideoGrabberVC6::PutCropping_Enabled ( VARIANT_BOOL Value );
__declspec(implementation_key(603)) long IVideoGrabberVC6::GetCropping_Height ( );
__declspec(implementation_key(604)) void IVideoGrabberVC6::PutCropping_Height ( long Value );
__declspec(implementation_key(605)) VARIANT_BOOL IVideoGrabberVC6::GetCropping_Outbounds ( );
__declspec(implementation_key(606)) void IVideoGrabberVC6::PutCropping_Outbounds ( VARIANT_BOOL Value );
__declspec(implementation_key(607)) long IVideoGrabberVC6::GetCropping_Width ( );
__declspec(implementation_key(608)) void IVideoGrabberVC6::PutCropping_Width ( long Value );
__declspec(implementation_key(609)) long IVideoGrabberVC6::GetCropping_X ( );
__declspec(implementation_key(610)) void IVideoGrabberVC6::PutCropping_X ( long Value );
__declspec(implementation_key(611)) long IVideoGrabberVC6::GetCropping_Y ( );
__declspec(implementation_key(612)) void IVideoGrabberVC6::PutCropping_Y ( long Value );
__declspec(implementation_key(613)) double IVideoGrabberVC6::GetCropping_Zoom ( );
__declspec(implementation_key(614)) void IVideoGrabberVC6::PutCropping_Zoom ( double Value );
__declspec(implementation_key(615)) VARIANT_BOOL IVideoGrabberVC6::GetFixFlickerOrBlackCapture ( );
__declspec(implementation_key(616)) void IVideoGrabberVC6::PutFixFlickerOrBlackCapture ( VARIANT_BOOL Value );
__declspec(implementation_key(617)) VARIANT_BOOL IVideoGrabberVC6::GetFrameCaptureWithoutOverlay ( );
__declspec(implementation_key(618)) void IVideoGrabberVC6::PutFrameCaptureWithoutOverlay ( VARIANT_BOOL Value );
__declspec(implementation_key(619)) long IVideoGrabberVC6::GetFrameCaptureHeight ( );
__declspec(implementation_key(620)) void IVideoGrabberVC6::PutFrameCaptureHeight ( long Value );
__declspec(implementation_key(621)) long IVideoGrabberVC6::GetFrameCaptureWidth ( );
__declspec(implementation_key(622)) void IVideoGrabberVC6::PutFrameCaptureWidth ( long Value );
__declspec(implementation_key(623)) long IVideoGrabberVC6::GetFrameCaptureZoomSize ( );
__declspec(implementation_key(624)) void IVideoGrabberVC6::PutFrameCaptureZoomSize ( long Value );
__declspec(implementation_key(625)) enum TxFrameGrabber IVideoGrabberVC6::GetFrameGrabber ( );
__declspec(implementation_key(626)) void IVideoGrabberVC6::PutFrameGrabber ( enum TxFrameGrabber Value );
__declspec(implementation_key(627)) enum TxFrameGrabberRGBFormat IVideoGrabberVC6::GetFrameGrabberRGBFormat ( );
__declspec(implementation_key(628)) void IVideoGrabberVC6::PutFrameGrabberRGBFormat ( enum TxFrameGrabberRGBFormat Value );
__declspec(implementation_key(629)) VARIANT_BOOL IVideoGrabberVC6::GetFrameNumberStartsFromZero ( );
__declspec(implementation_key(630)) void IVideoGrabberVC6::PutFrameNumberStartsFromZero ( VARIANT_BOOL Value );
__declspec(implementation_key(631)) double IVideoGrabberVC6::GetFrameRate ( );
__declspec(implementation_key(632)) void IVideoGrabberVC6::PutFrameRate ( double Value );
__declspec(implementation_key(633)) VARIANT_BOOL IVideoGrabberVC6::GetImageOverlay_AlphaBlend ( );
__declspec(implementation_key(634)) void IVideoGrabberVC6::PutImageOverlay_AlphaBlend ( VARIANT_BOOL Value );
__declspec(implementation_key(635)) long IVideoGrabberVC6::GetImageOverlay_AlphaBlendValue ( );
__declspec(implementation_key(636)) void IVideoGrabberVC6::PutImageOverlay_AlphaBlendValue ( long Value );
__declspec(implementation_key(637)) VARIANT_BOOL IVideoGrabberVC6::GetImageOverlay_ChromaKey ( );
__declspec(implementation_key(638)) void IVideoGrabberVC6::PutImageOverlay_ChromaKey ( VARIANT_BOOL Value );
__declspec(implementation_key(639)) long IVideoGrabberVC6::GetImageOverlay_ChromaKeyLeewayPercent ( );
__declspec(implementation_key(640)) void IVideoGrabberVC6::PutImageOverlay_ChromaKeyLeewayPercent ( long Value );
__declspec(implementation_key(641)) long IVideoGrabberVC6::GetImageOverlay_ChromaKeyRGBColor ( );
__declspec(implementation_key(642)) void IVideoGrabberVC6::PutImageOverlay_ChromaKeyRGBColor ( long Value );
__declspec(implementation_key(643)) long IVideoGrabberVC6::GetImageOverlay_Height ( );
__declspec(implementation_key(644)) void IVideoGrabberVC6::PutImageOverlay_Height ( long Value );
__declspec(implementation_key(645)) long IVideoGrabberVC6::GetImageOverlay_LeftLocation ( );
__declspec(implementation_key(646)) void IVideoGrabberVC6::PutImageOverlay_LeftLocation ( long Value );
__declspec(implementation_key(647)) double IVideoGrabberVC6::GetImageOverlay_RotationAngle ( );
__declspec(implementation_key(648)) void IVideoGrabberVC6::PutImageOverlay_RotationAngle ( double Value );
__declspec(implementation_key(649)) VARIANT_BOOL IVideoGrabberVC6::GetImageOverlay_StretchToVideoSize ( );
__declspec(implementation_key(650)) void IVideoGrabberVC6::PutImageOverlay_StretchToVideoSize ( VARIANT_BOOL Value );
__declspec(implementation_key(651)) long IVideoGrabberVC6::GetImageOverlay_TopLocation ( );
__declspec(implementation_key(652)) void IVideoGrabberVC6::PutImageOverlay_TopLocation ( long Value );
__declspec(implementation_key(653)) VARIANT_BOOL IVideoGrabberVC6::GetImageOverlay_Transparent ( );
__declspec(implementation_key(654)) void IVideoGrabberVC6::PutImageOverlay_Transparent ( VARIANT_BOOL Value );
__declspec(implementation_key(655)) long IVideoGrabberVC6::GetImageOverlay_TransparentColorValue ( );
__declspec(implementation_key(656)) void IVideoGrabberVC6::PutImageOverlay_TransparentColorValue ( long Value );
__declspec(implementation_key(657)) VARIANT_BOOL IVideoGrabberVC6::GetImageOverlay_UseTransparentColor ( );
__declspec(implementation_key(658)) void IVideoGrabberVC6::PutImageOverlay_UseTransparentColor ( VARIANT_BOOL Value );
__declspec(implementation_key(659)) long IVideoGrabberVC6::GetImageOverlay_Width ( );
__declspec(implementation_key(660)) void IVideoGrabberVC6::PutImageOverlay_Width ( long Value );
__declspec(implementation_key(661)) VARIANT_BOOL IVideoGrabberVC6::GetImageOverlayEnabled ( );
__declspec(implementation_key(662)) void IVideoGrabberVC6::PutImageOverlayEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(663)) _bstr_t IVideoGrabberVC6::GetIPCameraURL ( );
__declspec(implementation_key(664)) void IVideoGrabberVC6::PutIPCameraURL ( _bstr_t Value );
__declspec(implementation_key(665)) enum TxJPEGPerformance IVideoGrabberVC6::GetJPEGPerformance ( );
__declspec(implementation_key(666)) void IVideoGrabberVC6::PutJPEGPerformance ( enum TxJPEGPerformance Value );
__declspec(implementation_key(667)) VARIANT_BOOL IVideoGrabberVC6::GetJPEGProgressiveDisplay ( );
__declspec(implementation_key(668)) void IVideoGrabberVC6::PutJPEGProgressiveDisplay ( VARIANT_BOOL Value );
__declspec(implementation_key(669)) long IVideoGrabberVC6::GetJPEGQuality ( );
__declspec(implementation_key(670)) void IVideoGrabberVC6::PutJPEGQuality ( long Value );
__declspec(implementation_key(671)) _bstr_t IVideoGrabberVC6::GetLicenseString ( );
__declspec(implementation_key(672)) void IVideoGrabberVC6::PutLicenseString ( _bstr_t Value );
__declspec(implementation_key(673)) VARIANT_BOOL IVideoGrabberVC6::GetLogoDisplayed ( );
__declspec(implementation_key(674)) void IVideoGrabberVC6::PutLogoDisplayed ( VARIANT_BOOL Value );
__declspec(implementation_key(675)) enum TxLogoLayout IVideoGrabberVC6::GetLogoLayout ( );
__declspec(implementation_key(676)) void IVideoGrabberVC6::PutLogoLayout ( enum TxLogoLayout Value );
__declspec(implementation_key(677)) long IVideoGrabberVC6::GetMixAudioSamples_CurrentSourceLevel ( );
__declspec(implementation_key(678)) void IVideoGrabberVC6::PutMixAudioSamples_CurrentSourceLevel ( long Value );
__declspec(implementation_key(679)) long IVideoGrabberVC6::GetMixAudioSamples_ExternalSourceLevel ( );
__declspec(implementation_key(680)) void IVideoGrabberVC6::PutMixAudioSamples_ExternalSourceLevel ( long Value );
__declspec(implementation_key(681)) long IVideoGrabberVC6::GetMixer_MosaicColumns ( );
__declspec(implementation_key(682)) void IVideoGrabberVC6::PutMixer_MosaicColumns ( long Value );
__declspec(implementation_key(683)) long IVideoGrabberVC6::GetMixer_MosaicLines ( );
__declspec(implementation_key(684)) void IVideoGrabberVC6::PutMixer_MosaicLines ( long Value );
__declspec(implementation_key(685)) VARIANT_BOOL IVideoGrabberVC6::GetMotionDetector_CompareBlue ( );
__declspec(implementation_key(686)) void IVideoGrabberVC6::PutMotionDetector_CompareBlue ( VARIANT_BOOL Value );
__declspec(implementation_key(687)) VARIANT_BOOL IVideoGrabberVC6::GetMotionDetector_CompareGreen ( );
__declspec(implementation_key(688)) void IVideoGrabberVC6::PutMotionDetector_CompareGreen ( VARIANT_BOOL Value );
__declspec(implementation_key(689)) VARIANT_BOOL IVideoGrabberVC6::GetMotionDetector_GreyScale ( );
__declspec(implementation_key(690)) void IVideoGrabberVC6::PutMotionDetector_GreyScale ( VARIANT_BOOL Value );
__declspec(implementation_key(691)) VARIANT_BOOL IVideoGrabberVC6::GetMotionDetector_CompareRed ( );
__declspec(implementation_key(692)) void IVideoGrabberVC6::PutMotionDetector_CompareRed ( VARIANT_BOOL Value );
__declspec(implementation_key(693)) VARIANT_BOOL IVideoGrabberVC6::GetMotionDetector_Enabled ( );
__declspec(implementation_key(694)) void IVideoGrabberVC6::PutMotionDetector_Enabled ( VARIANT_BOOL Value );
__declspec(implementation_key(695)) _bstr_t IVideoGrabberVC6::GetMotionDetector_Grid ( );
__declspec(implementation_key(696)) void IVideoGrabberVC6::PutMotionDetector_Grid ( _bstr_t Value );
__declspec(implementation_key(697)) double IVideoGrabberVC6::GetMotionDetector_MaxDetectionsPerSecond ( );
__declspec(implementation_key(698)) void IVideoGrabberVC6::PutMotionDetector_MaxDetectionsPerSecond ( double Value );
__declspec(implementation_key(699)) long IVideoGrabberVC6::GetMotionDetector_ReduceCPULoad ( );
__declspec(implementation_key(700)) void IVideoGrabberVC6::PutMotionDetector_ReduceCPULoad ( long Value );
__declspec(implementation_key(701)) VARIANT_BOOL IVideoGrabberVC6::GetMotionDetector_ReduceVideoNoise ( );
__declspec(implementation_key(702)) void IVideoGrabberVC6::PutMotionDetector_ReduceVideoNoise ( VARIANT_BOOL Value );
__declspec(implementation_key(703)) VARIANT_BOOL IVideoGrabberVC6::GetMotionDetector_Triggered ( );
__declspec(implementation_key(704)) void IVideoGrabberVC6::PutMotionDetector_Triggered ( VARIANT_BOOL Value );
__declspec(implementation_key(705)) VARIANT_BOOL IVideoGrabberVC6::GetMouseWheelEventEnabled ( );
__declspec(implementation_key(706)) void IVideoGrabberVC6::PutMouseWheelEventEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(707)) VARIANT_BOOL IVideoGrabberVC6::GetMultiplexedInputEmulation ( );
__declspec(implementation_key(708)) void IVideoGrabberVC6::PutMultiplexedInputEmulation ( VARIANT_BOOL Value );
__declspec(implementation_key(709)) enum TxMultiplexedRole IVideoGrabberVC6::GetMultiplexedRole ( );
__declspec(implementation_key(710)) void IVideoGrabberVC6::PutMultiplexedRole ( enum TxMultiplexedRole Value );
__declspec(implementation_key(711)) long IVideoGrabberVC6::GetMultiplexedSwitchDelay ( );
__declspec(implementation_key(712)) void IVideoGrabberVC6::PutMultiplexedSwitchDelay ( long Value );
__declspec(implementation_key(713)) long IVideoGrabberVC6::GetMultiplexedStabilizationDelay ( );
__declspec(implementation_key(714)) void IVideoGrabberVC6::PutMultiplexedStabilizationDelay ( long Value );
__declspec(implementation_key(715)) long IVideoGrabberVC6::GetMultiplexer ( );
__declspec(implementation_key(716)) void IVideoGrabberVC6::PutMultiplexer ( long Value );
__declspec(implementation_key(717)) VARIANT_BOOL IVideoGrabberVC6::GetMuteAudioRendering ( );
__declspec(implementation_key(718)) void IVideoGrabberVC6::PutMuteAudioRendering ( VARIANT_BOOL Value );
__declspec(implementation_key(719)) enum TxNetworkStreaming IVideoGrabberVC6::GetNetworkStreaming ( );
__declspec(implementation_key(720)) void IVideoGrabberVC6::PutNetworkStreaming ( enum TxNetworkStreaming Value );
__declspec(implementation_key(721)) enum TxNetworkStreamingType IVideoGrabberVC6::GetNetworkStreamingType ( );
__declspec(implementation_key(722)) void IVideoGrabberVC6::PutNetworkStreamingType ( enum TxNetworkStreamingType Value );
__declspec(implementation_key(723)) enum TxNotificationMethod IVideoGrabberVC6::GetNotificationMethod ( );
__declspec(implementation_key(724)) void IVideoGrabberVC6::PutNotificationMethod ( enum TxNotificationMethod Value );
__declspec(implementation_key(725)) long IVideoGrabberVC6::GetNotificationSleepTime ( );
__declspec(implementation_key(726)) void IVideoGrabberVC6::PutNotificationSleepTime ( long Value );
__declspec(implementation_key(727)) enum TxThreadPriority IVideoGrabberVC6::GetNotificationPriority ( );
__declspec(implementation_key(728)) void IVideoGrabberVC6::PutNotificationPriority ( enum TxThreadPriority Value );
__declspec(implementation_key(729)) VARIANT_BOOL IVideoGrabberVC6::GetOverlayAfterTransform ( );
__declspec(implementation_key(730)) void IVideoGrabberVC6::PutOverlayAfterTransform ( VARIANT_BOOL Value );
__declspec(implementation_key(731)) VARIANT_BOOL IVideoGrabberVC6::GetOverlayEventCallbackAllowed ( );
__declspec(implementation_key(732)) void IVideoGrabberVC6::PutOverlayEventCallbackAllowed ( VARIANT_BOOL Value );
__declspec(implementation_key(733)) VARIANT_BOOL IVideoGrabberVC6::GetPlayerAudioRendering ( );
__declspec(implementation_key(734)) void IVideoGrabberVC6::PutPlayerAudioRendering ( VARIANT_BOOL Value );
__declspec(implementation_key(735)) enum TxDVSize IVideoGrabberVC6::GetPlayerDVSize ( );
__declspec(implementation_key(736)) void IVideoGrabberVC6::PutPlayerDVSize ( enum TxDVSize Value );
__declspec(implementation_key(737)) long IVideoGrabberVC6::GetPlayerFastSeekSpeedRatio ( );
__declspec(implementation_key(738)) void IVideoGrabberVC6::PutPlayerFastSeekSpeedRatio ( long Value );
__declspec(implementation_key(739)) _bstr_t IVideoGrabberVC6::GetPlayerFileName ( );
__declspec(implementation_key(740)) void IVideoGrabberVC6::PutPlayerFileName ( _bstr_t Value );
__declspec(implementation_key(741)) _bstr_t IVideoGrabberVC6::GetPlayerForcedCodec ( );
__declspec(implementation_key(742)) void IVideoGrabberVC6::PutPlayerForcedCodec ( _bstr_t Value );
__declspec(implementation_key(743)) VARIANT_BOOL IVideoGrabberVC6::GetPlayerRefreshPausedDisplay ( );
__declspec(implementation_key(744)) void IVideoGrabberVC6::PutPlayerRefreshPausedDisplay ( VARIANT_BOOL Value );
__declspec(implementation_key(745)) double IVideoGrabberVC6::GetPlayerRefreshPausedDisplayFrameRate ( );
__declspec(implementation_key(746)) void IVideoGrabberVC6::PutPlayerRefreshPausedDisplayFrameRate ( double Value );
__declspec(implementation_key(747)) double IVideoGrabberVC6::GetPlayerSpeedRatio ( );
__declspec(implementation_key(748)) void IVideoGrabberVC6::PutPlayerSpeedRatio ( double Value );
__declspec(implementation_key(749)) VARIANT_BOOL IVideoGrabberVC6::GetPlayerTrackBarSynchrone ( );
__declspec(implementation_key(750)) void IVideoGrabberVC6::PutPlayerTrackBarSynchrone ( VARIANT_BOOL Value );
__declspec(implementation_key(751)) VARIANT_BOOL IVideoGrabberVC6::GetPreallocCapFileCopiedAfterRecording ( );
__declspec(implementation_key(752)) void IVideoGrabberVC6::PutPreallocCapFileCopiedAfterRecording ( VARIANT_BOOL Value );
__declspec(implementation_key(753)) VARIANT_BOOL IVideoGrabberVC6::GetPreallocCapFileEnabled ( );
__declspec(implementation_key(754)) void IVideoGrabberVC6::PutPreallocCapFileEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(755)) _bstr_t IVideoGrabberVC6::GetPreallocCapFileName ( );
__declspec(implementation_key(756)) void IVideoGrabberVC6::PutPreallocCapFileName ( _bstr_t Value );
__declspec(implementation_key(757)) long IVideoGrabberVC6::GetPreallocCapFileSizeInMB ( );
__declspec(implementation_key(758)) void IVideoGrabberVC6::PutPreallocCapFileSizeInMB ( long Value );
__declspec(implementation_key(759)) long IVideoGrabberVC6::GetPreviewZoomSize ( );
__declspec(implementation_key(760)) void IVideoGrabberVC6::PutPreviewZoomSize ( long Value );
__declspec(implementation_key(761)) long IVideoGrabberVC6::GetRecordingAudioBitRate ( );
__declspec(implementation_key(762)) void IVideoGrabberVC6::PutRecordingAudioBitRate ( long Value );
__declspec(implementation_key(763)) long IVideoGrabberVC6::GetRecordingVideoBitRate ( );
__declspec(implementation_key(764)) void IVideoGrabberVC6::PutRecordingVideoBitRate ( long Value );
__declspec(implementation_key(765)) _bstr_t IVideoGrabberVC6::GetRecordingFileName ( );
__declspec(implementation_key(766)) void IVideoGrabberVC6::PutRecordingFileName ( _bstr_t Value );
__declspec(implementation_key(767)) VARIANT_BOOL IVideoGrabberVC6::GetRecordingInNativeFormat ( );
__declspec(implementation_key(768)) void IVideoGrabberVC6::PutRecordingInNativeFormat ( VARIANT_BOOL Value );
__declspec(implementation_key(769)) enum TxRecordingMethod IVideoGrabberVC6::GetRecordingMethod ( );
__declspec(implementation_key(770)) void IVideoGrabberVC6::PutRecordingMethod ( enum TxRecordingMethod Value );
__declspec(implementation_key(771)) VARIANT_BOOL IVideoGrabberVC6::GetRecordingPauseCreatesNewFile ( );
__declspec(implementation_key(772)) void IVideoGrabberVC6::PutRecordingPauseCreatesNewFile ( VARIANT_BOOL Value );
__declspec(implementation_key(773)) VARIANT_BOOL IVideoGrabberVC6::GetRecordingOnMotion_Enabled ( );
__declspec(implementation_key(774)) void IVideoGrabberVC6::PutRecordingOnMotion_Enabled ( VARIANT_BOOL Value );
__declspec(implementation_key(775)) double IVideoGrabberVC6::GetRecordingOnMotion_MotionThreshold ( );
__declspec(implementation_key(776)) void IVideoGrabberVC6::PutRecordingOnMotion_MotionThreshold ( double Value );
__declspec(implementation_key(777)) enum TxRecordingTimer IVideoGrabberVC6::GetRecordingTimer ( );
__declspec(implementation_key(778)) void IVideoGrabberVC6::PutRecordingTimer ( enum TxRecordingTimer Value );
__declspec(implementation_key(779)) long IVideoGrabberVC6::GetRecordingTimerInterval ( );
__declspec(implementation_key(780)) void IVideoGrabberVC6::PutRecordingTimerInterval ( long Value );
__declspec(implementation_key(781)) long IVideoGrabberVC6::GetRecordingOnMotion_NoMotionPauseDelayMs ( );
__declspec(implementation_key(782)) void IVideoGrabberVC6::PutRecordingOnMotion_NoMotionPauseDelayMs ( long Value );
__declspec(implementation_key(783)) _bstr_t IVideoGrabberVC6::GetReencoding_NewVideoClip ( );
__declspec(implementation_key(784)) void IVideoGrabberVC6::PutReencoding_NewVideoClip ( _bstr_t Value );
__declspec(implementation_key(785)) _bstr_t IVideoGrabberVC6::GetReencoding_SourceVideoClip ( );
__declspec(implementation_key(786)) void IVideoGrabberVC6::PutReencoding_SourceVideoClip ( _bstr_t Value );
__declspec(implementation_key(787)) double IVideoGrabberVC6::GetReencoding_StartTime ( );
__declspec(implementation_key(788)) void IVideoGrabberVC6::PutReencoding_StartTime ( double Value );
__declspec(implementation_key(789)) double IVideoGrabberVC6::GetReencoding_StartFrame ( );
__declspec(implementation_key(790)) void IVideoGrabberVC6::PutReencoding_StartFrame ( double Value );
__declspec(implementation_key(791)) double IVideoGrabberVC6::GetReencoding_StopTime ( );
__declspec(implementation_key(792)) void IVideoGrabberVC6::PutReencoding_StopTime ( double Value );
__declspec(implementation_key(793)) double IVideoGrabberVC6::GetReencoding_StopFrame ( );
__declspec(implementation_key(794)) void IVideoGrabberVC6::PutReencoding_StopFrame ( double Value );
__declspec(implementation_key(795)) VARIANT_BOOL IVideoGrabberVC6::GetReencoding_IncludeAudioStream ( );
__declspec(implementation_key(796)) void IVideoGrabberVC6::PutReencoding_IncludeAudioStream ( VARIANT_BOOL Value );
__declspec(implementation_key(797)) VARIANT_BOOL IVideoGrabberVC6::GetReencoding_IncludeVideoStream ( );
__declspec(implementation_key(798)) void IVideoGrabberVC6::PutReencoding_IncludeVideoStream ( VARIANT_BOOL Value );
__declspec(implementation_key(799)) enum TxRecordingMethod IVideoGrabberVC6::GetReencoding_Method ( );
__declspec(implementation_key(800)) void IVideoGrabberVC6::PutReencoding_Method ( enum TxRecordingMethod Value );
__declspec(implementation_key(801)) VARIANT_BOOL IVideoGrabberVC6::GetReencoding_UseAudioCompressor ( );
__declspec(implementation_key(802)) void IVideoGrabberVC6::PutReencoding_UseAudioCompressor ( VARIANT_BOOL Value );
__declspec(implementation_key(803)) VARIANT_BOOL IVideoGrabberVC6::GetReencoding_UseFrameGrabber ( );
__declspec(implementation_key(804)) void IVideoGrabberVC6::PutReencoding_UseFrameGrabber ( VARIANT_BOOL Value );
__declspec(implementation_key(805)) VARIANT_BOOL IVideoGrabberVC6::GetReencoding_UseVideoCompressor ( );
__declspec(implementation_key(806)) void IVideoGrabberVC6::PutReencoding_UseVideoCompressor ( VARIANT_BOOL Value );
__declspec(implementation_key(807)) VARIANT_BOOL IVideoGrabberVC6::GetReencoding_WMVOutput ( );
__declspec(implementation_key(808)) void IVideoGrabberVC6::PutReencoding_WMVOutput ( VARIANT_BOOL Value );
__declspec(implementation_key(809)) enum TxRawSampleCaptureLocation IVideoGrabberVC6::GetRawSampleCaptureLocation ( );
__declspec(implementation_key(810)) void IVideoGrabberVC6::PutRawSampleCaptureLocation ( enum TxRawSampleCaptureLocation Value );
__declspec(implementation_key(811)) VARIANT_BOOL IVideoGrabberVC6::GetRawVideoSampleCapture ( );
__declspec(implementation_key(812)) void IVideoGrabberVC6::PutRawVideoSampleCapture ( VARIANT_BOOL Value );
__declspec(implementation_key(813)) VARIANT_BOOL IVideoGrabberVC6::GetRawAudioSampleCapture ( );
__declspec(implementation_key(814)) void IVideoGrabberVC6::PutRawAudioSampleCapture ( VARIANT_BOOL Value );
__declspec(implementation_key(815)) VARIANT_BOOL IVideoGrabberVC6::GetRawCaptureAsyncEvent ( );
__declspec(implementation_key(816)) void IVideoGrabberVC6::PutRawCaptureAsyncEvent ( VARIANT_BOOL Value );
__declspec(implementation_key(817)) enum TxRecordingSize IVideoGrabberVC6::GetRecordingSize ( );
__declspec(implementation_key(818)) void IVideoGrabberVC6::PutRecordingSize ( enum TxRecordingSize Value );
__declspec(implementation_key(819)) long IVideoGrabberVC6::GetScreenRecordingMonitor ( );
__declspec(implementation_key(820)) void IVideoGrabberVC6::PutScreenRecordingMonitor ( long Value );
__declspec(implementation_key(821)) VARIANT_BOOL IVideoGrabberVC6::GetScreenRecordingNonVisibleWindows ( );
__declspec(implementation_key(822)) void IVideoGrabberVC6::PutScreenRecordingNonVisibleWindows ( VARIANT_BOOL Value );
__declspec(implementation_key(823)) VARIANT_BOOL IVideoGrabberVC6::GetScreenRecordingThroughClipboard ( );
__declspec(implementation_key(824)) void IVideoGrabberVC6::PutScreenRecordingThroughClipboard ( VARIANT_BOOL Value );
__declspec(implementation_key(825)) VARIANT_BOOL IVideoGrabberVC6::GetScreenRecordingWithCursor ( );
__declspec(implementation_key(826)) void IVideoGrabberVC6::PutScreenRecordingWithCursor ( VARIANT_BOOL Value );
__declspec(implementation_key(827)) VARIANT_BOOL IVideoGrabberVC6::GetShapeOverlayEnabled ( );
__declspec(implementation_key(828)) void IVideoGrabberVC6::PutShapeOverlayEnabled ( VARIANT_BOOL Value );
__declspec(implementation_key(829)) VARIANT_BOOL IVideoGrabberVC6::GetSpeakerControl ( );
__declspec(implementation_key(830)) void IVideoGrabberVC6::PutSpeakerControl ( VARIANT_BOOL Value );
__declspec(implementation_key(831)) _bstr_t IVideoGrabberVC6::GetStoragePath ( );
__declspec(implementation_key(832)) void IVideoGrabberVC6::PutStoragePath ( _bstr_t Value );
__declspec(implementation_key(833)) VARIANT_BOOL IVideoGrabberVC6::GetStoreDeviceSettingsInRegistry ( );
__declspec(implementation_key(834)) void IVideoGrabberVC6::PutStoreDeviceSettingsInRegistry ( VARIANT_BOOL Value );
__declspec(implementation_key(835)) enum TxSynchronizationRole IVideoGrabberVC6::GetSynchronizationRole ( );
__declspec(implementation_key(836)) void IVideoGrabberVC6::PutSynchronizationRole ( enum TxSynchronizationRole Value );
__declspec(implementation_key(837)) VARIANT_BOOL IVideoGrabberVC6::GetSynchronized ( );
__declspec(implementation_key(838)) void IVideoGrabberVC6::PutSynchronized ( VARIANT_BOOL Value );
__declspec(implementation_key(839)) VARIANT_BOOL IVideoGrabberVC6::GetSyncCommands ( );
__declspec(implementation_key(840)) void IVideoGrabberVC6::PutSyncCommands ( VARIANT_BOOL Value );
__declspec(implementation_key(841)) enum TxSyncPreview IVideoGrabberVC6::GetSyncPreview ( );
__declspec(implementation_key(842)) void IVideoGrabberVC6::PutSyncPreview ( enum TxSyncPreview Value );
__declspec(implementation_key(843)) VARIANT_BOOL IVideoGrabberVC6::GetTextOverlay_Enabled ( );
__declspec(implementation_key(844)) void IVideoGrabberVC6::PutTextOverlay_Enabled ( VARIANT_BOOL Value );
__declspec(implementation_key(845)) long IVideoGrabberVC6::GetTextOverlay_Left ( );
__declspec(implementation_key(846)) void IVideoGrabberVC6::PutTextOverlay_Left ( long Value );
__declspec(implementation_key(847)) long IVideoGrabberVC6::GetTextOverlay_Top ( );
__declspec(implementation_key(848)) void IVideoGrabberVC6::PutTextOverlay_Top ( long Value );
__declspec(implementation_key(849)) long IVideoGrabberVC6::GetTextOverlay_Right ( );
__declspec(implementation_key(850)) void IVideoGrabberVC6::PutTextOverlay_Right ( long Value );
__declspec(implementation_key(851)) long IVideoGrabberVC6::GetTextOverlay_ScrollingSpeed ( );
__declspec(implementation_key(852)) void IVideoGrabberVC6::PutTextOverlay_ScrollingSpeed ( long Value );
__declspec(implementation_key(853)) VARIANT_BOOL IVideoGrabberVC6::GetTextOverlay_Shadow ( );
__declspec(implementation_key(854)) void IVideoGrabberVC6::PutTextOverlay_Shadow ( VARIANT_BOOL Value );
__declspec(implementation_key(855)) OLE_COLOR IVideoGrabberVC6::GetTextOverlay_ShadowColor ( );
__declspec(implementation_key(856)) void IVideoGrabberVC6::PutTextOverlay_ShadowColor ( OLE_COLOR Value );
__declspec(implementation_key(857)) enum TxCardinalDirection IVideoGrabberVC6::GetTextOverlay_ShadowDirection ( );
__declspec(implementation_key(858)) void IVideoGrabberVC6::PutTextOverlay_ShadowDirection ( enum TxCardinalDirection Value );
__declspec(implementation_key(859)) OLE_COLOR IVideoGrabberVC6::GetTextOverlay_BkColor ( );
__declspec(implementation_key(860)) void IVideoGrabberVC6::PutTextOverlay_BkColor ( OLE_COLOR Value );
__declspec(implementation_key(861)) enum TxTextOverlayAlign IVideoGrabberVC6::GetTextOverlay_Align ( );
__declspec(implementation_key(862)) void IVideoGrabberVC6::PutTextOverlay_Align ( enum TxTextOverlayAlign Value );
__declspec(implementation_key(863)) OLE_COLOR IVideoGrabberVC6::GetTextOverlay_FontColor ( );
__declspec(implementation_key(864)) void IVideoGrabberVC6::PutTextOverlay_FontColor ( OLE_COLOR Value );
__declspec(implementation_key(865)) _bstr_t IVideoGrabberVC6::GetTextOverlay_String ( );
__declspec(implementation_key(866)) void IVideoGrabberVC6::PutTextOverlay_String ( _bstr_t Value );
__declspec(implementation_key(867)) VARIANT_BOOL IVideoGrabberVC6::GetTextOverlay_Transparent ( );
__declspec(implementation_key(868)) void IVideoGrabberVC6::PutTextOverlay_Transparent ( VARIANT_BOOL Value );
__declspec(implementation_key(869)) _bstr_t IVideoGrabberVC6::GetThirdPartyDeinterlacer ( );
__declspec(implementation_key(870)) void IVideoGrabberVC6::PutThirdPartyDeinterlacer ( _bstr_t Value );
__declspec(implementation_key(871)) VARIANT_BOOL IVideoGrabberVC6::GetTranslateMouseCoordinates ( );
__declspec(implementation_key(872)) void IVideoGrabberVC6::PutTranslateMouseCoordinates ( VARIANT_BOOL Value );
__declspec(implementation_key(873)) VARIANT_BOOL IVideoGrabberVC6::GetTVUseFrequencyOverrides ( );
__declspec(implementation_key(874)) void IVideoGrabberVC6::PutTVUseFrequencyOverrides ( VARIANT_BOOL Value );
__declspec(implementation_key(875)) long IVideoGrabberVC6::GetTunerFrequency ( );
__declspec(implementation_key(876)) void IVideoGrabberVC6::PutTunerFrequency ( long Value );
__declspec(implementation_key(877)) VARIANT_BOOL IVideoGrabberVC6::GetUseClock ( );
__declspec(implementation_key(878)) void IVideoGrabberVC6::PutUseClock ( VARIANT_BOOL Value );
__declspec(implementation_key(879)) _bstr_t IVideoGrabberVC6::GetVersion ( );
__declspec(implementation_key(880)) void IVideoGrabberVC6::PutVersion ( _bstr_t Value );
__declspec(implementation_key(881)) long IVideoGrabberVC6::GetVideoDevice ( );
__declspec(implementation_key(882)) void IVideoGrabberVC6::PutVideoDevice ( long Value );
__declspec(implementation_key(883)) long IVideoGrabberVC6::GetVideoCompression_DataRate ( );
__declspec(implementation_key(884)) void IVideoGrabberVC6::PutVideoCompression_DataRate ( long Value );
__declspec(implementation_key(885)) long IVideoGrabberVC6::GetVideoCompression_KeyFrameRate ( );
__declspec(implementation_key(886)) void IVideoGrabberVC6::PutVideoCompression_KeyFrameRate ( long Value );
__declspec(implementation_key(887)) long IVideoGrabberVC6::GetVideoCompression_PFramesPerKeyFrame ( );
__declspec(implementation_key(888)) void IVideoGrabberVC6::PutVideoCompression_PFramesPerKeyFrame ( long Value );
__declspec(implementation_key(889)) double IVideoGrabberVC6::GetVideoCompression_Quality ( );
__declspec(implementation_key(890)) void IVideoGrabberVC6::PutVideoCompression_Quality ( double Value );
__declspec(implementation_key(891)) long IVideoGrabberVC6::GetVideoCompression_WindowSize ( );
__declspec(implementation_key(892)) void IVideoGrabberVC6::PutVideoCompression_WindowSize ( long Value );
__declspec(implementation_key(893)) long IVideoGrabberVC6::GetVideoCompressor ( );
__declspec(implementation_key(894)) void IVideoGrabberVC6::PutVideoCompressor ( long Value );
__declspec(implementation_key(895)) VARIANT_BOOL IVideoGrabberVC6::GetVideoControlSettings ( );
__declspec(implementation_key(896)) void IVideoGrabberVC6::PutVideoControlSettings ( VARIANT_BOOL Value );
__declspec(implementation_key(897)) long IVideoGrabberVC6::GetVideoFormat ( );
__declspec(implementation_key(898)) void IVideoGrabberVC6::PutVideoFormat ( long Value );
__declspec(implementation_key(899)) enum TxFileSort IVideoGrabberVC6::GetVideoFromImages_BitmapsSortedBy ( );
__declspec(implementation_key(900)) void IVideoGrabberVC6::PutVideoFromImages_BitmapsSortedBy ( enum TxFileSort Value );
__declspec(implementation_key(901)) VARIANT_BOOL IVideoGrabberVC6::GetVideoFromImages_RepeatIndefinitely ( );
__declspec(implementation_key(902)) void IVideoGrabberVC6::PutVideoFromImages_RepeatIndefinitely ( VARIANT_BOOL Value );
__declspec(implementation_key(903)) _bstr_t IVideoGrabberVC6::GetVideoFromImages_SourceDirectory ( );
__declspec(implementation_key(904)) void IVideoGrabberVC6::PutVideoFromImages_SourceDirectory ( _bstr_t Value );
__declspec(implementation_key(905)) _bstr_t IVideoGrabberVC6::GetVideoFromImages_TemporaryFile ( );
__declspec(implementation_key(906)) void IVideoGrabberVC6::PutVideoFromImages_TemporaryFile ( _bstr_t Value );
__declspec(implementation_key(907)) long IVideoGrabberVC6::GetVideoInput ( );
__declspec(implementation_key(908)) void IVideoGrabberVC6::PutVideoInput ( long Value );
__declspec(implementation_key(909)) long IVideoGrabberVC6::GetVideoProcessing_Brightness ( );
__declspec(implementation_key(910)) void IVideoGrabberVC6::PutVideoProcessing_Brightness ( long Value );
__declspec(implementation_key(911)) long IVideoGrabberVC6::GetVideoProcessing_Contrast ( );
__declspec(implementation_key(912)) void IVideoGrabberVC6::PutVideoProcessing_Contrast ( long Value );
__declspec(implementation_key(913)) enum TxVideoDeinterlacing IVideoGrabberVC6::GetVideoProcessing_Deinterlacing ( );
__declspec(implementation_key(914)) void IVideoGrabberVC6::PutVideoProcessing_Deinterlacing ( enum TxVideoDeinterlacing Value );
__declspec(implementation_key(915)) VARIANT_BOOL IVideoGrabberVC6::GetVideoProcessing_FlipHorizontal ( );
__declspec(implementation_key(916)) void IVideoGrabberVC6::PutVideoProcessing_FlipHorizontal ( VARIANT_BOOL Value );
__declspec(implementation_key(917)) VARIANT_BOOL IVideoGrabberVC6::GetVideoProcessing_FlipVertical ( );
__declspec(implementation_key(918)) void IVideoGrabberVC6::PutVideoProcessing_FlipVertical ( VARIANT_BOOL Value );
__declspec(implementation_key(919)) VARIANT_BOOL IVideoGrabberVC6::GetVideoProcessing_GrayScale ( );
__declspec(implementation_key(920)) void IVideoGrabberVC6::PutVideoProcessing_GrayScale ( VARIANT_BOOL Value );
__declspec(implementation_key(921)) long IVideoGrabberVC6::GetVideoProcessing_Hue ( );
__declspec(implementation_key(922)) void IVideoGrabberVC6::PutVideoProcessing_Hue ( long Value );
__declspec(implementation_key(923)) VARIANT_BOOL IVideoGrabberVC6::GetVideoProcessing_InvertColors ( );
__declspec(implementation_key(924)) void IVideoGrabberVC6::PutVideoProcessing_InvertColors ( VARIANT_BOOL Value );
__declspec(implementation_key(925)) long IVideoGrabberVC6::GetVideoProcessing_Pixellization ( );
__declspec(implementation_key(926)) void IVideoGrabberVC6::PutVideoProcessing_Pixellization ( long Value );
__declspec(implementation_key(927)) long IVideoGrabberVC6::GetVideoProcessing_Saturation ( );
__declspec(implementation_key(928)) void IVideoGrabberVC6::PutVideoProcessing_Saturation ( long Value );
__declspec(implementation_key(929)) enum TxVideoRotation IVideoGrabberVC6::GetVideoProcessing_Rotation ( );
__declspec(implementation_key(930)) void IVideoGrabberVC6::PutVideoProcessing_Rotation ( enum TxVideoRotation Value );
__declspec(implementation_key(931)) double IVideoGrabberVC6::GetVideoProcessing_RotationCustomAngle ( );
__declspec(implementation_key(932)) void IVideoGrabberVC6::PutVideoProcessing_RotationCustomAngle ( double Value );
__declspec(implementation_key(933)) VARIANT_BOOL IVideoGrabberVC6::GetVideoQualitySettings ( );
__declspec(implementation_key(934)) void IVideoGrabberVC6::PutVideoQualitySettings ( VARIANT_BOOL Value );
__declspec(implementation_key(935)) enum TxVideoRenderer IVideoGrabberVC6::GetVideoRenderer ( );
__declspec(implementation_key(936)) void IVideoGrabberVC6::PutVideoRenderer ( enum TxVideoRenderer Value );
__declspec(implementation_key(937)) enum TxVideoRendererExternal IVideoGrabberVC6::GetVideoRendererExternal ( );
__declspec(implementation_key(938)) void IVideoGrabberVC6::PutVideoRendererExternal ( enum TxVideoRendererExternal Value );
__declspec(implementation_key(939)) long IVideoGrabberVC6::GetVideoRendererExternalIndex ( );
__declspec(implementation_key(940)) void IVideoGrabberVC6::PutVideoRendererExternalIndex ( long Value );
__declspec(implementation_key(941)) long IVideoGrabberVC6::GetVideoSize ( );
__declspec(implementation_key(942)) void IVideoGrabberVC6::PutVideoSize ( long Value );
__declspec(implementation_key(943)) enum TxVideoSource IVideoGrabberVC6::GetVideoSource ( );
__declspec(implementation_key(944)) void IVideoGrabberVC6::PutVideoSource ( enum TxVideoSource Value );
__declspec(implementation_key(945)) _bstr_t IVideoGrabberVC6::GetVideoSource_FileOrURL ( );
__declspec(implementation_key(946)) void IVideoGrabberVC6::PutVideoSource_FileOrURL ( _bstr_t Value );
__declspec(implementation_key(947)) double IVideoGrabberVC6::GetVideoSource_FileOrURL_StartTime ( );
__declspec(implementation_key(948)) void IVideoGrabberVC6::PutVideoSource_FileOrURL_StartTime ( double Value );
__declspec(implementation_key(949)) double IVideoGrabberVC6::GetVideoSource_FileOrURL_StopTime ( );
__declspec(implementation_key(950)) void IVideoGrabberVC6::PutVideoSource_FileOrURL_StopTime ( double Value );
__declspec(implementation_key(951)) long IVideoGrabberVC6::GetVideoSubtype ( );
__declspec(implementation_key(952)) void IVideoGrabberVC6::PutVideoSubtype ( long Value );
__declspec(implementation_key(953)) VARIANT_BOOL IVideoGrabberVC6::GetVideoVisibleWhenStopped ( );
__declspec(implementation_key(954)) void IVideoGrabberVC6::PutVideoVisibleWhenStopped ( VARIANT_BOOL Value );
__declspec(implementation_key(955)) long IVideoGrabberVC6::GetVirtualVideoStreamControl ( );
__declspec(implementation_key(956)) void IVideoGrabberVC6::PutVirtualVideoStreamControl ( long Value );
__declspec(implementation_key(957)) long IVideoGrabberVC6::GetVirtualAudioStreamControl ( );
__declspec(implementation_key(958)) void IVideoGrabberVC6::PutVirtualAudioStreamControl ( long Value );
__declspec(implementation_key(959)) enum TxVuMeter IVideoGrabberVC6::GetVuMeter ( );
__declspec(implementation_key(960)) void IVideoGrabberVC6::PutVuMeter ( enum TxVuMeter Value );
__declspec(implementation_key(961)) enum TxWebcamStillCaptureButton IVideoGrabberVC6::GetWebcamStillCaptureButton ( );
__declspec(implementation_key(962)) void IVideoGrabberVC6::PutWebcamStillCaptureButton ( enum TxWebcamStillCaptureButton Value );
__declspec(implementation_key(963)) long IVideoGrabberVC6::GetZoomCoeff ( );
__declspec(implementation_key(964)) void IVideoGrabberVC6::PutZoomCoeff ( long Value );
__declspec(implementation_key(965)) long IVideoGrabberVC6::GetZoomXCenter ( );
__declspec(implementation_key(966)) void IVideoGrabberVC6::PutZoomXCenter ( long Value );
__declspec(implementation_key(967)) long IVideoGrabberVC6::GetZoomYCenter ( );
__declspec(implementation_key(968)) void IVideoGrabberVC6::PutZoomYCenter ( long Value );
__declspec(implementation_key(969)) VARIANT_BOOL IVideoGrabberVC6::GetParentBackground ( );
__declspec(implementation_key(970)) void IVideoGrabberVC6::PutParentBackground ( VARIANT_BOOL Value );
__declspec(implementation_key(971)) VARIANT_BOOL IVideoGrabberVC6::GetAlignDisabled ( );
__declspec(implementation_key(972)) long IVideoGrabberVC6::GetVisibleDockClientCount ( );
__declspec(implementation_key(973)) long IVideoGrabberVC6::DrawTextBiDiModeFlagsReadingOnly ( );
__declspec(implementation_key(974)) HRESULT IVideoGrabberVC6::InitiateAction ( );
__declspec(implementation_key(975)) VARIANT_BOOL IVideoGrabberVC6::IsRightToLeft ( );
__declspec(implementation_key(976)) VARIANT_BOOL IVideoGrabberVC6::UseRightToLeftReading ( );
__declspec(implementation_key(977)) VARIANT_BOOL IVideoGrabberVC6::UseRightToLeftScrollBar ( );
__declspec(implementation_key(978)) HRESULT IVideoGrabberVC6::SetSubComponent ( VARIANT_BOOL IsSubComponent );
__declspec(implementation_key(979)) HRESULT IVideoGrabberVC6::AboutBox ( );
__declspec(implementation_key(980)) HRESULT IVideoGrabberVC6Events::OnResize ( );
__declspec(implementation_key(981)) HRESULT IVideoGrabberVC6Events::OnCanResize ( long * NewWidth, long * NewHeight, VARIANT_BOOL * Resize );
__declspec(implementation_key(982)) HRESULT IVideoGrabberVC6Events::OnConstrainedResize ( long * MinWidth, long * MinHeight, long * MaxWidth, long * MaxHeight );
__declspec(implementation_key(983)) HRESULT IVideoGrabberVC6Events::OnAVIDurationUpdated ( _bstr_t FileName, long Frames, double * FrameRate, double * Duration );
__declspec(implementation_key(984)) HRESULT IVideoGrabberVC6Events::OnAudioDeviceSelected ( );
__declspec(implementation_key(985)) HRESULT IVideoGrabberVC6Events::OnAudioPeak ( double Left_Percent, double Left_DB, double Right_Percent, double Right_DB );
__declspec(implementation_key(986)) HRESULT IVideoGrabberVC6Events::OnBacktimedFramesCountReached ( );
__declspec(implementation_key(987)) HRESULT IVideoGrabberVC6Events::OnBitmapsLoadingProgress ( long Percent, double Position, double Duration, _bstr_t Comment );
__declspec(implementation_key(988)) HRESULT IVideoGrabberVC6Events::OnClick ( );
__declspec(implementation_key(989)) HRESULT IVideoGrabberVC6Events::OnDblClick ( );
__declspec(implementation_key(990)) HRESULT IVideoGrabberVC6Events::OnClientConnection ( VARIANT_BOOL Connected, _bstr_t ClientInfo );
__declspec(implementation_key(991)) HRESULT IVideoGrabberVC6Events::OnColorKeyChange ( OLE_COLOR ColorKey );
__declspec(implementation_key(992)) HRESULT IVideoGrabberVC6Events::OnCopyPreallocDataCompleted ( _bstr_t SourceFile, _bstr_t DestFile, VARIANT_BOOL Success );
__declspec(implementation_key(993)) HRESULT IVideoGrabberVC6Events::OnCopyPreallocDataProgress ( long Percent, double Position, double Duration );
__declspec(implementation_key(994)) HRESULT IVideoGrabberVC6Events::OnCopyPreallocDataStarted ( _bstr_t SourceFile, _bstr_t DestFile );
__declspec(implementation_key(995)) HRESULT IVideoGrabberVC6Events::OnCreatePreallocFileCompleted ( _bstr_t FileName, VARIANT_BOOL Success );
__declspec(implementation_key(996)) HRESULT IVideoGrabberVC6Events::OnCreatePreallocFileProgress ( long Percent, double Position, double Duration );
__declspec(implementation_key(997)) HRESULT IVideoGrabberVC6Events::OnCreatePreallocFileStarted ( _bstr_t FileName );
__declspec(implementation_key(998)) HRESULT IVideoGrabberVC6Events::OnDeviceArrivalOrRemoval ( VARIANT_BOOL IsDeviceArrival, VARIANT_BOOL IsVideoDevice, _bstr_t DeviceName, long DeviceIndex );
__declspec(implementation_key(999)) HRESULT IVideoGrabberVC6Events::OnDeviceLost ( );
__declspec(implementation_key(1000)) HRESULT IVideoGrabberVC6Events::OnDirectNetworkStreamingHostUrl ( _bstr_t HostUrl, _bstr_t HostName, long HostPort );
__declspec(implementation_key(1001)) HRESULT IVideoGrabberVC6Events::OnDiskFull ( );
__declspec(implementation_key(1002)) HRESULT IVideoGrabberVC6Events::OnDVDiscontinuity ( VARIANT_BOOL * DeliverNewFrame );
__declspec(implementation_key(1003)) HRESULT IVideoGrabberVC6Events::OnDVCommandCompleted ( long NewStateValue, _bstr_t NewStateLabel );
__declspec(implementation_key(1004)) HRESULT IVideoGrabberVC6Events::OnEnumerateWindows ( long WindowHandle, _bstr_t WindowName, _bstr_t WindowClass );
__declspec(implementation_key(1005)) HRESULT IVideoGrabberVC6Events::OnFilterSelected ( _bstr_t FilterName, VARIANT_BOOL * RejectFilter );
__declspec(implementation_key(1006)) HRESULT IVideoGrabberVC6Events::OnFirstFrameReceived ( );
__declspec(implementation_key(1007)) HRESULT IVideoGrabberVC6Events::OnFrameBitmap ( long FrameInfo, long BitmapInfo );
__declspec(implementation_key(1008)) HRESULT IVideoGrabberVC6Events::OnFrameCaptureCompleted ( long FrameBitmapHandle, long BitmapWidth, long BitmapHeight, long FrameNumber, double FrameTime, enum TxFrameCaptureDest DestType, _bstr_t FileName, VARIANT_BOOL Success, long FrameId );
__declspec(implementation_key(1009)) HRESULT IVideoGrabberVC6Events::OnFrameOverlayUsingDC ( long Dc, long FrameNumber, double FrameTime, long FrameId );
__declspec(implementation_key(1010)) HRESULT IVideoGrabberVC6Events::OnFrameOverlayUsingDIB ( long FrameBitmapHandle, long FrameNumber, double FrameTime, long FrameId );
__declspec(implementation_key(1011)) HRESULT IVideoGrabberVC6Events::OnFrameProgress ( long FrameNumber, double FrameTime, long FrameId );
__declspec(implementation_key(1012)) HRESULT IVideoGrabberVC6Events::OnFrameProgress2 ( long FrameInfo );
__declspec(implementation_key(1013)) HRESULT IVideoGrabberVC6Events::OnGraphBuilt ( );
__declspec(implementation_key(1014)) HRESULT IVideoGrabberVC6Events::OnInactive ( );
__declspec(implementation_key(1015)) HRESULT IVideoGrabberVC6Events::OnLastCommandCompleted ( );
__declspec(implementation_key(1016)) HRESULT IVideoGrabberVC6Events::OnKeyPress ( long VideoWindow, short * Key, long PhysicalKey );
__declspec(implementation_key(1017)) HRESULT IVideoGrabberVC6Events::OnLog ( enum TxLogType LogType, _bstr_t Severity, _bstr_t InfoMsg );
__declspec(implementation_key(1018)) HRESULT IVideoGrabberVC6Events::OnMotionDetected ( double GlobalMotionRatio, long MaxMotionCellX, long MaxMotionCellY, long FrameBitmapHandle, long FrameNumber, double FrameTime, long FrameId, VARIANT_BOOL * CaptureFrame );
__declspec(implementation_key(1019)) HRESULT IVideoGrabberVC6Events::OnMotionNotDetected ( long FrameBitmapHandle, long FrameNumber, double FrameTime, long FrameId, VARIANT_BOOL * CaptureFrame );
__declspec(implementation_key(1020)) HRESULT IVideoGrabberVC6Events::OnMouseDown ( long VideoWindow, enum TxMouseButton Button, long x, long y );
__declspec(implementation_key(1021)) HRESULT IVideoGrabberVC6Events::OnMouseMove ( long VideoWindow, long x, long y );
__declspec(implementation_key(1022)) HRESULT IVideoGrabberVC6Events::OnMouseUp ( long VideoWindow, enum TxMouseButton Button, long x, long y );
__declspec(implementation_key(1023)) HRESULT IVideoGrabberVC6Events::OnMouseWheel ( long VideoWindow, VARIANT_BOOL DirectionUp, long x, long y );
__declspec(implementation_key(1024)) HRESULT IVideoGrabberVC6Events::OnNoVideoDevices ( );
__declspec(implementation_key(1025)) HRESULT IVideoGrabberVC6Events::OnPlayerBufferingData ( VARIANT_BOOL StartingToBuffer );
__declspec(implementation_key(1026)) HRESULT IVideoGrabberVC6Events::OnPlayerEndOfPlaylist ( );
__declspec(implementation_key(1027)) HRESULT IVideoGrabberVC6Events::OnPlayerEndOfStream ( );
__declspec(implementation_key(1028)) HRESULT IVideoGrabberVC6Events::OnPlayerOpened ( );
__declspec(implementation_key(1029)) HRESULT IVideoGrabberVC6Events::OnPlayerUpdateTrackbarPosition ( long FrameNumber, double FrameTime, long FrameId );
__declspec(implementation_key(1030)) HRESULT IVideoGrabberVC6Events::OnPreviewStarted ( );
__declspec(implementation_key(1031)) HRESULT IVideoGrabberVC6Events::OnPlayerStateChanged ( enum TxPlayerState OldPlayerState, enum TxPlayerState NewPlayerState );
__declspec(implementation_key(1032)) HRESULT IVideoGrabberVC6Events::OnAuthenticationNeeded ( enum TxAuthenticationType AuthenticationType, _bstr_t Realm, _bstr_t Server, BSTR * UserName, BSTR * Password );
__declspec(implementation_key(1033)) HRESULT IVideoGrabberVC6Events::OnRawAudioSample ( long pSampleBuffer, long SampleBufferSize, long SampleDataLength, enum TxFormatType FormatType, long pFormat, long pWaveFormatEx, double SampleStartTime, double SampleStopTime );
__declspec(implementation_key(1034)) HRESULT IVideoGrabberVC6Events::OnRawVideoSample ( long pSampleBuffer, long SampleBufferSize, long SampleDataLength, enum TxFormatType FormatType, long pFormat, long pBitmapInfoHeader, double SampleStartTime, double SampleStopTime );
__declspec(implementation_key(1035)) HRESULT IVideoGrabberVC6Events::OnRecordingCompleted ( _bstr_t FileName, VARIANT_BOOL Success );
__declspec(implementation_key(1036)) HRESULT IVideoGrabberVC6Events::OnRecordingPaused ( );
__declspec(implementation_key(1037)) HRESULT IVideoGrabberVC6Events::OnRecordingReadyToStart ( );
__declspec(implementation_key(1038)) HRESULT IVideoGrabberVC6Events::OnRecordingStarted ( _bstr_t FileName );
__declspec(implementation_key(1039)) HRESULT IVideoGrabberVC6Events::OnReencodingCompleted ( _bstr_t SourceFile, _bstr_t DestFile, VARIANT_BOOL Success );
__declspec(implementation_key(1040)) HRESULT IVideoGrabberVC6Events::OnReencodingProgress ( long Percent, double Position, double Duration );
__declspec(implementation_key(1041)) HRESULT IVideoGrabberVC6Events::OnReencodingStarted ( _bstr_t SourceFile, _bstr_t DestFile );
__declspec(implementation_key(1042)) HRESULT IVideoGrabberVC6Events::OnReinitializing ( );
__declspec(implementation_key(1043)) HRESULT IVideoGrabberVC6Events::OnResizeVideo ( long SourceWidth, long SourceHeight );
__declspec(implementation_key(1044)) HRESULT IVideoGrabberVC6Events::OnTextOverlayScrollingCompleted ( long TextOverlayIndex );
__declspec(implementation_key(1045)) HRESULT IVideoGrabberVC6Events::OnTVChannelScanCompleted ( );
__declspec(implementation_key(1046)) HRESULT IVideoGrabberVC6Events::OnTVChannelScanStarted ( long MinChannel, long MaxChannel );
__declspec(implementation_key(1047)) HRESULT IVideoGrabberVC6Events::OnTVChannelSelected ( long Channel, VARIANT_BOOL Locked, long DefaultVideoFrequency, long OverriddenVideoFrequency, long TunerVideoFrequency, long TunerAudioFrequency );
__declspec(implementation_key(1048)) HRESULT IVideoGrabberVC6Events::OnVideoCompressionSettings ( VARIANT_BOOL CanKeyFrameRate, VARIANT_BOOL CanPFramesPerKeyFrame, VARIANT_BOOL CanQuality, VARIANT_BOOL CanWindowSize, VARIANT_BOOL CanSpecifyDataRate, long DefaultFrameRate, long DefaultPFramesPerKey, double DefaultQuality, long DefaultWindowSize, long DefaultDataRate );
__declspec(implementation_key(1049)) HRESULT IVideoGrabberVC6Events::OnVideoDeviceSelected ( );
__declspec(implementation_key(1050)) HRESULT IVideoGrabberVC6Events::OnVideoFromBitmapsNextFrameNeeded ( VARIANT_BOOL FirstSample );
#pragma stop_map_region

} // namespace Vidgrab_VC6

#pragma pack(pop)
